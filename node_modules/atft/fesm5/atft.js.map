{"version":3,"file":"atft.js","sources":["ng://atft/lib/camera/abstract-camera.ts","ng://atft/lib/renderer/renderer.service.ts","ng://atft/lib/camera/perspective-camera.component.ts","ng://atft/lib/camera/atft-camera.module.ts","ng://atft/lib/object/abstract-object-3d.ts","ng://atft/lib/object/connector/abstract-connector.ts","ng://atft/lib/util/applied-color.ts","ng://atft/lib/animation/animation.service.ts","ng://atft/lib/object/connector/mesh-line-connector.component.ts","ng://atft/lib/object/connector/line-connector.component.ts","ng://atft/lib/object/connector/atft-connector.module.ts","ng://atft/lib/object/helper/axes-helper.component.ts","ng://atft/lib/object/helper/empty.component.ts","ng://atft/lib/object/helper/grid-helper.component.ts","ng://atft/lib/object/helper/atft-helper.module.ts","ng://atft/lib/util/applied-material.ts","ng://atft/lib/util/calculate-size.ts","ng://atft/lib/util/fix-center.ts","ng://atft/lib/util/scale-to-fit.ts","ng://atft/lib/object/light/point-light.component.ts","ng://atft/lib/object/light/hemisphere-light.component.ts","ng://atft/lib/object/light/directional-light.component.ts","ng://atft/lib/object/light/atft-light.module.ts","ng://atft/lib/object/abstract-lazy-object-3d.ts","ng://atft/lib/object/loader/abstract-model-loader.ts","ng://atft/lib/object/loader/object-loader.component.ts","ng://atft/lib/object/loader/obj-loader.component.ts","ng://atft/lib/object/loader/svg-loader.component.ts","ng://atft/lib/object/loader/atft-loader.module.ts","ng://atft/lib/object/mesh/abstract-mesh-3d.ts","ng://atft/lib/object/mesh/box-mesh.component.ts","ng://atft/lib/object/mesh/cylinder-mesh.component.ts","ng://atft/lib/object/mesh/frame-mesh.component.ts","ng://atft/lib/object/mesh/plane-mesh.component.ts","ng://atft/lib/object/mesh/sphere-mesh.component.ts","ng://atft/lib/object/mesh/torus-mesh.component.ts","ng://atft/lib/object/mesh/abstract-css3d-mesh.ts","ng://atft/lib/object/mesh/css3d-video-mesh.component.ts","ng://atft/lib/object/mesh/atft-mesh.module.ts","ng://atft/lib/object/text/text-mesh.component.ts","ng://atft/lib/object/text/atft-text.module.ts","ng://atft/lib/object/scene.component.ts","ng://atft/lib/object/atft-object.module.ts","ng://atft/lib/raycaster/raycaster.service.ts","ng://atft/lib/renderer/renderer-canvas.component.ts","ng://atft/lib/control/abstract-orbit-controls.ts","ng://atft/lib/control/orbit-controls.component.ts","ng://atft/lib/control/map-controls.component.ts","ng://atft/lib/control/atft-control.module.ts","ng://atft/lib/pipe/deg2rad.pipe.ts","ng://atft/lib/pipe/rad2deg.pipe.ts","ng://atft/lib/pipe/atft-pipe.module.ts","ng://atft/lib/renderer/atft-renderer.module.ts","ng://atft/lib/animation/atft-animation.module.ts","ng://atft/lib/raycaster/raycaster-group.directive.ts","ng://atft/lib/raycaster/raycaster-camera.directive.ts","ng://atft/lib/raycaster/raycaster-enable.directive.ts","ng://atft/lib/raycaster/atft-raycaster.module.ts","ng://atft/lib/atft.module.ts","ng://atft/lib/object/helper/stats.service.ts"],"sourcesContent":["import {AfterViewInit, Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {RendererService} from '../renderer/renderer.service';\r\n\r\nexport abstract class AbstractCamera<T extends THREE.Camera> implements AfterViewInit, OnChanges {\r\n\r\n  camera: T;\r\n\r\n  @Input() positionX: number;\r\n  @Input() positionY: number;\r\n  @Input() positionZ: number;\r\n\r\n  @Input() zAxisUp = false;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    // console.log('AbstractCamera.constructor');\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    // console.log('AbstractCamera.ngAfterViewInit');\r\n    this.createCamera();\r\n\r\n    this.applyZAxisUp();\r\n    this.applyPosition();\r\n\r\n    // TODO: Directive?\r\n    this.rendererService.setCamera(this);\r\n  }\r\n\r\n  protected abstract createCamera(): void;\r\n\r\n  public abstract updateAspectRatio(aspect: number);\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    let mustRerender = false;\r\n\r\n    if (['positionX', 'positionY', 'positionZ'].some(propName => propName in changes)) {\r\n      this.applyPosition();\r\n      mustRerender = true;\r\n    }\r\n\r\n    if (mustRerender) {\r\n      this.rendererService.render();\r\n    }\r\n\r\n  }\r\n\r\n  protected applyPosition() {\r\n    if (this.camera) {\r\n      this.camera.position.set(\r\n        this.positionX || 0,\r\n        this.positionY || 0,\r\n        this.positionZ || 0,\r\n      );\r\n    }\r\n  }\r\n\r\n  protected applyZAxisUp() {\r\n    if (this.camera && this.zAxisUp) {\r\n      // Z axis up (similarly to 3D Creation Software: Blender, 3DS Max)\r\n      this.camera.up.set(0, 0, 1);\r\n    }\r\n  }\r\n\r\n}\r\n","import {Injectable, OnDestroy} from '@angular/core';\r\nimport {SceneComponent} from '../object/scene.component';\r\nimport {AbstractCamera} from '../camera/abstract-camera';\r\nimport * as THREE from 'three';\r\nimport {CSS3DRenderer} from 'three/examples/jsm/renderers/CSS3DRenderer';\r\n\r\n/* TODO: Refactor to pair\r\ninterface RendererPair {\r\n  scene: SceneComponent;\r\n  camera: AbstractCamera<any>;\r\n  webGlRenderer: THREE.Renderer;\r\n  layers: Array<number>;\r\n}\r\n*/\r\n\r\n@Injectable()\r\nexport class RendererService implements OnDestroy {\r\n  private init = false;\r\n\r\n  private scene: SceneComponent;\r\n  private camera: AbstractCamera<any>;\r\n  private webGlRenderer: THREE.WebGLRenderer;\r\n  // TODO:\r\n  private css3dRenderer: CSS3DRenderer;\r\n\r\n  private aspect: number;\r\n\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n\r\n  }\r\n\r\n\r\n  public setScene(scene: SceneComponent) {\r\n    this.scene = scene;\r\n  }\r\n\r\n  public setCamera(camera: AbstractCamera<any>) {\r\n    this.camera = camera;\r\n    this.camera.updateAspectRatio(this.aspect);\r\n  }\r\n\r\n  public render() {\r\n    if (this.init && this.scene && this.camera) {\r\n      //  console.log('render');\r\n      this.webGlRenderer.render(this.scene.getObject(), this.camera.camera);\r\n      this.css3dRenderer.render(this.scene.getObject(), this.camera.camera);\r\n    }\r\n  }\r\n\r\n  public initialize(canvas: HTMLCanvasElement) {\r\n    // console.log('RendererComponent.initialize');\r\n\r\n    // TODO: Multiple renderers\r\n    this.webGlRenderer = new THREE.WebGLRenderer({\r\n      canvas: canvas,\r\n      antialias: true,\r\n      alpha: true\r\n    });\r\n    this.webGlRenderer.setPixelRatio(devicePixelRatio);\r\n    this.webGlRenderer.setSize(canvas.clientWidth, canvas.clientHeight, false);\r\n\r\n    // TODO: props\r\n    this.webGlRenderer.shadowMap.enabled = false;\r\n    this.webGlRenderer.shadowMap.autoUpdate = false;\r\n    this.webGlRenderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n    this.webGlRenderer.setClearColor(0x000000, 0);\r\n    this.webGlRenderer.autoClear = true;\r\n    canvas.style.zIndex = '2';\r\n\r\n    // ------------------------------ START\r\n    this.css3dRenderer = new CSS3DRenderer();\r\n    this.css3dRenderer.setSize(window.innerWidth, window.innerHeight);\r\n    this.css3dRenderer.domElement.style.position = 'absolute';\r\n    this.css3dRenderer.domElement.style.top = '0';\r\n    this.css3dRenderer.domElement.style.zIndex = '1';\r\n    canvas.parentElement.appendChild(this.css3dRenderer.domElement);\r\n\r\n    // ------------------------------ END\r\n\r\n    this.updateChildCamerasAspectRatio(canvas);\r\n    this.init = true;\r\n    this.render();\r\n  }\r\n\r\n\r\n  public resize(canvas: HTMLCanvasElement, size: string) {\r\n    canvas.style.width = size;\r\n    canvas.style.height = size;\r\n    const width = canvas.clientWidth;\r\n    const height = canvas.clientHeight;\r\n\r\n    this.webGlRenderer.setSize(width, height, true);\r\n    this.css3dRenderer.setSize(width, height);\r\n    this.updateChildCamerasAspectRatio(canvas);\r\n    this.render();\r\n  }\r\n\r\n  private calculateAspectRatio(canvas: HTMLCanvasElement) {\r\n    const height = canvas.clientHeight;\r\n    if (height === 0) {\r\n      return 0;\r\n    }\r\n    this.aspect = canvas.clientWidth / canvas.clientHeight;\r\n  }\r\n\r\n  private updateChildCamerasAspectRatio(canvas: HTMLCanvasElement) {\r\n    this.calculateAspectRatio(canvas);\r\n    if (this.camera) {\r\n      this.camera.updateAspectRatio(this.aspect);\r\n    }\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport {AbstractCamera} from './abstract-camera';\r\nimport * as THREE from 'three';\r\nimport {RendererService} from '../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-perspective-camera',\r\n  providers: [{provide: AbstractCamera, useExisting: forwardRef(() => PerspectiveCameraComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class PerspectiveCameraComponent extends AbstractCamera<THREE.PerspectiveCamera> {\r\n\r\n  @Input() fov: number;\r\n  @Input() near: number;\r\n  @Input() far: number;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected createCamera(): void {\r\n    // console.log('PerspectiveCameraComponent.createCamera');\r\n    // let aspectRatio = undefined; // Updated later\r\n    this.camera = new THREE.PerspectiveCamera(\r\n      this.fov,\r\n      undefined,\r\n      this.near,\r\n      this.far\r\n    );\r\n  }\r\n\r\n  public updateAspectRatio(aspect: number) {\r\n    // console.log('PerspectiveCameraComponent.updateAspectRatio: ' + aspect);\r\n    this.camera.aspect = aspect;\r\n    this.camera.updateProjectionMatrix();\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PerspectiveCameraComponent} from './perspective-camera.component';\n\n\n@NgModule({\n  declarations: [\n    PerspectiveCameraComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    PerspectiveCameraComponent\n  ]\n})\nexport class AtftCameraModule {\n}\n","import {\r\n  AfterViewInit,\r\n  ContentChildren,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Output,\r\n  QueryList,\r\n  SimpleChanges,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {RendererService} from '../renderer/renderer.service';\r\n\r\nexport abstract class AbstractObject3D<T extends THREE.Object3D> implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n  @ContentChildren(AbstractObject3D, {descendants: false}) childNodes: QueryList<AbstractObject3D<THREE.Object3D>>;\r\n\r\n  @ViewChildren(AbstractObject3D) viewChilds: QueryList<AbstractObject3D<THREE.Object3D>>;\r\n\r\n  /**\r\n   * Rotation in Euler angles (radians) with order X, Y, Z.\r\n   */\r\n  @Input() rotateX: number;\r\n  @Input() rotateY: number;\r\n  @Input() rotateZ: number;\r\n\r\n  /**\r\n   * Translate the geometry. This is typically done as a one time operation, and not during a loop.\r\n   */\r\n  @Input() translateX: number;\r\n  @Input() translateY: number;\r\n  @Input() translateZ: number;\r\n\r\n  @Input() name: string;\r\n\r\n  @Output() changed = new EventEmitter<void>();\r\n\r\n  private object: T;\r\n\r\n  constructor(protected rendererService: RendererService) {\r\n    // console.log('AbstractObject3D.constructor');\r\n    this.changed.subscribe(() => {\r\n      this.rendererService.render();\r\n    });\r\n\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.object) {\r\n      return;\r\n    }\r\n\r\n    let modified = false;\r\n\r\n    if (['rotateX', 'rotateY', 'rotateZ'].some(propName => propName in changes)) {\r\n      this.applyRotation();\r\n      modified = true;\r\n    }\r\n    if (['translateX', 'translateY', 'translateZ'].some(propName => propName in changes)) {\r\n      this.applyTranslation();\r\n      modified = true;\r\n    }\r\n\r\n    if (modified) {\r\n      this.changed.emit();\r\n    }\r\n\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    // console.log('AbstractObject3D.OnDestroy');\r\n    if (this.object && this.object.parent) {\r\n      this.object.parent.remove(this.object);\r\n    }\r\n  }\r\n\r\n  public ngAfterViewInit() {\r\n    // console.log('AbstractObject3D.ngAfterViewInit ' + this.name);\r\n    this.object = this.newObject3DInstance();\r\n\r\n    this.applyTranslation();\r\n    this.applyRotation();\r\n\r\n    this.collectChilds();\r\n\r\n    this.afterInit();\r\n  }\r\n\r\n  public collectChilds() {\r\n    // console.log('Collect childs for', this.name);\r\n    if (this.childNodes !== undefined && this.childNodes.length > 1) {\r\n      this.childNodes.filter(i => i !== this && i.getObject() !== undefined).forEach(i => {\r\n        // console.log('Add childNodes for', this.name, i);\r\n        this.addChild(i.getObject());\r\n      });\r\n    } else {\r\n      // console.log(\"No child Object3D for: \" + this.constructor.label);\r\n    }\r\n\r\n\r\n    if (this.viewChilds !== undefined && this.viewChilds.length > 0) {\r\n      this.viewChilds.filter(\r\n        i => i !== this\r\n          && i.getObject() !== undefined\r\n          && !i.getObject().parent /* direct childs only */\r\n      ).forEach(i => {\r\n        // console.log('Add viewChilds for', this.name, i);\r\n        this.addChild(i.getObject());\r\n      });\r\n    } else {\r\n      // console.log(\"No child Object3D for: \" + this.constructor.label);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  private applyRotation(): void {\r\n    this.object.rotation.set(\r\n      this.rotateX || 0,\r\n      this.rotateY || 0,\r\n      this.rotateZ || 0,\r\n      'XYZ'\r\n    );\r\n  }\r\n\r\n  private applyTranslation(): void {\r\n    this.object.position.set(\r\n      this.translateX || 0,\r\n      this.translateY || 0,\r\n      this.translateZ || 0\r\n    );\r\n  }\r\n\r\n  public addChild(object: THREE.Object3D): void {\r\n    this.object.add(object);\r\n  }\r\n\r\n  protected removeChild(object: THREE.Object3D): void {\r\n    this.object.remove(object);\r\n  }\r\n\r\n  public getObject(): T {\r\n    return this.object;\r\n  }\r\n\r\n  protected afterInit() {\r\n    // this.changed.emit();\r\n  }\r\n\r\n  protected abstract newObject3DInstance(): T;\r\n\r\n\r\n}\r\n","import {Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\n\r\nexport abstract class AbstractConnector<T extends THREE.Object3D> extends AbstractObject3D<T> {\r\n\r\n  @Input()\r\n  source: AbstractObject3D<THREE.Object3D>;\r\n\r\n  @Input()\r\n  target: AbstractObject3D<THREE.Object3D>;\r\n\r\n  protected newObject3DInstance(): T {\r\n    const mesh = this.createConnectorObject();\r\n    this.watchObjects();\r\n    return mesh;\r\n  }\r\n\r\n  private watchObjects() {\r\n    this.source.changed.subscribe(item => {\r\n      this.updateLineGeometry();\r\n    });\r\n\r\n    this.target.changed.subscribe(item => {\r\n      this.updateLineGeometry();\r\n    });\r\n  }\r\n\r\n  protected getLineGeometry(): THREE.Geometry {\r\n    const geo = new THREE.Geometry();\r\n    if (!this.source || !this.target) {\r\n      throw new Error('AbstractConnector: source or target inputs are missing!');\r\n    }\r\n    geo.vertices.push(this.source.getObject().position);\r\n    geo.vertices.push(this.target.getObject().position);\r\n    return geo;\r\n  }\r\n\r\n\r\n  /**\r\n   * Create line mesh\r\n   */\r\n  abstract createConnectorObject(): T;\r\n\r\n  /**\r\n   * If at least one line end (source or target object)  changed, then line geoetry should be updated as well\r\n   * // TODO: Calculate only when source/target positions were changed\r\n   */\r\n  abstract updateLineGeometry(): void;\r\n\r\n}\r\n","/**\r\n * Fix color number binding issues\r\n * @param color Color number from binding input\r\n * @param defaultColor default value in case of binding issues\r\n */\r\nexport function appliedColor(color: number, defaultColor?: number): number {\r\n  let resultColor = (defaultColor ? defaultColor : 0xffffff);\r\n  if (color !== undefined  ) {\r\n    resultColor = color * 1;\r\n  }\r\n  return resultColor;\r\n}\r\n","import {EventEmitter, Injectable, Optional, SkipSelf} from '@angular/core';\r\nimport {RendererService} from '../renderer/renderer.service';\r\n\r\n\r\n/**\r\n * Animation service emits animate event, which should be used by animated components for animation logic.\r\n * NOTE: this service is for the performance optimization: requestAnimationFrame and render is called once.\r\n */\r\n@Injectable()\r\nexport class AnimationService {\r\n\r\n  /**\r\n   * Subscribe for animation frame creation (change position and etc.)\r\n   * Avoid render() execution, it's called only once when all components updated animation frame.\r\n   */\r\n  readonly animate = new EventEmitter<void>();\r\n\r\n  private enabled = false;\r\n\r\n  constructor(\r\n    private rendererService: RendererService\r\n  ) {\r\n    this.animationStep = this.animationStep.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Start the animation loop.\r\n   */\r\n  public start() {\r\n    if (!this.enabled) {\r\n      this.enabled = true;\r\n      this.animationStep();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop all animations.\r\n   */\r\n  public stop() {\r\n    if (this.enabled) {\r\n      this.enabled = false;\r\n    }\r\n  }\r\n\r\n  private animationStep() {\r\n    if (this.enabled) {\r\n      requestAnimationFrame(this.animationStep);\r\n      if (this.animate.observers.length > 0) {\r\n        this.animate.emit();\r\n        /**\r\n         * When all components updated animation, render event is emitted.\r\n         * Main renderer subscribed to this event emitter.\r\n         */\r\n        this.rendererService.render();\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {MeshLine, MeshLineMaterial} from 'three.meshline';\r\nimport {AbstractConnector} from './abstract-connector';\r\nimport {appliedColor} from '../../util/applied-color';\r\nimport {AnimationService} from '../../animation/animation.service';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-mesh-line-connector',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => MeshLineConnectorComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class MeshLineConnectorComponent extends AbstractConnector<THREE.Mesh> {\r\n\r\n  @Input()\r\n  materialColor = 0xffff00;\r\n\r\n  @Input()\r\n  transparent = true;\r\n\r\n  @Input()\r\n  opacity = 0.5;\r\n\r\n  @Input()\r\n  lineWidth = 0.5;\r\n\r\n  @Input()\r\n  depthWrite = true;\r\n\r\n  @Input()\r\n  depthTest = true;\r\n\r\n  @Input()\r\n  animated = false;\r\n\r\n  @Input() animationIncrement = 0.002;\r\n\r\n  private geometry: THREE.Geometry;\r\n  private line: MeshLine;\r\n  private lineMaterial: MeshLineMaterial;\r\n\r\n\r\n  constructor(\r\n    protected animationService: AnimationService,\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  createConnectorObject(): THREE.Mesh {\r\n    this.geometry = this.getLineGeometry();\r\n\r\n    this.line = new MeshLine();\r\n    this.line.setGeometry(this.geometry);\r\n\r\n    this.lineMaterial = (this.animated ?\r\n        new MeshLineMaterial({\r\n          color: appliedColor(this.materialColor),\r\n          transparent: this.transparent,\r\n          opacity: this.opacity,\r\n          lineWidth: this.lineWidth,\r\n          depthWrite: this.depthWrite,\r\n          depthTest: this.depthTest,\r\n          side: THREE.DoubleSide,\r\n          blending: THREE.NormalBlending,\r\n          // TODO: props\r\n          dashArray: 0.05,\r\n          dashOffset: 0.1,\r\n          dashRatio: 0.1\r\n        })\r\n        : new MeshLineMaterial({\r\n          color: appliedColor(this.materialColor),\r\n          transparent: this.transparent,\r\n          opacity: this.opacity,\r\n          lineWidth: this.lineWidth,\r\n          depthWrite: this.depthWrite,\r\n          depthTest: this.depthTest,\r\n          side: THREE.DoubleSide,\r\n          blending: THREE.NormalBlending\r\n        })\r\n    );\r\n\r\n    const mesh = new THREE.Mesh(this.line.geometry, this.lineMaterial);\r\n    if (this.animated) {\r\n      this.animate = this.animate.bind(this);\r\n      this.animationService.animate.subscribe(this.animate);\r\n    }\r\n    return mesh;\r\n  }\r\n\r\n  private animate() {\r\n    this.lineMaterial.uniforms.dashOffset.value += this.animationIncrement;\r\n  }\r\n\r\n  updateLineGeometry(): void {\r\n    // https://github.com/spite/THREE.MeshLine/issues/51#issuecomment-379579926\r\n    this.line.setGeometry(this.geometry);\r\n    this.rendererService.render();\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {AbstractConnector} from './abstract-connector';\r\nimport {appliedColor} from '../../util/applied-color';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-line-connector',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => LineConnectorComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class LineConnectorComponent extends AbstractConnector<THREE.Line> {\r\n\r\n  @Input()\r\n  materialColor = 0xffff00;\r\n\r\n  // TODO: move to abstract?\r\n  private geometry: THREE.Geometry;\r\n\r\n  constructor(protected rendererService: RendererService) {\r\n    super(rendererService);\r\n  }\r\n\r\n  public createConnectorObject(): THREE.Line {\r\n    this.geometry = this.getLineGeometry();\r\n\r\n    const material = new THREE.LineBasicMaterial({\r\n      color: appliedColor(this.materialColor),\r\n      /**\r\n       * NOTE: linewidth=1: Due to limitations of the OpenGL Core Profile\r\n       * with the WebGL renderer on most platforms linewidth will always be 1\r\n       * regardless of the set value.\r\n       */\r\n      linewidth: 1\r\n    });\r\n\r\n    const line = new THREE.Line(this.geometry, material);\r\n\r\n    return line;\r\n  }\r\n\r\n  updateLineGeometry(): void {\r\n    this.geometry.verticesNeedUpdate = true;\r\n    this.rendererService.render();\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MeshLineConnectorComponent} from './mesh-line-connector.component';\r\nimport {LineConnectorComponent} from './line-connector.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LineConnectorComponent,\r\n    MeshLineConnectorComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    LineConnectorComponent,\r\n    MeshLineConnectorComponent\r\n  ]\r\n})\r\nexport class AtftConnectorModule {\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-axes-helper',\r\n  providers: [{ provide: AbstractObject3D, useExisting: forwardRef(() => AxesHelperComponent) }],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class AxesHelperComponent extends AbstractObject3D<THREE.AxesHelper> {\r\n\r\n  @Input() size: number;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.AxesHelper {\r\n    // console.log('AxesHelperComponent.newObject3DInstance');\r\n    return new THREE.AxesHelper(this.size);\r\n  }\r\n\r\n\r\n}\r\n","import {AfterViewInit, Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-empty',\r\n  providers: [{ provide: AbstractObject3D, useExisting: forwardRef(() => EmptyComponent) }],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class EmptyComponent extends AbstractObject3D<THREE.Object3D> implements AfterViewInit {\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Object3D {\r\n    return new THREE.Object3D();\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-grid-helper',\r\n  providers: [{ provide: AbstractObject3D, useExisting: forwardRef(() => GridHelperComponent) }],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class GridHelperComponent extends AbstractObject3D<THREE.AxesHelper> {\r\n\r\n  @Input() size: number;\r\n  @Input() divisions: number;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.AxesHelper {\r\n    // console.log('GridHelperComponent.newObject3DInstance');\r\n    return new THREE.GridHelper(this.size, this.divisions);\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {AxesHelperComponent} from './axes-helper.component';\r\nimport {EmptyComponent} from './empty.component';\r\nimport {GridHelperComponent} from './grid-helper.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AxesHelperComponent,\r\n    EmptyComponent,\r\n    GridHelperComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    AxesHelperComponent,\r\n    EmptyComponent,\r\n    GridHelperComponent\r\n  ]\r\n})\r\nexport class AtftHelperModule {\r\n}\r\n","import * as THREE from 'three';\r\nimport {appliedColor} from './applied-color';\r\n\r\n\r\n/**\r\n * Creates material\r\n *\r\n * @param materialColor color\r\n * @param materialName material label as string\r\n * @param depthWrite enable depth write\r\n */\r\nexport function appliedMaterial(materialColor: number | THREE.Color, materialName?: string, depthWrite?: boolean): THREE.Material {\r\n\r\n  const props = {\r\n    color: (materialColor instanceof THREE.Color ? materialColor : appliedColor(materialColor)),\r\n    side: THREE.DoubleSide,\r\n    depthWrite: (depthWrite !== undefined ? depthWrite : true)\r\n  };\r\n\r\n  if (materialName === 'lamb') {\r\n    return new THREE.MeshLambertMaterial(props);\r\n  } else if (materialName === 'basic') {\r\n    return new THREE.MeshBasicMaterial(props);\r\n  } else {\r\n    return new THREE.MeshPhongMaterial(props);\r\n  }\r\n\r\n}\r\n\r\n\r\n","import * as THREE from 'three';\r\n\r\nexport function calculateSize(group: THREE.Object3D): THREE.Vector3 {\r\n  const box = new THREE.Box3().setFromObject(group);\r\n  return new THREE.Vector3(\r\n    box.max.x - box.min.x,\r\n    box.max.y - box.min.y,\r\n    box.max.z - box.min.z\r\n  );\r\n}\r\n","import * as THREE from 'three';\r\nimport {calculateSize} from './calculate-size';\r\n\r\nexport function fixCenter(group: THREE.Object3D) {\r\n  const box = calculateSize(group);\r\n  group.translateX(-box.x / 2);\r\n  group.translateY(-box.y / 2);\r\n  group.translateZ(-box.z / 2);\r\n}\r\n","import * as THREE from 'three';\r\nimport {calculateSize} from './calculate-size';\r\n\r\nexport function scaleToFit(group: THREE.Object3D, max: THREE.Vector3) {\r\n  const box = calculateSize(group);\r\n\r\n  const scaleX = max.x / box.x;\r\n  const scaleY = max.y / box.y;\r\n  const scaleZ = max.z / box.z;\r\n\r\n  group.scale.set(\r\n    (scaleX < 1 ? scaleX : 1),\r\n    (scaleY < 1 ? scaleY : 1),\r\n    (scaleZ < 1 ? scaleZ : 1)\r\n  );\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {appliedColor} from '../../util';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-point-light',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => PointLightComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class PointLightComponent extends AbstractObject3D<THREE.PointLight> {\r\n\r\n  @Input() color = 0xffffff;\r\n  @Input() intensity = 1;\r\n  @Input() distance = 500;\r\n  @Input() castShadow = false;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance() {\r\n    const light = new THREE.PointLight(appliedColor(this.color), this.intensity, this.distance);\r\n\r\n    if (this.castShadow === true) {\r\n      light.castShadow = this.castShadow;\r\n      // TODO: props\r\n      light.shadow.mapSize.width = 1024;\r\n      light.shadow.mapSize.height = 1024;\r\n      light.shadow.camera.near = 0.5;\r\n      light.shadow.camera.far = 500;\r\n      light.shadow.bias = -0.001;\r\n      light.shadow.radius = 1;\r\n    }\r\n\r\n    return light;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {appliedColor} from '../../util/applied-color';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-hemisphere-light',\r\n  providers: [{ provide: AbstractObject3D, useExisting: forwardRef(() => HemisphereLightComponent) }],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class HemisphereLightComponent extends AbstractObject3D<THREE.HemisphereLight> {\r\n\r\n  @Input() skyColor = 0xffffff;\r\n  @Input() groundColor = 0x444444;\r\n  @Input() intensity = 1;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance() {\r\n\r\n    const light = new THREE.HemisphereLight(\r\n      appliedColor(this.skyColor),\r\n      appliedColor(this.groundColor),\r\n      appliedColor(this.intensity)\r\n    );\r\n\r\n    return light;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {appliedColor} from '../../util/applied-color';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-directional-light',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => DirectionalLightComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class DirectionalLightComponent extends AbstractObject3D<THREE.DirectionalLight> {\r\n\r\n  @Input() color = 0xffffff;\r\n  @Input() intensity = 1;\r\n  // by default, target is 0,0,0\r\n  @Input() target = new THREE.Object3D();\r\n  @Input() castShadow = true;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance() {\r\n\r\n    const light = new THREE.DirectionalLight(\r\n      appliedColor(this.color),\r\n      this.intensity\r\n    );\r\n\r\n    light.target = this.target;\r\n\r\n    if (this.castShadow === true) {\r\n      light.castShadow = this.castShadow;\r\n      // TODO: props\r\n      light.shadow.camera.top = 100;\r\n      light.shadow.camera.bottom = -100;\r\n      light.shadow.camera.left = -100;\r\n      light.shadow.camera.right = 100;\r\n      light.shadow.camera.near = 0.1;\r\n      light.shadow.camera.far = 500;\r\n      light.shadow.mapSize.set(1024, 1024);\r\n      light.shadow.bias = -0.001;\r\n\r\n    }\r\n    return light;\r\n\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {PointLightComponent} from './point-light.component';\r\nimport {HemisphereLightComponent} from './hemisphere-light.component';\r\nimport {DirectionalLightComponent} from './directional-light.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DirectionalLightComponent,\r\n    HemisphereLightComponent,\r\n    PointLightComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    DirectionalLightComponent,\r\n    HemisphereLightComponent,\r\n    PointLightComponent\r\n  ]\r\n})\r\nexport class AtftLightModule {\r\n}\r\n","import {OnDestroy} from '@angular/core';\r\n\r\nimport {AbstractObject3D} from './abstract-object-3d';\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport abstract class AbstractLazyObject3D extends AbstractObject3D<THREE.Object3D> implements OnDestroy {\r\n\r\n  /**\r\n   * Flag to signal whether the parent class instance AbstractObject3D called the\r\n   * overwritten method {@link AbstractModelLoader#afterInit} yet.\r\n   *\r\n   * Unless that method was called, no methods and properties of {@link AbstractObject3D}\r\n   * may be safely accessed, especially {@link AbstractObject3D#addChild} and\r\n   * {@link AbstractObject3D.renderer}.\r\n   */\r\n  private parentInitialized = false;\r\n\r\n  /**\r\n   * This is reference to lazy loaded Object3D (async after init)\r\n   */\r\n  protected lazyObject: THREE.Object3D | undefined;\r\n\r\n  /**\r\n   * Abstract method for lazy loading\r\n   *\r\n   */\r\n  protected abstract async loadLazyObject(): Promise<THREE.Object3D>;\r\n\r\n  protected afterInit() {\r\n    super.afterInit();\r\n    this.parentInitialized = true;\r\n    this.startLoading();\r\n  }\r\n\r\n  protected startLoading() {\r\n    // console.log('AbstractLazyObject3D.startLoading');\r\n    // Trigger model acquisition now that the parent has been initialized.\r\n    this.loadLazyObject().then(obj => {\r\n      // console.log('AbstractLazyObject3D loaded');\r\n      // remove old if exists\r\n      if (this.lazyObject) {\r\n        super.removeChild(this.lazyObject);\r\n      }\r\n\r\n      // add lazy object to scene\r\n      this.lazyObject = obj;\r\n      super.addChild(obj);\r\n\r\n      this.rendererService.render();\r\n    }).catch(err => {\r\n      console.error(err);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.lazyObject) {\r\n      super.removeChild(this.lazyObject);\r\n    }\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Object3D {\r\n    // Just empty object (holder of lazy object)\r\n    return new THREE.Object3D();\r\n  }\r\n\r\n}\r\n","import {Input} from '@angular/core';\r\nimport {AbstractLazyObject3D} from '../abstract-lazy-object-3d';\r\n\r\n/**\r\n * Helper parent class for model loader.\r\n *\r\n * @see ObjLoaderComponent\r\n */\r\nexport abstract class AbstractModelLoader extends AbstractLazyObject3D {\r\n\r\n  protected _model: string;\r\n\r\n  /**\r\n   * The model data source (usually a URI).\r\n   * Settings this property only hides the previous model upon successful\r\n   * loading of the new one. This especially means that if the new data source\r\n   * is invalid, the old model will *not* be removed from the scene.\r\n   */\r\n  @Input()\r\n  public set model(newModelUrl: string) {\r\n    if (this._model !== newModelUrl) {\r\n      this._model = newModelUrl;\r\n      super.startLoading();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The current model data source (usually a URI).\r\n   */\r\n  public get model() {\r\n    return this._model;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef} from '@angular/core';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {AbstractModelLoader} from './abstract-model-loader';\r\n\r\nimport * as THREE from 'three';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-object-loader',\r\n  providers: [{ provide: AbstractObject3D, useExisting: forwardRef(() => ObjectLoaderComponent) }],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class ObjectLoaderComponent extends AbstractModelLoader {\r\n  private loader = new THREE.ObjectLoader();\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected async loadLazyObject() {\r\n    // console.log('ObjectLoaderComponent.loadLazyObject');\r\n    return new Promise<THREE.Object3D>((resolve, reject) => {\r\n      this.loader.load(this.model, model => {\r\n          // BUG #95: it seems that some textures loaded after last render (and model has black texture instead)\r\n          resolve(model);\r\n        },\r\n        undefined,\r\n        reject\r\n      );\r\n    });\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {AbstractModelLoader} from './abstract-model-loader';\r\nimport {OBJLoader} from 'three/examples/jsm/loaders/OBJLoader';\r\nimport {MTLLoader} from 'three/examples/jsm/loaders/MTLLoader';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n/**\r\n * Component for employing THREE.OBJLoader to load [Wavefront *.obj files][1].\r\n *\r\n * [1]: https://en.wikipedia.org/wiki/Wavefront_.obj_file\r\n */\r\n@Component({\r\n  selector: 'atft-obj-loader',\r\n  providers: [{ provide: AbstractObject3D, useExisting: forwardRef(() => ObjLoaderComponent) }],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class ObjLoaderComponent extends AbstractModelLoader {\r\n\r\n  private loader = new OBJLoader();\r\n  private mtlLoader = new MTLLoader();\r\n\r\n  @Input()\r\n  material: string;\r\n\r\n  /**\r\n   * Path relative to which resources and textures within the loaded obj file are loaded.\r\n   * @deprecated Rather use resourcePath\r\n   */\r\n  @Input()\r\n  public set texturePath(newTexturePath: string) {\r\n    this.resourcePath = newTexturePath;\r\n  }\r\n\r\n  /**\r\n   * Path relative to which resources and textures within the loaded obj file are loaded.\r\n   */\r\n  @Input()\r\n  resourcePath: string;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected async loadLazyObject() {\r\n    // Preloading step for the material\r\n    const preloadingStep = new Promise<void>((resolve, reject) => {\r\n      if (this.material === undefined) {\r\n        // No preloading necessary\r\n        resolve();\r\n      } else {\r\n        // TODO: If typings of mtlLoader are included in the Three.js NPM\r\n        // package, remove this 'any' cast.\r\n        (this.mtlLoader as any).setResourcePath(this.resourcePath);\r\n\r\n        this.mtlLoader.load(this.material, materialCreator => {\r\n          materialCreator.preload();\r\n          this.loader.setMaterials(materialCreator);\r\n          resolve();\r\n        }, undefined, reject);\r\n      }\r\n    });\r\n\r\n    // Await preloading and load final model\r\n    return preloadingStep.then(() => {\r\n      return new Promise<THREE.Object3D>((resolve, reject) => {\r\n        this.loader.load(this.model, model => {\r\n          resolve(model);\r\n        }, undefined, reject);\r\n      });\r\n    });\r\n  }\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {AbstractModelLoader} from './abstract-model-loader';\r\nimport {SVGLoader} from 'three/examples/jsm/loaders/SVGLoader';\r\n\r\nimport * as THREE from 'three';\r\nimport {appliedColor, appliedMaterial} from '../../util';\r\nimport {fixCenter} from '../../util/fix-center';\r\nimport {scaleToFit} from '../../util/scale-to-fit';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-svg-loader',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => SVGLoaderComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class SVGLoaderComponent extends AbstractModelLoader {\r\n\r\n  @Input()\r\n  get overrideMaterialColor(): number {\r\n    return this._overrideMaterialColor;\r\n  }\r\n\r\n  set overrideMaterialColor(value: number) {\r\n    this._overrideMaterialColor = value;\r\n    this.startLoading();\r\n  }\r\n\r\n  private _overrideMaterialColor: number = undefined;\r\n\r\n\r\n  @Input()\r\n  material = 'basic';\r\n\r\n  @Input()\r\n  depthWrite = true;\r\n\r\n  @Input()\r\n  maxX: number;\r\n\r\n  @Input()\r\n  maxY: number;\r\n\r\n  @Input()\r\n  centered = true;\r\n\r\n  private loader = new SVGLoader();\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected async loadLazyObject() {\r\n    // console.log('ObjectLoaderComponent.loadLazyObject');\r\n    return new Promise<THREE.Object3D>((resolve, reject) => {\r\n      this.loader.load(this.model, data => {\r\n          const paths = data.paths;\r\n          const group = new THREE.Group();\r\n\r\n          for (let i = 0; i < paths.length; i++) {\r\n            // NOTE: It seems that ShapePath does not includes typed color, cast to any as workaround\r\n            const path: any = paths[i];\r\n            const color = (this._overrideMaterialColor ? appliedColor(this._overrideMaterialColor) : path.color);\r\n            const material = appliedMaterial(color, this.material, this.depthWrite);\r\n            const shapes = path.toShapes(true, {});\r\n\r\n            for (let j = 0; j < shapes.length; j++) {\r\n              const shape = shapes[j];\r\n              const geometry = new THREE.ShapeBufferGeometry(shape);\r\n              const mesh = new THREE.Mesh(geometry, material);\r\n              group.add(mesh);\r\n            }\r\n          }\r\n\r\n          if (this.maxX || this.maxY) {\r\n            scaleToFit(group, new THREE.Vector3(this.maxX, this.maxY, 0));\r\n          }\r\n          if (this.centered) {\r\n            fixCenter(group);\r\n          }\r\n\r\n          resolve(group);\r\n        },\r\n        undefined,\r\n        reject);\r\n    });\r\n  }\r\n\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ObjectLoaderComponent} from './object-loader.component';\r\nimport {ObjLoaderComponent} from './obj-loader.component';\r\nimport {SVGLoaderComponent} from './svg-loader.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ObjLoaderComponent,\r\n    ObjectLoaderComponent,\r\n    SVGLoaderComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    ObjLoaderComponent,\r\n    ObjectLoaderComponent,\r\n    SVGLoaderComponent\r\n  ]\r\n})\r\nexport class AtftLoaderModule {\r\n}\r\n","import {Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {appliedMaterial} from '../../util';\r\n\r\nexport abstract class AbstractMesh extends AbstractObject3D<THREE.Mesh> implements OnChanges {\r\n\r\n  @Input()\r\n  material: string;\r\n\r\n  @Input()\r\n  materialColor = 0x5DADE2;\r\n\r\n  @Input()\r\n  castShadow = true;\r\n\r\n  @Input()\r\n  receiveShadow = true;\r\n\r\n  @Input()\r\n  depthWrite = true;\r\n\r\n  protected getMaterial(): THREE.Material {\r\n    return appliedMaterial(this.materialColor, this.material, this.depthWrite);\r\n  }\r\n\r\n  protected applyShadowProps(mesh: THREE.Mesh) {\r\n    mesh.castShadow = this.castShadow;\r\n    mesh.receiveShadow = this.receiveShadow;\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    super.ngOnChanges(changes);\r\n    if (!this.getObject()) {\r\n      return;\r\n    }\r\n\r\n    let mustRerender = false;\r\n    if (['material', 'materialColor', 'depthWrite'].some(propName => propName in changes)) {\r\n      this.applyMaterial();\r\n      mustRerender = true;\r\n    }\r\n\r\n    if (mustRerender) {\r\n      this.rendererService.render();\r\n    }\r\n  }\r\n\r\n  public applyMaterial() {\r\n    this.getObject().material = this.getMaterial();\r\n  }\r\n\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractMesh} from './abstract-mesh-3d';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-box-mesh',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => BoxMeshComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class BoxMeshComponent extends AbstractMesh {\r\n\r\n  /**\r\n   * Width; that is, the length of the edges parallel to the X axis. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  width = 1.0;\r\n\r\n  /**\r\n   * Height; that is, the length of the edges parallel to the Y axis. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  height = 1.0;\r\n\r\n  /**\r\n   * Depth; that is, the length of the edges parallel to the Z axis. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  depth = 1.0;\r\n\r\n  /**\r\n   * Number of segmented rectangular faces along the width of the sides. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  widthSegments = 1;\r\n\r\n  /**\r\n   * Number of segmented rectangular faces along the height of the sides. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  heightSegments = 1;\r\n\r\n  /**\r\n   * Number of segmented rectangular faces along the depth of the sides. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  depthSegments = 1;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance() {\r\n    // console.log('BoxMeshComponent.newObject3DInstance');\r\n    const geometry = new THREE.BoxGeometry(this.width, this.height, this.depth,\r\n      this.widthSegments, this.heightSegments, this.depthSegments);\r\n    const material = this.getMaterial();\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    this.applyShadowProps(mesh);\r\n    return mesh;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractMesh} from './abstract-mesh-3d';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-cylinder-mesh',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => CylinderMeshComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class CylinderMeshComponent extends AbstractMesh {\r\n\r\n  @Input()\r\n  radiusTop = 1.0;\r\n  @Input()\r\n  radiusBottom = 1.0;\r\n  @Input()\r\n  height = 1.0;\r\n  @Input()\r\n  radialSegments = 8;\r\n  @Input()\r\n  heightSegments = 1;\r\n  @Input()\r\n  openEnded = false;\r\n  @Input()\r\n  thetaStart = 0.0;\r\n  @Input()\r\n  thetaLength = 2 * Math.PI;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n    // console.log('CylinderMeshComponent.constructor');\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Mesh {\r\n    // console.log('CylinderMeshComponent.newObject3DInstance');\r\n    const geometry = new THREE.CylinderGeometry(this.radiusTop, this.radiusBottom, this.height, this.radialSegments, this.heightSegments,\r\n      this.openEnded, this.thetaStart, this.thetaLength);\r\n    const material = this.getMaterial();\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    this.applyShadowProps(mesh);\r\n    return mesh;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractMesh} from './abstract-mesh-3d';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-frame-mesh',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => FrameMeshComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class FrameMeshComponent extends AbstractMesh {\r\n\r\n  @Input()\r\n  thickness = 2;\r\n\r\n  @Input()\r\n  sizeX = 20;\r\n\r\n  @Input()\r\n  sizeY = 20;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Mesh {\r\n\r\n    const halfX = this.sizeX / 2.0;\r\n    const halfY = this.sizeY / 2.0;\r\n    const t = this.thickness;\r\n\r\n    const shape = new THREE.Shape();\r\n\r\n    shape.moveTo(-halfX, halfY);\r\n    shape.lineTo(-halfX - t, halfY + t);\r\n    shape.lineTo(halfX + t, halfY + t);\r\n    shape.lineTo(halfX + t, -halfY - t);\r\n    shape.lineTo(-halfX - t, -halfY - t);\r\n    shape.lineTo(-halfX - t, halfY + t);\r\n\r\n    shape.lineTo(-halfX, halfY);\r\n    shape.lineTo(-halfX, -halfY);\r\n    shape.lineTo(halfX, -halfY);\r\n    shape.lineTo(halfX, halfY);\r\n    shape.lineTo(-halfX, halfY);\r\n\r\n    const geometry = new THREE.ShapeBufferGeometry(shape);\r\n    const material = this.getMaterial();\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n\r\n    this.applyShadowProps(mesh);\r\n    return mesh;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractMesh} from './abstract-mesh-3d';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {appliedColor} from '../../util/applied-color';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-plane-mesh',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => PlaneMeshComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class PlaneMeshComponent extends AbstractMesh {\r\n\r\n  /**\r\n   * Width; that is, the length of the edges parallel to the X axis. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  width = 1.0;\r\n\r\n  /**\r\n   * Height; that is, the length of the edges parallel to the Y axis. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  height = 1.0;\r\n\r\n  /**\r\n   * Number of segmented rectangular faces along the width of the sides. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  widthSegments = 1;\r\n\r\n  /**\r\n   * Number of segmented rectangular faces along the height of the sides. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  heightSegments = 1;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Mesh {\r\n    const geometry = new THREE.PlaneBufferGeometry(this.width, this.height, this.widthSegments, this.heightSegments);\r\n    const material = this.getMaterial();\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    this.applyShadowProps(mesh);\r\n    return mesh;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractMesh} from './abstract-mesh-3d';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-sphere-mesh',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => SphereMeshComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class SphereMeshComponent extends AbstractMesh {\r\n\r\n  @Input() radius: number;\r\n  @Input() widthSegments: number;\r\n  @Input() hightSegments: number;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Mesh {\r\n    // console.log('SphereMeshComponent.newObject3DInstance');\r\n    const geometry = new THREE.SphereGeometry(this.radius, this.widthSegments, this.hightSegments);\r\n    const material = this.getMaterial();\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    this.applyShadowProps(mesh);\r\n    return mesh;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractMesh} from './abstract-mesh-3d';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-torus-mesh',\r\n  providers: [{ provide: AbstractObject3D, useExisting: forwardRef(() => TorusMeshComponent) }],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class TorusMeshComponent extends AbstractMesh {\r\n\r\n  /**\r\n   * Radius of the torus, from the center of the torus to the center of the tube\r\n   */\r\n  @Input() radius = 0.4;\r\n\r\n  /**\r\n   * Radius of the tube.\r\n   */\r\n  @Input()\r\n  tube: number;\r\n\r\n  @Input()\r\n  radialSegments = 8;\r\n\r\n  @Input()\r\n  tubularSegments = 6;\r\n\r\n  @Input()\r\n  arc: number = Math.PI * 2;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Mesh {\r\n    this.radius *= 1;\r\n    this.tube *= 1;\r\n    this.radialSegments *= 1;\r\n    this.tubularSegments *= 1;\r\n\r\n    const geometry = new THREE.TorusGeometry(this.radius, this.tube,\r\n      this.radialSegments, this.tubularSegments);\r\n    const material = this.getMaterial();\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    this.applyShadowProps(mesh);\r\n    return mesh;\r\n  }\r\n\r\n}\r\n","import {Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractMesh} from './abstract-mesh-3d';\r\nimport {calculateSize} from '../../util';\r\nimport {CSS3DObject} from 'three/examples/jsm/renderers/CSS3DRenderer';\r\n\r\nexport abstract class AbstractCss3dMesh extends AbstractMesh {\r\n\r\n  @Input() width = 1.0;\r\n  @Input() height = 1.0;\r\n\r\n  // 1280 / 720 = 1.777777778\r\n  @Input() resolutionX = 1280;\r\n  @Input() resolutionY = 720;\r\n\r\n  private widthSegments = 1;\r\n  private heightSegments = 1;\r\n\r\n  protected newObject3DInstance(): THREE.Mesh {\r\n    const geometry = new THREE.PlaneBufferGeometry(this.width, this.height, this.widthSegments, this.heightSegments);\r\n    const material = this.getMaterial();\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    this.applyShadowProps(mesh);\r\n\r\n    // Create and scale css3d object:\r\n    const meshSize = calculateSize(mesh);\r\n    const css3dObject = this.createCss3dObject();\r\n    this.scaleCss3d(css3dObject, meshSize);\r\n\r\n    // append to mesh:\r\n    mesh.add(css3dObject);\r\n    return mesh;\r\n  }\r\n\r\n\r\n  protected scaleCss3d(group: CSS3DObject, max: THREE.Vector3) {\r\n    const box = new THREE.Vector3(this.resolutionX, this.resolutionY, 0);\r\n\r\n    const scaleX = max.x / box.x;\r\n    const scaleY = max.y / box.y;\r\n    const scaleZ = max.z / box.z;\r\n\r\n    group.scale.set(\r\n      (scaleX < 1 ? scaleX : 1),\r\n      (scaleY < 1 ? scaleY : 1),\r\n      (scaleZ < 1 ? scaleZ : 1)\r\n    );\r\n\r\n  }\r\n\r\n  protected getMaterial(): THREE.Material {\r\n    // TODO: Renderer clear color\r\n    const transparentMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0x000000,\r\n      opacity: 0,\r\n      side: THREE.DoubleSide\r\n    });\r\n    return transparentMaterial;\r\n  }\r\n\r\n  protected abstract createCss3dObject(): CSS3DObject;\r\n\r\n}\r\n","import {AfterViewInit, Component, forwardRef, Input} from '@angular/core';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {CSS3DObject} from 'three/examples/jsm/renderers/CSS3DRenderer';\r\nimport {AbstractCss3dMesh} from './abstract-css3d-mesh';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-css3d-video-mesh',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => Css3dVideoMeshComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class Css3dVideoMeshComponent extends AbstractCss3dMesh implements AfterViewInit {\r\n\r\n  @Input()\r\n  videoSrc;\r\n\r\n  video = document.createElement('video');\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected createCss3dObject(): CSS3DObject {\r\n    // 1. Create DIV\r\n    const div = document.createElement('div');\r\n    div.style.width = this.resolutionX + 'px';\r\n    div.style.height = this.resolutionY + 'px';\r\n    div.style.backgroundColor = '#000000';\r\n    div.id = 'myWrapper';\r\n\r\n    // 2. Create Video Player with source\r\n    this.video.autoplay = false;\r\n    this.video.loop = true;\r\n    this.video.muted = true;\r\n    const source = document.createElement('source');\r\n    source.src = this.videoSrc;\r\n    source.type = 'video/mp4';\r\n    this.video.appendChild(source);\r\n    div.appendChild(this.video);\r\n\r\n    // 3. Create CSS3DObject\r\n    const object = new CSS3DObject(div);\r\n    return object;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    super.ngAfterViewInit();\r\n    this.video.load();\r\n    this.video.addEventListener('canplay', () => {\r\n      console.log('EVENT');\r\n      this.video.play();\r\n    });\r\n\r\n\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {BoxMeshComponent} from './box-mesh.component';\r\nimport {CylinderMeshComponent} from './cylinder-mesh.component';\r\nimport {FrameMeshComponent} from './frame-mesh.component';\r\nimport {PlaneMeshComponent} from './plane-mesh.component';\r\nimport {SphereMeshComponent} from './sphere-mesh.component';\r\nimport {TorusMeshComponent} from './torus-mesh.component';\r\nimport {Css3dVideoMeshComponent} from './css3d-video-mesh.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    BoxMeshComponent,\r\n    CylinderMeshComponent,\r\n    FrameMeshComponent,\r\n    PlaneMeshComponent,\r\n    SphereMeshComponent,\r\n    TorusMeshComponent,\r\n    Css3dVideoMeshComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    BoxMeshComponent,\r\n    CylinderMeshComponent,\r\n    FrameMeshComponent,\r\n    PlaneMeshComponent,\r\n    SphereMeshComponent,\r\n    TorusMeshComponent,\r\n    Css3dVideoMeshComponent\r\n  ]\r\n})\r\nexport class AtftMeshModule {\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {AbstractLazyObject3D} from '../abstract-lazy-object-3d';\r\nimport {appliedMaterial} from '../../util';\r\nimport {fixCenter} from '../../util/fix-center';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-text-mesh',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => TextMeshComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class TextMeshComponent extends AbstractLazyObject3D {\r\n\r\n  @Input()\r\n  material = 'basic';\r\n\r\n\r\n  private _materialColor = 0xDADADA;\r\n  @Input()\r\n  set materialColor(materialColor: number) {\r\n    // console.log('change color', materialColor);\r\n    this._materialColor = materialColor;\r\n    this.startLoading();\r\n  }\r\n  get materialColor() {\r\n    return this._materialColor;\r\n  }\r\n\r\n  private _text = 'Text';\r\n  @Input()\r\n  set text(text: string) {\r\n    this._text = text;\r\n    this.startLoading();\r\n  }\r\n  get text() {\r\n    return this._text;\r\n  }\r\n\r\n\r\n  @Input()\r\n  size = 10;\r\n\r\n  @Input()\r\n  height = 0.3;\r\n\r\n  @Input()\r\n  curveSegments = 2;\r\n\r\n  @Input()\r\n  bevelEnabled = false;\r\n\r\n  @Input()\r\n  bevelThickness = 0.1;\r\n\r\n  @Input()\r\n  bevelSize = 0.1;\r\n\r\n  @Input()\r\n  bevelOffset = 0;\r\n\r\n  @Input()\r\n  bevelSegments = 1;\r\n\r\n  @Input()\r\n  fontUrl = './assets/font/helvetiker_regular.typeface.json';\r\n\r\n  @Input()\r\n  castShadow = true;\r\n\r\n  @Input()\r\n  receiveShadow = true;\r\n\r\n  @Input()\r\n  depthWrite = true;\r\n\r\n  @Input()\r\n  centered = true;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  public getMaterial(): THREE.Material {\r\n    return appliedMaterial(this.materialColor, this.material, this.depthWrite);\r\n  }\r\n\r\n  protected async loadLazyObject(): Promise<THREE.Object3D> {\r\n    // console.log('TextMeshComponent.loadLazyObject');\r\n\r\n    return new Promise<THREE.Object3D>(resolve => {\r\n      const loader = new THREE.FontLoader();\r\n      loader.load(this.fontUrl, font => {\r\n\r\n        const geometry = new THREE.TextGeometry(this.text, {\r\n          font: font,\r\n          size: this.size,\r\n          height: this.height,\r\n          curveSegments: this.curveSegments,\r\n          bevelEnabled: this.bevelEnabled,\r\n          bevelThickness: this.bevelThickness,\r\n          bevelSize: this.bevelSize,\r\n          bevelOffset: this.bevelOffset,\r\n          bevelSegments: this.bevelOffset\r\n        });\r\n        const material = this.getMaterial();\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.castShadow = this.castShadow;\r\n        mesh.receiveShadow = this.receiveShadow;\r\n\r\n        if (this.centered) {\r\n          fixCenter(mesh);\r\n        }\r\n        resolve(mesh);\r\n      });\r\n    });\r\n\r\n\r\n  }\r\n\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {TextMeshComponent} from './text-mesh.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TextMeshComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    TextMeshComponent\r\n  ]\r\n})\r\nexport class AtftTextModule {\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from './abstract-object-3d';\r\nimport {appliedColor} from '../util/applied-color';\r\nimport {RendererService} from '../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-scene',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => SceneComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class SceneComponent extends AbstractObject3D<THREE.Scene> {\r\n\r\n  @Input() background = 0xffffff;\r\n  @Input() fog = false;\r\n  @Input() fogColor = 0xa0a0a0;\r\n  @Input() fogNear = 10;\r\n  @Input() fogFar = 500;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n    // TODO: directive?\r\n    rendererService.setScene(this);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Scene {\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(appliedColor(this.background));\r\n    if (this.fog === true) {\r\n      scene.fog = new THREE.Fog(appliedColor(this.fogColor), this.fogNear, this.fogFar);\r\n    }\r\n    return scene;\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {AtftConnectorModule} from './connector/atft-connector.module';\r\nimport {AtftHelperModule} from './helper/atft-helper.module';\r\nimport {AtftLightModule} from './light/atft-light.module';\r\nimport {AtftLoaderModule} from './loader/atft-loader.module';\r\nimport {AtftMeshModule} from './mesh/atft-mesh.module';\r\nimport {AtftTextModule} from './text/atft-text.module';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SceneComponent} from './scene.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    AtftConnectorModule,\r\n    AtftHelperModule,\r\n    AtftLightModule,\r\n    AtftLoaderModule,\r\n    AtftMeshModule,\r\n    AtftTextModule\r\n  ],\r\n  declarations: [\r\n    SceneComponent\r\n  ],\r\n  exports: [\r\n    SceneComponent,\r\n    CommonModule,\r\n    AtftConnectorModule,\r\n    AtftHelperModule,\r\n    AtftLightModule,\r\n    AtftLoaderModule,\r\n    AtftMeshModule,\r\n    AtftTextModule\r\n  ]\r\n})\r\nexport class AtftObjectModule {\r\n}\r\n","import {Injectable, OnDestroy} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {Intersection} from 'three';\r\nimport {AbstractCamera} from '../camera/abstract-camera';\r\nimport {AbstractObject3D} from '../object/abstract-object-3d';\r\n\r\n@Injectable()\r\nexport class RaycasterService implements OnDestroy {\r\n\r\n  private raycaster = new THREE.Raycaster();\r\n  private selected: THREE.Object3D;\r\n  private enabled = false;\r\n  private camera: AbstractCamera<any>;\r\n  private groups: Array<AbstractObject3D<any>> = [];\r\n  private paused = false;\r\n\r\n\r\n  constructor() {\r\n    this.onMouseMove = this.onMouseMove.bind(this);\r\n    this.onMouseDown = this.onMouseDown.bind(this);\r\n    this.onTouchStart = this.onTouchStart.bind(this);\r\n    this.subscribe();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.disable();\r\n    this.unsubscribe();\r\n  }\r\n\r\n  private subscribe() {\r\n    window.addEventListener('mousemove', this.onMouseMove);\r\n    window.addEventListener('mousedown', this.onMouseDown);\r\n    window.addEventListener('touchstart', this.onTouchStart);\r\n  }\r\n\r\n  private unsubscribe() {\r\n    // console.log('unsubscribe raycaster');\r\n    window.removeEventListener('mousemove', this.onMouseMove);\r\n    window.removeEventListener('mousedown', this.onMouseDown);\r\n    window.removeEventListener('touchstart', this.onTouchStart);\r\n  }\r\n\r\n  public enable() {\r\n    this.enabled = true;\r\n  }\r\n\r\n  public disable() {\r\n    this.enabled = false;\r\n  }\r\n\r\n  public pause() {\r\n    this.paused = true;\r\n  }\r\n\r\n  public resume() {\r\n    this.paused = false;\r\n  }\r\n\r\n\r\n  get isEnabled() {\r\n    return this.enabled;\r\n  }\r\n\r\n  public setCamera(camera: AbstractCamera<any>) {\r\n    // console.log('Add camera to raycaster', camera);\r\n    this.camera = camera;\r\n  }\r\n\r\n  public addGroup(group: AbstractObject3D<any>) {\r\n    // console.log('RaycasterService.addGroup', group.name, group);\r\n    this.groups.push(group);\r\n  }\r\n\r\n  private onMouseMove(event) {\r\n    if (!this.isReady()) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    const i = this.getFirstIntersectedGroup(event.layerX, event.layerY);\r\n    if (!this.selected || this.selected !== i) {\r\n      if (this.selected) {\r\n        this.selected.dispatchEvent({type: 'mouseExit'});\r\n        this.selected = null;\r\n      }\r\n      if (i) {\r\n        this.selected = i;\r\n        // console.log('RaycasterService.mouseEnter', i);\r\n        this.selected.dispatchEvent({type: 'mouseEnter'});\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  private onMouseDown(event) {\r\n    if (!this.isReady(true)) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    const i = this.getFirstIntersectedGroup(event.layerX, event.layerY);\r\n    if (i) {\r\n      i.dispatchEvent({type: 'mouseDown'});\r\n    }\r\n  }\r\n\r\n\r\n  private onTouchStart(event: TouchEvent) {\r\n    // console.log(event);\r\n    if (!this.isReady()) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    const i = this.getFirstIntersectedGroup(event.touches[0].clientX, event.touches[0].clientY);\r\n    if (i) {\r\n      i.dispatchEvent({type: 'mouseDown'});\r\n    }\r\n  }\r\n\r\n  private isReady(ignorePaused?: boolean) {\r\n    return this.enabled\r\n      && (ignorePaused || !this.paused)\r\n      && this.camera\r\n      && this.camera.camera\r\n      && this.groups\r\n      && this.groups.length > 0;\r\n  }\r\n\r\n  private getFirstIntersectedGroup(x, y): THREE.Object3D {\r\n    x = (x / window.innerWidth) * 2 - 1;\r\n    y = -(y / window.innerHeight) * 2 + 1;\r\n    const mouseVector = new THREE.Vector3(x, y, 0.5);\r\n    this.raycaster.setFromCamera(mouseVector, this.camera.camera);\r\n\r\n    // loop across all groups. Try to find the group with nearest distance.\r\n    let nearestIntersection: Intersection;\r\n    let nearestGroup: THREE.Object3D;\r\n    for (let k = 0; k < this.groups.length; k++) {\r\n      const i = this.groups[k].getObject();\r\n      const intersection = this.raycaster.intersectObject(i, true);\r\n      if (intersection.length > 0 && (!nearestIntersection || nearestIntersection.distance > intersection[0].distance)) {\r\n        nearestIntersection = intersection[0];\r\n        nearestGroup = i;\r\n      }\r\n    }\r\n\r\n    // return the group with nearest distance\r\n    if (nearestGroup) {\r\n      return nearestGroup;\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n}\r\n","import {AfterViewInit, Component, ElementRef, HostListener, ViewChild} from '@angular/core';\r\nimport {RendererService} from './renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-renderer-canvas',\r\n  templateUrl: './renderer-canvas.component.html',\r\n  styleUrls: ['./renderer-canvas.component.scss']\r\n})\r\nexport class RendererCanvasComponent implements AfterViewInit {\r\n\r\n  @ViewChild('canvas', {static: true})\r\n  private canvasRef: ElementRef;\r\n\r\n  constructor(\r\n    private rendererService: RendererService\r\n  ) {\r\n    // console.log('RendererComponent.constructor');\r\n    this.onResize = this.onResize.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // console.log('RendererComponent.ngAfterViewInit');\r\n    this.rendererService.initialize(this.canvas);\r\n  }\r\n\r\n  /**\r\n   * The render pane on which the scene is rendered.\r\n   * Currently, only the WebGL renderer with a canvas is used in this\r\n   * implementation, so this property will always be an ElementRef to the\r\n   * underlying <canvas> element.\r\n   *\r\n   * @example This property can be used to restrict the orbit control (i.e. the\r\n   * area which is listened for mouse move and zoom events) to the rendering pane\r\n   */\r\n  public get renderPane(): ElementRef {\r\n    return this.canvasRef;\r\n  }\r\n\r\n  private get canvas(): HTMLCanvasElement {\r\n    return this.canvasRef.nativeElement;\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  public onResize(event: Event) {\r\n    // strange, but single 100% resizing has unexpected behaviour with flex CSS\r\n    // as workaround - resettling to 100 pixels, then to 100%\r\n    this.rendererService.resize(this.canvas, '100px');\r\n    this.rendererService.resize(this.canvas, '100%');\r\n  }\r\n\r\n}\r\n","import {AfterViewInit, ContentChild, ContentChildren, ElementRef, OnChanges, OnDestroy, QueryList, SimpleChanges} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\r\nimport {AbstractCamera} from '../camera/abstract-camera';\r\nimport {RendererService} from '../renderer/renderer.service';\r\nimport {RaycasterService} from '../raycaster/raycaster.service';\r\nimport {RendererCanvasComponent} from '../renderer/renderer-canvas.component';\r\n\r\n\r\nexport abstract class AbstractOrbitControls<T extends OrbitControls> implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n  @ContentChildren(AbstractCamera, {descendants: true}) childCameras: QueryList<AbstractCamera<THREE.Camera>>;\r\n  @ContentChild(RendererCanvasComponent, {static: false}) webGlRenderer: RendererCanvasComponent;\r\n  /**\r\n   * The element on whose native element the orbit control will listen for mouse events.\r\n   *\r\n   * Note that keyboard events are still listened for on the global window object, this is\r\n   * a known issue from Three.js: https://github.com/mrdoob/three.js/pull/10315\r\n   */\r\n  protected listeningControlElement: ElementRef;\r\n\r\n  protected controls: T;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService,\r\n    protected raycasterService: RaycasterService\r\n  ) {\r\n    // console.log('OrbitControlsComponent.constructor');\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // If the THREE.js OrbitControls are not set up yet, we do not need to update\r\n    // anything as they will pick the new values from the @Input properties automatically\r\n    // upon creation.\r\n    if (!this.controls) {\r\n      return;\r\n    }\r\n\r\n    if (changes['listeningControlElement']) {\r\n      // The DOM element the OrbitControls listen on cannot be changed once an\r\n      // OrbitControls object is created. We thus need to recreate it.\r\n      this.controls.dispose();\r\n      this.setUpControls();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.controls) {\r\n      this.controls.dispose();\r\n    }\r\n  }\r\n\r\n  protected abstract setUpControls();\r\n\r\n\r\n  private configureListeners() {\r\n    this.controls.addEventListener('change', () => {\r\n      this.rendererService.render();\r\n    });\r\n\r\n    // don't raycast during rotation/damping/panning\r\n    if (this.raycasterService.isEnabled) {\r\n      this.controls.addEventListener('start', () => {\r\n        this.raycasterService.pause();\r\n      });\r\n      this.controls.addEventListener('end', () => {\r\n        this.raycasterService.resume();\r\n      });\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // console.log('OrbitControlsComponent.ngAfterViewInit');\r\n    if (this.childCameras === undefined || this.childCameras.first === undefined) {\r\n      throw new Error('Camera is not found');\r\n    }\r\n    if (!this.webGlRenderer) {\r\n      throw new Error('webGlRenderer is not found');\r\n    }\r\n    this.listeningControlElement = this.webGlRenderer.renderPane;\r\n    this.setUpControls();\r\n    this.configureListeners();\r\n    this.rendererService.render();\r\n  }\r\n\r\n}\r\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\r\nimport {RendererService} from '../renderer/renderer.service';\r\nimport {RaycasterService} from '../raycaster/raycaster.service';\r\nimport {AbstractOrbitControls} from './abstract-orbit-controls';\r\n\r\n@Component({\r\n  selector: 'atft-orbit-controls',\r\n  template: `\r\n      <ng-content></ng-content>`,\r\n  styleUrls: ['controls.component.scss']\r\n})\r\nexport class OrbitControlsComponent extends AbstractOrbitControls<OrbitControls> implements OnChanges {\r\n\r\n  @Input() rotateSpeed = 1.0;\r\n  @Input() zoomSpeed = 1.2;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService,\r\n    protected raycasterService: RaycasterService\r\n  ) {\r\n    super(rendererService, raycasterService);\r\n  }\r\n\r\n  protected setUpControls() {\r\n    this.controls = new OrbitControls(\r\n      this.childCameras.first.camera,\r\n      this.listeningControlElement && this.listeningControlElement.nativeElement\r\n    );\r\n    this.controls.rotateSpeed = this.rotateSpeed;\r\n    this.controls.zoomSpeed = this.zoomSpeed;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.controls) {\r\n      return;\r\n    }\r\n    super.ngOnChanges(changes);\r\n\r\n    if (changes['rotateSpeed']) {\r\n      this.controls.rotateSpeed = this.rotateSpeed;\r\n    }\r\n    if (changes['zoomSpeed']) {\r\n      this.controls.zoomSpeed = this.zoomSpeed;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport {MapControls, OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\r\nimport {RendererService} from '../renderer/renderer.service';\r\nimport {AnimationService} from '../animation/animation.service';\r\nimport {RaycasterService} from '../raycaster/raycaster.service';\r\nimport {AbstractOrbitControls} from './abstract-orbit-controls';\r\n\r\n@Component({\r\n  selector: 'atft-map-controls',\r\n  template: `\r\n      <ng-content></ng-content>`,\r\n  styleUrls: ['controls.component.scss']\r\n})\r\nexport class MapControlsComponent extends AbstractOrbitControls<OrbitControls> implements OnChanges {\r\n\r\n  @Input() rotateSpeed = 1.0;\r\n\r\n  @Input() zoomSpeed = 1.2;\r\n\r\n  @Input() autoRotate = false;\r\n\r\n  @Input() autoRotateSpeed = 0.5;\r\n\r\n  @Input() enableDamping = false;\r\n\r\n  @Input() dampingFactor = 0.1;\r\n\r\n  @Input() screenSpacePanning = false;\r\n\r\n  @Input() minDistance = 20;\r\n\r\n  @Input() maxDistance = 200;\r\n\r\n  @Input() maxPolarAngle: number = Math.PI / 2 - 0.1;\r\n\r\n  @Input() panSpeed = 1.2;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService,\r\n    protected raycasterService: RaycasterService,\r\n    protected animationService: AnimationService\r\n  ) {\r\n    super(rendererService, raycasterService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.controls) {\r\n      return;\r\n    }\r\n    super.ngOnChanges(changes);\r\n\r\n    if (changes['rotateSpeed']) {\r\n      this.controls.rotateSpeed = this.rotateSpeed;\r\n    }\r\n    if (changes['zoomSpeed']) {\r\n      this.controls.zoomSpeed = this.zoomSpeed;\r\n    }\r\n    // TODO: add others\r\n  }\r\n\r\n  protected setUpControls() {\r\n    this.controls = new MapControls(\r\n      this.childCameras.first.camera,\r\n      this.listeningControlElement && this.listeningControlElement.nativeElement\r\n    );\r\n    this.controls.rotateSpeed = this.rotateSpeed;\r\n    this.controls.zoomSpeed = this.zoomSpeed;\r\n\r\n    this.controls.panSpeed = this.panSpeed;\r\n\r\n    this.controls.autoRotate = this.autoRotate;\r\n    this.controls.autoRotateSpeed = this.autoRotateSpeed;\r\n    this.controls.enableDamping = this.enableDamping; // an animation loop is required when either damping or auto-rotation are enabled\r\n    this.controls.dampingFactor = this.dampingFactor;\r\n\r\n    this.controls.screenSpacePanning = this.screenSpacePanning;\r\n    this.controls.minDistance = this.minDistance;\r\n    this.controls.maxDistance = this.maxDistance;\r\n    this.controls.maxPolarAngle = this.maxPolarAngle;\r\n\r\n    this.controls.update();\r\n\r\n    // Advanced animation:\r\n    if (this.autoRotate || this.enableDamping) {\r\n      this.animationService.animate.subscribe(() => {\r\n        this.controls.update();\r\n      });\r\n      this.controls.addEventListener('change', () => {\r\n        this.rendererService.render();\r\n      });\r\n      this.animationService.start();\r\n    }\r\n\r\n    this.rendererService.render();\r\n  }\r\n\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OrbitControlsComponent} from './orbit-controls.component';\r\nimport {MapControlsComponent} from './map-controls.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    OrbitControlsComponent,\r\n    MapControlsComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    OrbitControlsComponent,\r\n    MapControlsComponent\r\n  ]\r\n})\r\nexport class AtftControlModule {\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'deg2rad'\r\n})\r\nexport class Deg2RadPipe implements PipeTransform {\r\n\r\n  /**\r\n   * Converts degrees to radians\r\n   * @param degree Degrees\r\n   */\r\n  transform(degrees: number): number {\r\n    return (degrees / 180) * Math.PI;\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'rad2deg'\r\n})\r\nexport class Rad2DegPipe implements PipeTransform {\r\n\r\n  /**\r\n   * Converts radians to degrees\r\n   * @param radians Radians\r\n   */\r\n  transform(radians: number): number {\r\n    return radians * (180 / Math.PI);\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {Deg2RadPipe} from './deg2rad.pipe';\r\nimport {Rad2DegPipe} from './rad2deg.pipe';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    Deg2RadPipe,\r\n    Rad2DegPipe\r\n  ],\r\n  exports: [\r\n    Deg2RadPipe,\r\n    Rad2DegPipe\r\n  ]\r\n})\r\nexport class AtftPipeModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {RendererCanvasComponent} from './renderer-canvas.component';\r\nimport {CommonModule} from '@angular/common';\r\nimport {RendererService} from './renderer.service';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    RendererCanvasComponent\r\n  ],\r\n  providers: [\r\n    RendererService\r\n  ],\r\n  exports: [\r\n    RendererCanvasComponent\r\n  ]\r\n})\r\nexport class AtftRendererModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {AnimationService} from './animation.service';\r\n\r\n\r\n@NgModule({\r\n  providers: [\r\n    AnimationService\r\n  ]\r\n})\r\nexport class AtftAnimationModule {\r\n}\r\n","import {AfterViewInit, Directive, EventEmitter, OnDestroy, Output} from '@angular/core';\r\nimport {AbstractObject3D} from '../object/abstract-object-3d';\r\nimport {RaycasterService} from './raycaster.service';\r\n\r\n/**\r\n * Only components marked as atft-raycaster-group emit raycaster events.\r\n * NOTE: All childs are also considered by raycaster (very usefull, for composite components).\r\n */\r\n@Directive({selector: '[atft-raycaster-group]'})\r\nexport class RaycasterGroupDirective implements AfterViewInit, OnDestroy {\r\n\r\n  @Output() mouseEnter = new EventEmitter<void>();\r\n  @Output() mouseExit = new EventEmitter<void>();\r\n  @Output() mouseDown = new EventEmitter<void>();\r\n\r\n  constructor(\r\n    private host: AbstractObject3D<any>,\r\n    private raycasterService: RaycasterService\r\n  ) {\r\n    this.onMouseEnter = this.onMouseEnter.bind(this);\r\n    this.onMouseExit = this.onMouseExit.bind(this);\r\n    this.onMouseDown = this.onMouseDown.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.raycasterService.addGroup(this.host);\r\n    this.subscribeEvents();\r\n  }\r\n\r\n  private subscribeEvents() {\r\n    const obj = this.host.getObject();\r\n    obj.addEventListener('mouseEnter', this.onMouseEnter);\r\n    obj.addEventListener('mouseExit', this.onMouseExit);\r\n    obj.addEventListener('mouseDown', this.onMouseDown);\r\n  }\r\n\r\n  private unSubscribeEvents() {\r\n    const obj = this.host.getObject();\r\n    obj.removeEventListener('mouseEnter', this.onMouseEnter);\r\n    obj.removeEventListener('mouseExit', this.onMouseExit);\r\n    obj.removeEventListener('mouseDown', this.onMouseDown);\r\n  }\r\n\r\n  private onMouseExit() {\r\n    this.mouseExit.emit();\r\n  }\r\n\r\n  private onMouseEnter() {\r\n    this.mouseEnter.emit();\r\n  }\r\n\r\n  private onMouseDown() {\r\n    this.mouseDown.emit();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unSubscribeEvents();\r\n  }\r\n\r\n}\r\n","import {AfterViewInit, Directive} from '@angular/core';\r\nimport {AbstractCamera} from '../camera/abstract-camera';\r\nimport {RaycasterService} from './raycaster.service';\r\n\r\n@Directive({selector: '[atft-raycaster-camera]'})\r\nexport class RaycasterCameraDirective implements AfterViewInit {\r\n\r\n  constructor(\r\n    private host: AbstractCamera<any>,\r\n    private raycasterService: RaycasterService\r\n  ) {\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.raycasterService.setCamera(this.host);\r\n  }\r\n\r\n}\r\n","import {AfterViewInit, Directive} from '@angular/core';\r\nimport {RaycasterService} from './raycaster.service';\r\n\r\n@Directive({selector: '[atft-raycaster-enable]'})\r\nexport class RaycasterEnableDirective implements AfterViewInit {\r\n\r\n  constructor(\r\n    private raycasterService: RaycasterService\r\n  ) {\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.raycasterService.enable();\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {RaycasterGroupDirective} from './raycaster-group.directive';\r\nimport {RaycasterService} from './raycaster.service';\r\nimport {RaycasterCameraDirective} from './raycaster-camera.directive';\r\nimport {RaycasterEnableDirective} from './raycaster-enable.directive';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    RaycasterGroupDirective,\r\n    RaycasterCameraDirective,\r\n    RaycasterEnableDirective\r\n  ],\r\n  providers: [\r\n    RaycasterService\r\n  ],\r\n  exports: [\r\n    RaycasterGroupDirective,\r\n    RaycasterCameraDirective,\r\n    RaycasterEnableDirective\r\n  ]\r\n})\r\nexport class AtftRaycasterModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {AtftCameraModule} from './camera/atft-camera.module';\r\nimport {AtftObjectModule} from './object/atft-object.module';\r\nimport {AtftControlModule} from './control/atft-control.module';\r\nimport {AtftPipeModule} from './pipe/atft-pipe.module';\r\nimport {AtftRendererModule} from './renderer/atft-renderer.module';\r\nimport {AtftAnimationModule} from './animation/atft-animation.module';\r\nimport {AtftRaycasterModule} from './raycaster/atft-raycaster.module';\r\n\r\n// NOTE: In case of \"ERROR in Unexpected value 'undefined' exported by the module 'AtftModule\" fix imports (do not import index.ts)\r\n\r\n@NgModule({\r\n  imports: [\r\n    AtftCameraModule,\r\n    AtftObjectModule,\r\n    AtftControlModule,\r\n    AtftPipeModule,\r\n    AtftRendererModule,\r\n    AtftAnimationModule,\r\n    AtftRaycasterModule\r\n  ],\r\n  exports: [\r\n    AtftCameraModule,\r\n    AtftObjectModule,\r\n    AtftControlModule,\r\n    AtftPipeModule,\r\n    AtftRendererModule,\r\n    AtftAnimationModule,\r\n    AtftRaycasterModule\r\n  ]\r\n})\r\nexport class AtftModule {\r\n}\r\n","import {Injectable} from '@angular/core';\r\n\r\nexport interface StatsResults {\r\n  ms: number;\r\n  count: number;\r\n  callsPerSecond: number;\r\n}\r\n\r\n@Injectable()\r\nexport class StatsService {\r\n\r\n  private lastTime: number;\r\n  private ms = 0;\r\n  private count = 0;\r\n\r\n  start() {\r\n    this.lastTime = Date.now();\r\n  }\r\n\r\n  end() {\r\n    const deltaMs = Date.now() - this.lastTime;\r\n    this.ms += deltaMs;\r\n    this.count++;\r\n  }\r\n\r\n  getStats(): StatsResults {\r\n    return {\r\n      ms: this.ms,\r\n      count: this.count,\r\n      callsPerSecond: Math.round(this.count / (this.ms / 1000))\r\n    };\r\n  }\r\n\r\n  reset() {\r\n    this.ms = 0;\r\n    this.count = 0;\r\n  }\r\n\r\n}\r\n"],"names":["THREE.WebGLRenderer","THREE.PCFSoftShadowMap","tslib_1.__extends","THREE.PerspectiveCamera","THREE.Geometry","THREE.DoubleSide","THREE.NormalBlending","THREE.Mesh","THREE.LineBasicMaterial","THREE.Line","THREE.AxesHelper","THREE.Object3D","THREE.GridHelper","THREE.Color","THREE.MeshLambertMaterial","THREE.MeshBasicMaterial","THREE.MeshPhongMaterial","THREE.Box3","THREE.Vector3","THREE.PointLight","THREE.HemisphereLight","THREE.DirectionalLight","THREE.ObjectLoader","THREE.Group","THREE.ShapeBufferGeometry","THREE.BoxGeometry","THREE.CylinderGeometry","THREE.Shape","THREE.PlaneBufferGeometry","THREE.SphereGeometry","THREE.TorusGeometry","THREE.FontLoader","THREE.TextGeometry","THREE.Scene","THREE.Fog","THREE.Raycaster"],"mappings":"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"}