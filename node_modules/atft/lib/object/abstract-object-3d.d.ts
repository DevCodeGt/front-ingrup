import { AfterViewInit, EventEmitter, OnChanges, OnDestroy, QueryList, SimpleChanges } from '@angular/core';
import * as THREE from 'three';
import { RendererService } from '../renderer/renderer.service';
export declare abstract class AbstractObject3D<T extends THREE.Object3D> implements AfterViewInit, OnChanges, OnDestroy {
    protected rendererService: RendererService;
    childNodes: QueryList<AbstractObject3D<THREE.Object3D>>;
    viewChilds: QueryList<AbstractObject3D<THREE.Object3D>>;
    /**
     * Rotation in Euler angles (radians) with order X, Y, Z.
     */
    rotateX: number;
    rotateY: number;
    rotateZ: number;
    /**
     * Translate the geometry. This is typically done as a one time operation, and not during a loop.
     */
    translateX: number;
    translateY: number;
    translateZ: number;
    name: string;
    changed: EventEmitter<void>;
    private object;
    constructor(rendererService: RendererService);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    collectChilds(): void;
    private applyRotation;
    private applyTranslation;
    addChild(object: THREE.Object3D): void;
    protected removeChild(object: THREE.Object3D): void;
    getObject(): T;
    protected afterInit(): void;
    protected abstract newObject3DInstance(): T;
}
