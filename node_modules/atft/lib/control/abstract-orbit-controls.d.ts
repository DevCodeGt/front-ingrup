import { AfterViewInit, ElementRef, OnChanges, OnDestroy, QueryList, SimpleChanges } from '@angular/core';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { AbstractCamera } from '../camera/abstract-camera';
import { RendererService } from '../renderer/renderer.service';
import { RaycasterService } from '../raycaster/raycaster.service';
import { RendererCanvasComponent } from '../renderer/renderer-canvas.component';
export declare abstract class AbstractOrbitControls<T extends OrbitControls> implements AfterViewInit, OnChanges, OnDestroy {
    protected rendererService: RendererService;
    protected raycasterService: RaycasterService;
    childCameras: QueryList<AbstractCamera<THREE.Camera>>;
    webGlRenderer: RendererCanvasComponent;
    /**
     * The element on whose native element the orbit control will listen for mouse events.
     *
     * Note that keyboard events are still listened for on the global window object, this is
     * a known issue from Three.js: https://github.com/mrdoob/three.js/pull/10315
     */
    protected listeningControlElement: ElementRef;
    protected controls: T;
    constructor(rendererService: RendererService, raycasterService: RaycasterService);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    protected abstract setUpControls(): any;
    private configureListeners;
    ngAfterViewInit(): void;
}
