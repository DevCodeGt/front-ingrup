{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://atft/lib/camera/abstract-camera.ts","ng://atft/lib/renderer/renderer.service.ts","ng://atft/lib/camera/perspective-camera.component.ts","ng://atft/lib/camera/atft-camera.module.ts","ng://atft/lib/object/abstract-object-3d.ts","ng://atft/lib/object/connector/abstract-connector.ts","ng://atft/lib/util/applied-color.ts","ng://atft/lib/animation/animation.service.ts","ng://atft/lib/object/connector/mesh-line-connector.component.ts","ng://atft/lib/object/connector/line-connector.component.ts","ng://atft/lib/object/connector/atft-connector.module.ts","ng://atft/lib/object/helper/axes-helper.component.ts","ng://atft/lib/object/helper/empty.component.ts","ng://atft/lib/object/helper/grid-helper.component.ts","ng://atft/lib/object/helper/atft-helper.module.ts","ng://atft/lib/util/applied-material.ts","ng://atft/lib/util/calculate-size.ts","ng://atft/lib/util/fix-center.ts","ng://atft/lib/util/scale-to-fit.ts","ng://atft/lib/object/light/point-light.component.ts","ng://atft/lib/object/light/hemisphere-light.component.ts","ng://atft/lib/object/light/directional-light.component.ts","ng://atft/lib/object/light/atft-light.module.ts","ng://atft/lib/object/abstract-lazy-object-3d.ts","ng://atft/lib/object/loader/abstract-model-loader.ts","ng://atft/lib/object/loader/object-loader.component.ts","ng://atft/lib/object/loader/obj-loader.component.ts","ng://atft/lib/object/loader/svg-loader.component.ts","ng://atft/lib/object/loader/atft-loader.module.ts","ng://atft/lib/object/mesh/abstract-mesh-3d.ts","ng://atft/lib/object/mesh/box-mesh.component.ts","ng://atft/lib/object/mesh/cylinder-mesh.component.ts","ng://atft/lib/object/mesh/frame-mesh.component.ts","ng://atft/lib/object/mesh/plane-mesh.component.ts","ng://atft/lib/object/mesh/sphere-mesh.component.ts","ng://atft/lib/object/mesh/torus-mesh.component.ts","ng://atft/lib/object/mesh/abstract-css3d-mesh.ts","ng://atft/lib/object/mesh/css3d-video-mesh.component.ts","ng://atft/lib/object/mesh/atft-mesh.module.ts","ng://atft/lib/object/text/text-mesh.component.ts","ng://atft/lib/object/text/atft-text.module.ts","ng://atft/lib/object/scene.component.ts","ng://atft/lib/object/atft-object.module.ts","ng://atft/lib/raycaster/raycaster.service.ts","ng://atft/lib/renderer/renderer-canvas.component.ts","ng://atft/lib/control/abstract-orbit-controls.ts","ng://atft/lib/control/orbit-controls.component.ts","ng://atft/lib/control/map-controls.component.ts","ng://atft/lib/control/atft-control.module.ts","ng://atft/lib/pipe/deg2rad.pipe.ts","ng://atft/lib/pipe/rad2deg.pipe.ts","ng://atft/lib/pipe/atft-pipe.module.ts","ng://atft/lib/renderer/atft-renderer.module.ts","ng://atft/lib/animation/atft-animation.module.ts","ng://atft/lib/raycaster/raycaster-group.directive.ts","ng://atft/lib/raycaster/raycaster-camera.directive.ts","ng://atft/lib/raycaster/raycaster-enable.directive.ts","ng://atft/lib/raycaster/atft-raycaster.module.ts","ng://atft/lib/atft.module.ts","ng://atft/lib/object/helper/stats.service.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","AbstractCamera","rendererService","zAxisUp","ngAfterViewInit","createCamera","applyZAxisUp","applyPosition","setCamera","ngOnChanges","changes","mustRerender","some","propName","render","camera","position","set","positionX","positionY","positionZ","up","Input","RendererService","init","ngOnDestroy","setScene","scene","updateAspectRatio","aspect","webGlRenderer","getObject","css3dRenderer","initialize","canvas","THREE.WebGLRenderer","antialias","alpha","setPixelRatio","devicePixelRatio","setSize","clientWidth","clientHeight","shadowMap","enabled","autoUpdate","type","THREE.PCFSoftShadowMap","setClearColor","autoClear","style","zIndex","CSS3DRenderer","window","innerWidth","innerHeight","domElement","top","parentElement","appendChild","updateChildCamerasAspectRatio","resize","size","width","height","calculateAspectRatio","Injectable","PerspectiveCameraComponent","_this","_super","tslib_1.__extends","THREE.PerspectiveCamera","fov","undefined","near","far","updateProjectionMatrix","Component","args","selector","providers","provide","useExisting","forwardRef","template","AtftCameraModule","NgModule","declarations","imports","CommonModule","exports","AbstractObject3D","changed","EventEmitter","subscribe","object","modified","applyRotation","applyTranslation","emit","parent","remove","newObject3DInstance","collectChilds","afterInit","childNodes","filter","i","forEach","addChild","viewChilds","rotation","rotateX","rotateY","rotateZ","translateX","translateY","translateZ","add","removeChild","ContentChildren","descendants","ViewChildren","Output","AbstractConnector","mesh","createConnectorObject","watchObjects","source","item","updateLineGeometry","target","getLineGeometry","geo","THREE.Geometry","Error","vertices","appliedColor","color","defaultColor","resultColor","AnimationService","animate","animationStep","bind","start","stop","requestAnimationFrame","observers","MeshLineConnectorComponent","animationService","materialColor","transparent","opacity","lineWidth","depthWrite","depthTest","animated","animationIncrement","geometry","line","MeshLine","setGeometry","lineMaterial","MeshLineMaterial","side","THREE.DoubleSide","blending","THREE.NormalBlending","dashArray","dashOffset","dashRatio","THREE.Mesh","uniforms","LineConnectorComponent","material","THREE.LineBasicMaterial","linewidth","THREE.Line","verticesNeedUpdate","AtftConnectorModule","AxesHelperComponent","THREE.AxesHelper","EmptyComponent","THREE.Object3D","GridHelperComponent","THREE.GridHelper","divisions","AtftHelperModule","appliedMaterial","materialName","props","THREE.Color","THREE.MeshLambertMaterial","THREE.MeshBasicMaterial","THREE.MeshPhongMaterial","calculateSize","group","box","THREE.Box3","setFromObject","THREE.Vector3","max","x","min","z","fixCenter","scaleToFit","scaleX","scaleY","scaleZ","scale","PointLightComponent","intensity","distance","castShadow","light","THREE.PointLight","shadow","mapSize","bias","radius","HemisphereLightComponent","skyColor","groundColor","THREE.HemisphereLight","DirectionalLightComponent","THREE.DirectionalLight","bottom","left","right","AtftLightModule","AbstractLazyObject3D","arguments","parentInitialized","startLoading","loadLazyObject","obj","lazyObject","catch","err","console","error","AbstractModelLoader","defineProperty","_model","newModelUrl","ObjectLoaderComponent","loader","THREE.ObjectLoader","load","model","ObjLoaderComponent","OBJLoader","mtlLoader","MTLLoader","newTexturePath","resourcePath","setResourcePath","materialCreator","preload","setMaterials","SVGLoaderComponent","_overrideMaterialColor","centered","SVGLoader","data","paths","THREE.Group","path","shapes","toShapes","j","shape","THREE.ShapeBufferGeometry","maxX","maxY","AtftLoaderModule","AbstractMesh","receiveShadow","getMaterial","applyShadowProps","applyMaterial","BoxMeshComponent","depth","widthSegments","heightSegments","depthSegments","THREE.BoxGeometry","CylinderMeshComponent","radiusTop","radiusBottom","radialSegments","openEnded","thetaStart","thetaLength","Math","PI","THREE.CylinderGeometry","FrameMeshComponent","thickness","sizeX","sizeY","halfX","halfY","THREE.Shape","moveTo","lineTo","PlaneMeshComponent","THREE.PlaneBufferGeometry","SphereMeshComponent","THREE.SphereGeometry","hightSegments","TorusMeshComponent","tubularSegments","arc","tube","THREE.TorusGeometry","AbstractCss3dMesh","resolutionX","resolutionY","meshSize","css3dObject","createCss3dObject","scaleCss3d","Css3dVideoMeshComponent","video","document","createElement","div","backgroundColor","id","autoplay","loop","muted","src","videoSrc","CSS3DObject","addEventListener","log","play","AtftMeshModule","TextMeshComponent","_materialColor","_text","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","fontUrl","text","THREE.FontLoader","font","THREE.TextGeometry","AtftTextModule","SceneComponent","background","fog","fogColor","fogNear","fogFar","THREE.Scene","THREE.Fog","AtftObjectModule","RaycasterService","raycaster","THREE.Raycaster","groups","paused","onMouseMove","onMouseDown","onTouchStart","disable","unsubscribe","removeEventListener","enable","pause","resume","addGroup","event","isReady","preventDefault","getFirstIntersectedGroup","layerX","layerY","selected","dispatchEvent","touches","clientX","clientY","ignorePaused","nearestIntersection","nearestGroup","mouseVector","setFromCamera","k","intersection","intersectObject","RendererCanvasComponent","onResize","canvasRef","nativeElement","ViewChild","static","HostListener","AbstractOrbitControls","raycasterService","controls","dispose","setUpControls","configureListeners","isEnabled","childCameras","first","listeningControlElement","renderPane","ContentChild","OrbitControlsComponent","rotateSpeed","zoomSpeed","OrbitControls","MapControlsComponent","autoRotate","autoRotateSpeed","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","panSpeed","MapControls","update","AtftControlModule","Deg2RadPipe","transform","degrees","Pipe","name","Rad2DegPipe","radians","AtftPipeModule","AtftRendererModule","AtftAnimationModule","RaycasterGroupDirective","host","mouseEnter","mouseExit","mouseDown","onMouseEnter","onMouseExit","subscribeEvents","unSubscribeEvents","Directive","RaycasterCameraDirective","RaycasterEnableDirective","AtftRaycasterModule","AtftModule","StatsService","ms","count","lastTime","Date","now","end","deltaMs","getStats","callsPerSecond","round","reset"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {AfterViewInit, Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {RendererService} from '../renderer/renderer.service';\r\n\r\nexport abstract class AbstractCamera<T extends THREE.Camera> implements AfterViewInit, OnChanges {\r\n\r\n  camera: T;\r\n\r\n  @Input() positionX: number;\r\n  @Input() positionY: number;\r\n  @Input() positionZ: number;\r\n\r\n  @Input() zAxisUp = false;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    // console.log('AbstractCamera.constructor');\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    // console.log('AbstractCamera.ngAfterViewInit');\r\n    this.createCamera();\r\n\r\n    this.applyZAxisUp();\r\n    this.applyPosition();\r\n\r\n    // TODO: Directive?\r\n    this.rendererService.setCamera(this);\r\n  }\r\n\r\n  protected abstract createCamera(): void;\r\n\r\n  public abstract updateAspectRatio(aspect: number);\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    let mustRerender = false;\r\n\r\n    if (['positionX', 'positionY', 'positionZ'].some(propName => propName in changes)) {\r\n      this.applyPosition();\r\n      mustRerender = true;\r\n    }\r\n\r\n    if (mustRerender) {\r\n      this.rendererService.render();\r\n    }\r\n\r\n  }\r\n\r\n  protected applyPosition() {\r\n    if (this.camera) {\r\n      this.camera.position.set(\r\n        this.positionX || 0,\r\n        this.positionY || 0,\r\n        this.positionZ || 0,\r\n      );\r\n    }\r\n  }\r\n\r\n  protected applyZAxisUp() {\r\n    if (this.camera && this.zAxisUp) {\r\n      // Z axis up (similarly to 3D Creation Software: Blender, 3DS Max)\r\n      this.camera.up.set(0, 0, 1);\r\n    }\r\n  }\r\n\r\n}\r\n","import {Injectable, OnDestroy} from '@angular/core';\r\nimport {SceneComponent} from '../object/scene.component';\r\nimport {AbstractCamera} from '../camera/abstract-camera';\r\nimport * as THREE from 'three';\r\nimport {CSS3DRenderer} from 'three/examples/jsm/renderers/CSS3DRenderer';\r\n\r\n/* TODO: Refactor to pair\r\ninterface RendererPair {\r\n  scene: SceneComponent;\r\n  camera: AbstractCamera<any>;\r\n  webGlRenderer: THREE.Renderer;\r\n  layers: Array<number>;\r\n}\r\n*/\r\n\r\n@Injectable()\r\nexport class RendererService implements OnDestroy {\r\n  private init = false;\r\n\r\n  private scene: SceneComponent;\r\n  private camera: AbstractCamera<any>;\r\n  private webGlRenderer: THREE.WebGLRenderer;\r\n  // TODO:\r\n  private css3dRenderer: CSS3DRenderer;\r\n\r\n  private aspect: number;\r\n\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n\r\n  }\r\n\r\n\r\n  public setScene(scene: SceneComponent) {\r\n    this.scene = scene;\r\n  }\r\n\r\n  public setCamera(camera: AbstractCamera<any>) {\r\n    this.camera = camera;\r\n    this.camera.updateAspectRatio(this.aspect);\r\n  }\r\n\r\n  public render() {\r\n    if (this.init && this.scene && this.camera) {\r\n      //  console.log('render');\r\n      this.webGlRenderer.render(this.scene.getObject(), this.camera.camera);\r\n      this.css3dRenderer.render(this.scene.getObject(), this.camera.camera);\r\n    }\r\n  }\r\n\r\n  public initialize(canvas: HTMLCanvasElement) {\r\n    // console.log('RendererComponent.initialize');\r\n\r\n    // TODO: Multiple renderers\r\n    this.webGlRenderer = new THREE.WebGLRenderer({\r\n      canvas: canvas,\r\n      antialias: true,\r\n      alpha: true\r\n    });\r\n    this.webGlRenderer.setPixelRatio(devicePixelRatio);\r\n    this.webGlRenderer.setSize(canvas.clientWidth, canvas.clientHeight, false);\r\n\r\n    // TODO: props\r\n    this.webGlRenderer.shadowMap.enabled = false;\r\n    this.webGlRenderer.shadowMap.autoUpdate = false;\r\n    this.webGlRenderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n    this.webGlRenderer.setClearColor(0x000000, 0);\r\n    this.webGlRenderer.autoClear = true;\r\n    canvas.style.zIndex = '2';\r\n\r\n    // ------------------------------ START\r\n    this.css3dRenderer = new CSS3DRenderer();\r\n    this.css3dRenderer.setSize(window.innerWidth, window.innerHeight);\r\n    this.css3dRenderer.domElement.style.position = 'absolute';\r\n    this.css3dRenderer.domElement.style.top = '0';\r\n    this.css3dRenderer.domElement.style.zIndex = '1';\r\n    canvas.parentElement.appendChild(this.css3dRenderer.domElement);\r\n\r\n    // ------------------------------ END\r\n\r\n    this.updateChildCamerasAspectRatio(canvas);\r\n    this.init = true;\r\n    this.render();\r\n  }\r\n\r\n\r\n  public resize(canvas: HTMLCanvasElement, size: string) {\r\n    canvas.style.width = size;\r\n    canvas.style.height = size;\r\n    const width = canvas.clientWidth;\r\n    const height = canvas.clientHeight;\r\n\r\n    this.webGlRenderer.setSize(width, height, true);\r\n    this.css3dRenderer.setSize(width, height);\r\n    this.updateChildCamerasAspectRatio(canvas);\r\n    this.render();\r\n  }\r\n\r\n  private calculateAspectRatio(canvas: HTMLCanvasElement) {\r\n    const height = canvas.clientHeight;\r\n    if (height === 0) {\r\n      return 0;\r\n    }\r\n    this.aspect = canvas.clientWidth / canvas.clientHeight;\r\n  }\r\n\r\n  private updateChildCamerasAspectRatio(canvas: HTMLCanvasElement) {\r\n    this.calculateAspectRatio(canvas);\r\n    if (this.camera) {\r\n      this.camera.updateAspectRatio(this.aspect);\r\n    }\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport {AbstractCamera} from './abstract-camera';\r\nimport * as THREE from 'three';\r\nimport {RendererService} from '../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-perspective-camera',\r\n  providers: [{provide: AbstractCamera, useExisting: forwardRef(() => PerspectiveCameraComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class PerspectiveCameraComponent extends AbstractCamera<THREE.PerspectiveCamera> {\r\n\r\n  @Input() fov: number;\r\n  @Input() near: number;\r\n  @Input() far: number;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected createCamera(): void {\r\n    // console.log('PerspectiveCameraComponent.createCamera');\r\n    // let aspectRatio = undefined; // Updated later\r\n    this.camera = new THREE.PerspectiveCamera(\r\n      this.fov,\r\n      undefined,\r\n      this.near,\r\n      this.far\r\n    );\r\n  }\r\n\r\n  public updateAspectRatio(aspect: number) {\r\n    // console.log('PerspectiveCameraComponent.updateAspectRatio: ' + aspect);\r\n    this.camera.aspect = aspect;\r\n    this.camera.updateProjectionMatrix();\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PerspectiveCameraComponent} from './perspective-camera.component';\n\n\n@NgModule({\n  declarations: [\n    PerspectiveCameraComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    PerspectiveCameraComponent\n  ]\n})\nexport class AtftCameraModule {\n}\n","import {\r\n  AfterViewInit,\r\n  ContentChildren,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Output,\r\n  QueryList,\r\n  SimpleChanges,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {RendererService} from '../renderer/renderer.service';\r\n\r\nexport abstract class AbstractObject3D<T extends THREE.Object3D> implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n  @ContentChildren(AbstractObject3D, {descendants: false}) childNodes: QueryList<AbstractObject3D<THREE.Object3D>>;\r\n\r\n  @ViewChildren(AbstractObject3D) viewChilds: QueryList<AbstractObject3D<THREE.Object3D>>;\r\n\r\n  /**\r\n   * Rotation in Euler angles (radians) with order X, Y, Z.\r\n   */\r\n  @Input() rotateX: number;\r\n  @Input() rotateY: number;\r\n  @Input() rotateZ: number;\r\n\r\n  /**\r\n   * Translate the geometry. This is typically done as a one time operation, and not during a loop.\r\n   */\r\n  @Input() translateX: number;\r\n  @Input() translateY: number;\r\n  @Input() translateZ: number;\r\n\r\n  @Input() name: string;\r\n\r\n  @Output() changed = new EventEmitter<void>();\r\n\r\n  private object: T;\r\n\r\n  constructor(protected rendererService: RendererService) {\r\n    // console.log('AbstractObject3D.constructor');\r\n    this.changed.subscribe(() => {\r\n      this.rendererService.render();\r\n    });\r\n\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.object) {\r\n      return;\r\n    }\r\n\r\n    let modified = false;\r\n\r\n    if (['rotateX', 'rotateY', 'rotateZ'].some(propName => propName in changes)) {\r\n      this.applyRotation();\r\n      modified = true;\r\n    }\r\n    if (['translateX', 'translateY', 'translateZ'].some(propName => propName in changes)) {\r\n      this.applyTranslation();\r\n      modified = true;\r\n    }\r\n\r\n    if (modified) {\r\n      this.changed.emit();\r\n    }\r\n\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    // console.log('AbstractObject3D.OnDestroy');\r\n    if (this.object && this.object.parent) {\r\n      this.object.parent.remove(this.object);\r\n    }\r\n  }\r\n\r\n  public ngAfterViewInit() {\r\n    // console.log('AbstractObject3D.ngAfterViewInit ' + this.name);\r\n    this.object = this.newObject3DInstance();\r\n\r\n    this.applyTranslation();\r\n    this.applyRotation();\r\n\r\n    this.collectChilds();\r\n\r\n    this.afterInit();\r\n  }\r\n\r\n  public collectChilds() {\r\n    // console.log('Collect childs for', this.name);\r\n    if (this.childNodes !== undefined && this.childNodes.length > 1) {\r\n      this.childNodes.filter(i => i !== this && i.getObject() !== undefined).forEach(i => {\r\n        // console.log('Add childNodes for', this.name, i);\r\n        this.addChild(i.getObject());\r\n      });\r\n    } else {\r\n      // console.log(\"No child Object3D for: \" + this.constructor.label);\r\n    }\r\n\r\n\r\n    if (this.viewChilds !== undefined && this.viewChilds.length > 0) {\r\n      this.viewChilds.filter(\r\n        i => i !== this\r\n          && i.getObject() !== undefined\r\n          && !i.getObject().parent /* direct childs only */\r\n      ).forEach(i => {\r\n        // console.log('Add viewChilds for', this.name, i);\r\n        this.addChild(i.getObject());\r\n      });\r\n    } else {\r\n      // console.log(\"No child Object3D for: \" + this.constructor.label);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  private applyRotation(): void {\r\n    this.object.rotation.set(\r\n      this.rotateX || 0,\r\n      this.rotateY || 0,\r\n      this.rotateZ || 0,\r\n      'XYZ'\r\n    );\r\n  }\r\n\r\n  private applyTranslation(): void {\r\n    this.object.position.set(\r\n      this.translateX || 0,\r\n      this.translateY || 0,\r\n      this.translateZ || 0\r\n    );\r\n  }\r\n\r\n  public addChild(object: THREE.Object3D): void {\r\n    this.object.add(object);\r\n  }\r\n\r\n  protected removeChild(object: THREE.Object3D): void {\r\n    this.object.remove(object);\r\n  }\r\n\r\n  public getObject(): T {\r\n    return this.object;\r\n  }\r\n\r\n  protected afterInit() {\r\n    // this.changed.emit();\r\n  }\r\n\r\n  protected abstract newObject3DInstance(): T;\r\n\r\n\r\n}\r\n","import {Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\n\r\nexport abstract class AbstractConnector<T extends THREE.Object3D> extends AbstractObject3D<T> {\r\n\r\n  @Input()\r\n  source: AbstractObject3D<THREE.Object3D>;\r\n\r\n  @Input()\r\n  target: AbstractObject3D<THREE.Object3D>;\r\n\r\n  protected newObject3DInstance(): T {\r\n    const mesh = this.createConnectorObject();\r\n    this.watchObjects();\r\n    return mesh;\r\n  }\r\n\r\n  private watchObjects() {\r\n    this.source.changed.subscribe(item => {\r\n      this.updateLineGeometry();\r\n    });\r\n\r\n    this.target.changed.subscribe(item => {\r\n      this.updateLineGeometry();\r\n    });\r\n  }\r\n\r\n  protected getLineGeometry(): THREE.Geometry {\r\n    const geo = new THREE.Geometry();\r\n    if (!this.source || !this.target) {\r\n      throw new Error('AbstractConnector: source or target inputs are missing!');\r\n    }\r\n    geo.vertices.push(this.source.getObject().position);\r\n    geo.vertices.push(this.target.getObject().position);\r\n    return geo;\r\n  }\r\n\r\n\r\n  /**\r\n   * Create line mesh\r\n   */\r\n  abstract createConnectorObject(): T;\r\n\r\n  /**\r\n   * If at least one line end (source or target object)  changed, then line geoetry should be updated as well\r\n   * // TODO: Calculate only when source/target positions were changed\r\n   */\r\n  abstract updateLineGeometry(): void;\r\n\r\n}\r\n","/**\r\n * Fix color number binding issues\r\n * @param color Color number from binding input\r\n * @param defaultColor default value in case of binding issues\r\n */\r\nexport function appliedColor(color: number, defaultColor?: number): number {\r\n  let resultColor = (defaultColor ? defaultColor : 0xffffff);\r\n  if (color !== undefined  ) {\r\n    resultColor = color * 1;\r\n  }\r\n  return resultColor;\r\n}\r\n","import {EventEmitter, Injectable, Optional, SkipSelf} from '@angular/core';\r\nimport {RendererService} from '../renderer/renderer.service';\r\n\r\n\r\n/**\r\n * Animation service emits animate event, which should be used by animated components for animation logic.\r\n * NOTE: this service is for the performance optimization: requestAnimationFrame and render is called once.\r\n */\r\n@Injectable()\r\nexport class AnimationService {\r\n\r\n  /**\r\n   * Subscribe for animation frame creation (change position and etc.)\r\n   * Avoid render() execution, it's called only once when all components updated animation frame.\r\n   */\r\n  readonly animate = new EventEmitter<void>();\r\n\r\n  private enabled = false;\r\n\r\n  constructor(\r\n    private rendererService: RendererService\r\n  ) {\r\n    this.animationStep = this.animationStep.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Start the animation loop.\r\n   */\r\n  public start() {\r\n    if (!this.enabled) {\r\n      this.enabled = true;\r\n      this.animationStep();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop all animations.\r\n   */\r\n  public stop() {\r\n    if (this.enabled) {\r\n      this.enabled = false;\r\n    }\r\n  }\r\n\r\n  private animationStep() {\r\n    if (this.enabled) {\r\n      requestAnimationFrame(this.animationStep);\r\n      if (this.animate.observers.length > 0) {\r\n        this.animate.emit();\r\n        /**\r\n         * When all components updated animation, render event is emitted.\r\n         * Main renderer subscribed to this event emitter.\r\n         */\r\n        this.rendererService.render();\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {MeshLine, MeshLineMaterial} from 'three.meshline';\r\nimport {AbstractConnector} from './abstract-connector';\r\nimport {appliedColor} from '../../util/applied-color';\r\nimport {AnimationService} from '../../animation/animation.service';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-mesh-line-connector',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => MeshLineConnectorComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class MeshLineConnectorComponent extends AbstractConnector<THREE.Mesh> {\r\n\r\n  @Input()\r\n  materialColor = 0xffff00;\r\n\r\n  @Input()\r\n  transparent = true;\r\n\r\n  @Input()\r\n  opacity = 0.5;\r\n\r\n  @Input()\r\n  lineWidth = 0.5;\r\n\r\n  @Input()\r\n  depthWrite = true;\r\n\r\n  @Input()\r\n  depthTest = true;\r\n\r\n  @Input()\r\n  animated = false;\r\n\r\n  @Input() animationIncrement = 0.002;\r\n\r\n  private geometry: THREE.Geometry;\r\n  private line: MeshLine;\r\n  private lineMaterial: MeshLineMaterial;\r\n\r\n\r\n  constructor(\r\n    protected animationService: AnimationService,\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  createConnectorObject(): THREE.Mesh {\r\n    this.geometry = this.getLineGeometry();\r\n\r\n    this.line = new MeshLine();\r\n    this.line.setGeometry(this.geometry);\r\n\r\n    this.lineMaterial = (this.animated ?\r\n        new MeshLineMaterial({\r\n          color: appliedColor(this.materialColor),\r\n          transparent: this.transparent,\r\n          opacity: this.opacity,\r\n          lineWidth: this.lineWidth,\r\n          depthWrite: this.depthWrite,\r\n          depthTest: this.depthTest,\r\n          side: THREE.DoubleSide,\r\n          blending: THREE.NormalBlending,\r\n          // TODO: props\r\n          dashArray: 0.05,\r\n          dashOffset: 0.1,\r\n          dashRatio: 0.1\r\n        })\r\n        : new MeshLineMaterial({\r\n          color: appliedColor(this.materialColor),\r\n          transparent: this.transparent,\r\n          opacity: this.opacity,\r\n          lineWidth: this.lineWidth,\r\n          depthWrite: this.depthWrite,\r\n          depthTest: this.depthTest,\r\n          side: THREE.DoubleSide,\r\n          blending: THREE.NormalBlending\r\n        })\r\n    );\r\n\r\n    const mesh = new THREE.Mesh(this.line.geometry, this.lineMaterial);\r\n    if (this.animated) {\r\n      this.animate = this.animate.bind(this);\r\n      this.animationService.animate.subscribe(this.animate);\r\n    }\r\n    return mesh;\r\n  }\r\n\r\n  private animate() {\r\n    this.lineMaterial.uniforms.dashOffset.value += this.animationIncrement;\r\n  }\r\n\r\n  updateLineGeometry(): void {\r\n    // https://github.com/spite/THREE.MeshLine/issues/51#issuecomment-379579926\r\n    this.line.setGeometry(this.geometry);\r\n    this.rendererService.render();\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {AbstractConnector} from './abstract-connector';\r\nimport {appliedColor} from '../../util/applied-color';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-line-connector',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => LineConnectorComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class LineConnectorComponent extends AbstractConnector<THREE.Line> {\r\n\r\n  @Input()\r\n  materialColor = 0xffff00;\r\n\r\n  // TODO: move to abstract?\r\n  private geometry: THREE.Geometry;\r\n\r\n  constructor(protected rendererService: RendererService) {\r\n    super(rendererService);\r\n  }\r\n\r\n  public createConnectorObject(): THREE.Line {\r\n    this.geometry = this.getLineGeometry();\r\n\r\n    const material = new THREE.LineBasicMaterial({\r\n      color: appliedColor(this.materialColor),\r\n      /**\r\n       * NOTE: linewidth=1: Due to limitations of the OpenGL Core Profile\r\n       * with the WebGL renderer on most platforms linewidth will always be 1\r\n       * regardless of the set value.\r\n       */\r\n      linewidth: 1\r\n    });\r\n\r\n    const line = new THREE.Line(this.geometry, material);\r\n\r\n    return line;\r\n  }\r\n\r\n  updateLineGeometry(): void {\r\n    this.geometry.verticesNeedUpdate = true;\r\n    this.rendererService.render();\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MeshLineConnectorComponent} from './mesh-line-connector.component';\r\nimport {LineConnectorComponent} from './line-connector.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LineConnectorComponent,\r\n    MeshLineConnectorComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    LineConnectorComponent,\r\n    MeshLineConnectorComponent\r\n  ]\r\n})\r\nexport class AtftConnectorModule {\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-axes-helper',\r\n  providers: [{ provide: AbstractObject3D, useExisting: forwardRef(() => AxesHelperComponent) }],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class AxesHelperComponent extends AbstractObject3D<THREE.AxesHelper> {\r\n\r\n  @Input() size: number;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.AxesHelper {\r\n    // console.log('AxesHelperComponent.newObject3DInstance');\r\n    return new THREE.AxesHelper(this.size);\r\n  }\r\n\r\n\r\n}\r\n","import {AfterViewInit, Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-empty',\r\n  providers: [{ provide: AbstractObject3D, useExisting: forwardRef(() => EmptyComponent) }],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class EmptyComponent extends AbstractObject3D<THREE.Object3D> implements AfterViewInit {\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Object3D {\r\n    return new THREE.Object3D();\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-grid-helper',\r\n  providers: [{ provide: AbstractObject3D, useExisting: forwardRef(() => GridHelperComponent) }],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class GridHelperComponent extends AbstractObject3D<THREE.AxesHelper> {\r\n\r\n  @Input() size: number;\r\n  @Input() divisions: number;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.AxesHelper {\r\n    // console.log('GridHelperComponent.newObject3DInstance');\r\n    return new THREE.GridHelper(this.size, this.divisions);\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {AxesHelperComponent} from './axes-helper.component';\r\nimport {EmptyComponent} from './empty.component';\r\nimport {GridHelperComponent} from './grid-helper.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AxesHelperComponent,\r\n    EmptyComponent,\r\n    GridHelperComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    AxesHelperComponent,\r\n    EmptyComponent,\r\n    GridHelperComponent\r\n  ]\r\n})\r\nexport class AtftHelperModule {\r\n}\r\n","import * as THREE from 'three';\r\nimport {appliedColor} from './applied-color';\r\n\r\n\r\n/**\r\n * Creates material\r\n *\r\n * @param materialColor color\r\n * @param materialName material label as string\r\n * @param depthWrite enable depth write\r\n */\r\nexport function appliedMaterial(materialColor: number | THREE.Color, materialName?: string, depthWrite?: boolean): THREE.Material {\r\n\r\n  const props = {\r\n    color: (materialColor instanceof THREE.Color ? materialColor : appliedColor(materialColor)),\r\n    side: THREE.DoubleSide,\r\n    depthWrite: (depthWrite !== undefined ? depthWrite : true)\r\n  };\r\n\r\n  if (materialName === 'lamb') {\r\n    return new THREE.MeshLambertMaterial(props);\r\n  } else if (materialName === 'basic') {\r\n    return new THREE.MeshBasicMaterial(props);\r\n  } else {\r\n    return new THREE.MeshPhongMaterial(props);\r\n  }\r\n\r\n}\r\n\r\n\r\n","import * as THREE from 'three';\r\n\r\nexport function calculateSize(group: THREE.Object3D): THREE.Vector3 {\r\n  const box = new THREE.Box3().setFromObject(group);\r\n  return new THREE.Vector3(\r\n    box.max.x - box.min.x,\r\n    box.max.y - box.min.y,\r\n    box.max.z - box.min.z\r\n  );\r\n}\r\n","import * as THREE from 'three';\r\nimport {calculateSize} from './calculate-size';\r\n\r\nexport function fixCenter(group: THREE.Object3D) {\r\n  const box = calculateSize(group);\r\n  group.translateX(-box.x / 2);\r\n  group.translateY(-box.y / 2);\r\n  group.translateZ(-box.z / 2);\r\n}\r\n","import * as THREE from 'three';\r\nimport {calculateSize} from './calculate-size';\r\n\r\nexport function scaleToFit(group: THREE.Object3D, max: THREE.Vector3) {\r\n  const box = calculateSize(group);\r\n\r\n  const scaleX = max.x / box.x;\r\n  const scaleY = max.y / box.y;\r\n  const scaleZ = max.z / box.z;\r\n\r\n  group.scale.set(\r\n    (scaleX < 1 ? scaleX : 1),\r\n    (scaleY < 1 ? scaleY : 1),\r\n    (scaleZ < 1 ? scaleZ : 1)\r\n  );\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {appliedColor} from '../../util';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-point-light',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => PointLightComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class PointLightComponent extends AbstractObject3D<THREE.PointLight> {\r\n\r\n  @Input() color = 0xffffff;\r\n  @Input() intensity = 1;\r\n  @Input() distance = 500;\r\n  @Input() castShadow = false;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance() {\r\n    const light = new THREE.PointLight(appliedColor(this.color), this.intensity, this.distance);\r\n\r\n    if (this.castShadow === true) {\r\n      light.castShadow = this.castShadow;\r\n      // TODO: props\r\n      light.shadow.mapSize.width = 1024;\r\n      light.shadow.mapSize.height = 1024;\r\n      light.shadow.camera.near = 0.5;\r\n      light.shadow.camera.far = 500;\r\n      light.shadow.bias = -0.001;\r\n      light.shadow.radius = 1;\r\n    }\r\n\r\n    return light;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {appliedColor} from '../../util/applied-color';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-hemisphere-light',\r\n  providers: [{ provide: AbstractObject3D, useExisting: forwardRef(() => HemisphereLightComponent) }],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class HemisphereLightComponent extends AbstractObject3D<THREE.HemisphereLight> {\r\n\r\n  @Input() skyColor = 0xffffff;\r\n  @Input() groundColor = 0x444444;\r\n  @Input() intensity = 1;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance() {\r\n\r\n    const light = new THREE.HemisphereLight(\r\n      appliedColor(this.skyColor),\r\n      appliedColor(this.groundColor),\r\n      appliedColor(this.intensity)\r\n    );\r\n\r\n    return light;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {appliedColor} from '../../util/applied-color';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-directional-light',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => DirectionalLightComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class DirectionalLightComponent extends AbstractObject3D<THREE.DirectionalLight> {\r\n\r\n  @Input() color = 0xffffff;\r\n  @Input() intensity = 1;\r\n  // by default, target is 0,0,0\r\n  @Input() target = new THREE.Object3D();\r\n  @Input() castShadow = true;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance() {\r\n\r\n    const light = new THREE.DirectionalLight(\r\n      appliedColor(this.color),\r\n      this.intensity\r\n    );\r\n\r\n    light.target = this.target;\r\n\r\n    if (this.castShadow === true) {\r\n      light.castShadow = this.castShadow;\r\n      // TODO: props\r\n      light.shadow.camera.top = 100;\r\n      light.shadow.camera.bottom = -100;\r\n      light.shadow.camera.left = -100;\r\n      light.shadow.camera.right = 100;\r\n      light.shadow.camera.near = 0.1;\r\n      light.shadow.camera.far = 500;\r\n      light.shadow.mapSize.set(1024, 1024);\r\n      light.shadow.bias = -0.001;\r\n\r\n    }\r\n    return light;\r\n\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {PointLightComponent} from './point-light.component';\r\nimport {HemisphereLightComponent} from './hemisphere-light.component';\r\nimport {DirectionalLightComponent} from './directional-light.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DirectionalLightComponent,\r\n    HemisphereLightComponent,\r\n    PointLightComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    DirectionalLightComponent,\r\n    HemisphereLightComponent,\r\n    PointLightComponent\r\n  ]\r\n})\r\nexport class AtftLightModule {\r\n}\r\n","import {OnDestroy} from '@angular/core';\r\n\r\nimport {AbstractObject3D} from './abstract-object-3d';\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport abstract class AbstractLazyObject3D extends AbstractObject3D<THREE.Object3D> implements OnDestroy {\r\n\r\n  /**\r\n   * Flag to signal whether the parent class instance AbstractObject3D called the\r\n   * overwritten method {@link AbstractModelLoader#afterInit} yet.\r\n   *\r\n   * Unless that method was called, no methods and properties of {@link AbstractObject3D}\r\n   * may be safely accessed, especially {@link AbstractObject3D#addChild} and\r\n   * {@link AbstractObject3D.renderer}.\r\n   */\r\n  private parentInitialized = false;\r\n\r\n  /**\r\n   * This is reference to lazy loaded Object3D (async after init)\r\n   */\r\n  protected lazyObject: THREE.Object3D | undefined;\r\n\r\n  /**\r\n   * Abstract method for lazy loading\r\n   *\r\n   */\r\n  protected abstract async loadLazyObject(): Promise<THREE.Object3D>;\r\n\r\n  protected afterInit() {\r\n    super.afterInit();\r\n    this.parentInitialized = true;\r\n    this.startLoading();\r\n  }\r\n\r\n  protected startLoading() {\r\n    // console.log('AbstractLazyObject3D.startLoading');\r\n    // Trigger model acquisition now that the parent has been initialized.\r\n    this.loadLazyObject().then(obj => {\r\n      // console.log('AbstractLazyObject3D loaded');\r\n      // remove old if exists\r\n      if (this.lazyObject) {\r\n        super.removeChild(this.lazyObject);\r\n      }\r\n\r\n      // add lazy object to scene\r\n      this.lazyObject = obj;\r\n      super.addChild(obj);\r\n\r\n      this.rendererService.render();\r\n    }).catch(err => {\r\n      console.error(err);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.lazyObject) {\r\n      super.removeChild(this.lazyObject);\r\n    }\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Object3D {\r\n    // Just empty object (holder of lazy object)\r\n    return new THREE.Object3D();\r\n  }\r\n\r\n}\r\n","import {Input} from '@angular/core';\r\nimport {AbstractLazyObject3D} from '../abstract-lazy-object-3d';\r\n\r\n/**\r\n * Helper parent class for model loader.\r\n *\r\n * @see ObjLoaderComponent\r\n */\r\nexport abstract class AbstractModelLoader extends AbstractLazyObject3D {\r\n\r\n  protected _model: string;\r\n\r\n  /**\r\n   * The model data source (usually a URI).\r\n   * Settings this property only hides the previous model upon successful\r\n   * loading of the new one. This especially means that if the new data source\r\n   * is invalid, the old model will *not* be removed from the scene.\r\n   */\r\n  @Input()\r\n  public set model(newModelUrl: string) {\r\n    if (this._model !== newModelUrl) {\r\n      this._model = newModelUrl;\r\n      super.startLoading();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The current model data source (usually a URI).\r\n   */\r\n  public get model() {\r\n    return this._model;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef} from '@angular/core';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {AbstractModelLoader} from './abstract-model-loader';\r\n\r\nimport * as THREE from 'three';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-object-loader',\r\n  providers: [{ provide: AbstractObject3D, useExisting: forwardRef(() => ObjectLoaderComponent) }],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class ObjectLoaderComponent extends AbstractModelLoader {\r\n  private loader = new THREE.ObjectLoader();\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected async loadLazyObject() {\r\n    // console.log('ObjectLoaderComponent.loadLazyObject');\r\n    return new Promise<THREE.Object3D>((resolve, reject) => {\r\n      this.loader.load(this.model, model => {\r\n          // BUG #95: it seems that some textures loaded after last render (and model has black texture instead)\r\n          resolve(model);\r\n        },\r\n        undefined,\r\n        reject\r\n      );\r\n    });\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {AbstractModelLoader} from './abstract-model-loader';\r\nimport {OBJLoader} from 'three/examples/jsm/loaders/OBJLoader';\r\nimport {MTLLoader} from 'three/examples/jsm/loaders/MTLLoader';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n/**\r\n * Component for employing THREE.OBJLoader to load [Wavefront *.obj files][1].\r\n *\r\n * [1]: https://en.wikipedia.org/wiki/Wavefront_.obj_file\r\n */\r\n@Component({\r\n  selector: 'atft-obj-loader',\r\n  providers: [{ provide: AbstractObject3D, useExisting: forwardRef(() => ObjLoaderComponent) }],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class ObjLoaderComponent extends AbstractModelLoader {\r\n\r\n  private loader = new OBJLoader();\r\n  private mtlLoader = new MTLLoader();\r\n\r\n  @Input()\r\n  material: string;\r\n\r\n  /**\r\n   * Path relative to which resources and textures within the loaded obj file are loaded.\r\n   * @deprecated Rather use resourcePath\r\n   */\r\n  @Input()\r\n  public set texturePath(newTexturePath: string) {\r\n    this.resourcePath = newTexturePath;\r\n  }\r\n\r\n  /**\r\n   * Path relative to which resources and textures within the loaded obj file are loaded.\r\n   */\r\n  @Input()\r\n  resourcePath: string;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected async loadLazyObject() {\r\n    // Preloading step for the material\r\n    const preloadingStep = new Promise<void>((resolve, reject) => {\r\n      if (this.material === undefined) {\r\n        // No preloading necessary\r\n        resolve();\r\n      } else {\r\n        // TODO: If typings of mtlLoader are included in the Three.js NPM\r\n        // package, remove this 'any' cast.\r\n        (this.mtlLoader as any).setResourcePath(this.resourcePath);\r\n\r\n        this.mtlLoader.load(this.material, materialCreator => {\r\n          materialCreator.preload();\r\n          this.loader.setMaterials(materialCreator);\r\n          resolve();\r\n        }, undefined, reject);\r\n      }\r\n    });\r\n\r\n    // Await preloading and load final model\r\n    return preloadingStep.then(() => {\r\n      return new Promise<THREE.Object3D>((resolve, reject) => {\r\n        this.loader.load(this.model, model => {\r\n          resolve(model);\r\n        }, undefined, reject);\r\n      });\r\n    });\r\n  }\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {AbstractModelLoader} from './abstract-model-loader';\r\nimport {SVGLoader} from 'three/examples/jsm/loaders/SVGLoader';\r\n\r\nimport * as THREE from 'three';\r\nimport {appliedColor, appliedMaterial} from '../../util';\r\nimport {fixCenter} from '../../util/fix-center';\r\nimport {scaleToFit} from '../../util/scale-to-fit';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-svg-loader',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => SVGLoaderComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class SVGLoaderComponent extends AbstractModelLoader {\r\n\r\n  @Input()\r\n  get overrideMaterialColor(): number {\r\n    return this._overrideMaterialColor;\r\n  }\r\n\r\n  set overrideMaterialColor(value: number) {\r\n    this._overrideMaterialColor = value;\r\n    this.startLoading();\r\n  }\r\n\r\n  private _overrideMaterialColor: number = undefined;\r\n\r\n\r\n  @Input()\r\n  material = 'basic';\r\n\r\n  @Input()\r\n  depthWrite = true;\r\n\r\n  @Input()\r\n  maxX: number;\r\n\r\n  @Input()\r\n  maxY: number;\r\n\r\n  @Input()\r\n  centered = true;\r\n\r\n  private loader = new SVGLoader();\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected async loadLazyObject() {\r\n    // console.log('ObjectLoaderComponent.loadLazyObject');\r\n    return new Promise<THREE.Object3D>((resolve, reject) => {\r\n      this.loader.load(this.model, data => {\r\n          const paths = data.paths;\r\n          const group = new THREE.Group();\r\n\r\n          for (let i = 0; i < paths.length; i++) {\r\n            // NOTE: It seems that ShapePath does not includes typed color, cast to any as workaround\r\n            const path: any = paths[i];\r\n            const color = (this._overrideMaterialColor ? appliedColor(this._overrideMaterialColor) : path.color);\r\n            const material = appliedMaterial(color, this.material, this.depthWrite);\r\n            const shapes = path.toShapes(true, {});\r\n\r\n            for (let j = 0; j < shapes.length; j++) {\r\n              const shape = shapes[j];\r\n              const geometry = new THREE.ShapeBufferGeometry(shape);\r\n              const mesh = new THREE.Mesh(geometry, material);\r\n              group.add(mesh);\r\n            }\r\n          }\r\n\r\n          if (this.maxX || this.maxY) {\r\n            scaleToFit(group, new THREE.Vector3(this.maxX, this.maxY, 0));\r\n          }\r\n          if (this.centered) {\r\n            fixCenter(group);\r\n          }\r\n\r\n          resolve(group);\r\n        },\r\n        undefined,\r\n        reject);\r\n    });\r\n  }\r\n\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ObjectLoaderComponent} from './object-loader.component';\r\nimport {ObjLoaderComponent} from './obj-loader.component';\r\nimport {SVGLoaderComponent} from './svg-loader.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ObjLoaderComponent,\r\n    ObjectLoaderComponent,\r\n    SVGLoaderComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    ObjLoaderComponent,\r\n    ObjectLoaderComponent,\r\n    SVGLoaderComponent\r\n  ]\r\n})\r\nexport class AtftLoaderModule {\r\n}\r\n","import {Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {appliedMaterial} from '../../util';\r\n\r\nexport abstract class AbstractMesh extends AbstractObject3D<THREE.Mesh> implements OnChanges {\r\n\r\n  @Input()\r\n  material: string;\r\n\r\n  @Input()\r\n  materialColor = 0x5DADE2;\r\n\r\n  @Input()\r\n  castShadow = true;\r\n\r\n  @Input()\r\n  receiveShadow = true;\r\n\r\n  @Input()\r\n  depthWrite = true;\r\n\r\n  protected getMaterial(): THREE.Material {\r\n    return appliedMaterial(this.materialColor, this.material, this.depthWrite);\r\n  }\r\n\r\n  protected applyShadowProps(mesh: THREE.Mesh) {\r\n    mesh.castShadow = this.castShadow;\r\n    mesh.receiveShadow = this.receiveShadow;\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    super.ngOnChanges(changes);\r\n    if (!this.getObject()) {\r\n      return;\r\n    }\r\n\r\n    let mustRerender = false;\r\n    if (['material', 'materialColor', 'depthWrite'].some(propName => propName in changes)) {\r\n      this.applyMaterial();\r\n      mustRerender = true;\r\n    }\r\n\r\n    if (mustRerender) {\r\n      this.rendererService.render();\r\n    }\r\n  }\r\n\r\n  public applyMaterial() {\r\n    this.getObject().material = this.getMaterial();\r\n  }\r\n\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractMesh} from './abstract-mesh-3d';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-box-mesh',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => BoxMeshComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class BoxMeshComponent extends AbstractMesh {\r\n\r\n  /**\r\n   * Width; that is, the length of the edges parallel to the X axis. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  width = 1.0;\r\n\r\n  /**\r\n   * Height; that is, the length of the edges parallel to the Y axis. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  height = 1.0;\r\n\r\n  /**\r\n   * Depth; that is, the length of the edges parallel to the Z axis. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  depth = 1.0;\r\n\r\n  /**\r\n   * Number of segmented rectangular faces along the width of the sides. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  widthSegments = 1;\r\n\r\n  /**\r\n   * Number of segmented rectangular faces along the height of the sides. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  heightSegments = 1;\r\n\r\n  /**\r\n   * Number of segmented rectangular faces along the depth of the sides. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  depthSegments = 1;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance() {\r\n    // console.log('BoxMeshComponent.newObject3DInstance');\r\n    const geometry = new THREE.BoxGeometry(this.width, this.height, this.depth,\r\n      this.widthSegments, this.heightSegments, this.depthSegments);\r\n    const material = this.getMaterial();\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    this.applyShadowProps(mesh);\r\n    return mesh;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractMesh} from './abstract-mesh-3d';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-cylinder-mesh',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => CylinderMeshComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class CylinderMeshComponent extends AbstractMesh {\r\n\r\n  @Input()\r\n  radiusTop = 1.0;\r\n  @Input()\r\n  radiusBottom = 1.0;\r\n  @Input()\r\n  height = 1.0;\r\n  @Input()\r\n  radialSegments = 8;\r\n  @Input()\r\n  heightSegments = 1;\r\n  @Input()\r\n  openEnded = false;\r\n  @Input()\r\n  thetaStart = 0.0;\r\n  @Input()\r\n  thetaLength = 2 * Math.PI;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n    // console.log('CylinderMeshComponent.constructor');\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Mesh {\r\n    // console.log('CylinderMeshComponent.newObject3DInstance');\r\n    const geometry = new THREE.CylinderGeometry(this.radiusTop, this.radiusBottom, this.height, this.radialSegments, this.heightSegments,\r\n      this.openEnded, this.thetaStart, this.thetaLength);\r\n    const material = this.getMaterial();\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    this.applyShadowProps(mesh);\r\n    return mesh;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractMesh} from './abstract-mesh-3d';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-frame-mesh',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => FrameMeshComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class FrameMeshComponent extends AbstractMesh {\r\n\r\n  @Input()\r\n  thickness = 2;\r\n\r\n  @Input()\r\n  sizeX = 20;\r\n\r\n  @Input()\r\n  sizeY = 20;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Mesh {\r\n\r\n    const halfX = this.sizeX / 2.0;\r\n    const halfY = this.sizeY / 2.0;\r\n    const t = this.thickness;\r\n\r\n    const shape = new THREE.Shape();\r\n\r\n    shape.moveTo(-halfX, halfY);\r\n    shape.lineTo(-halfX - t, halfY + t);\r\n    shape.lineTo(halfX + t, halfY + t);\r\n    shape.lineTo(halfX + t, -halfY - t);\r\n    shape.lineTo(-halfX - t, -halfY - t);\r\n    shape.lineTo(-halfX - t, halfY + t);\r\n\r\n    shape.lineTo(-halfX, halfY);\r\n    shape.lineTo(-halfX, -halfY);\r\n    shape.lineTo(halfX, -halfY);\r\n    shape.lineTo(halfX, halfY);\r\n    shape.lineTo(-halfX, halfY);\r\n\r\n    const geometry = new THREE.ShapeBufferGeometry(shape);\r\n    const material = this.getMaterial();\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n\r\n    this.applyShadowProps(mesh);\r\n    return mesh;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractMesh} from './abstract-mesh-3d';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {appliedColor} from '../../util/applied-color';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-plane-mesh',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => PlaneMeshComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class PlaneMeshComponent extends AbstractMesh {\r\n\r\n  /**\r\n   * Width; that is, the length of the edges parallel to the X axis. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  width = 1.0;\r\n\r\n  /**\r\n   * Height; that is, the length of the edges parallel to the Y axis. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  height = 1.0;\r\n\r\n  /**\r\n   * Number of segmented rectangular faces along the width of the sides. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  widthSegments = 1;\r\n\r\n  /**\r\n   * Number of segmented rectangular faces along the height of the sides. Optional; defaults to 1.\r\n   */\r\n  @Input()\r\n  heightSegments = 1;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Mesh {\r\n    const geometry = new THREE.PlaneBufferGeometry(this.width, this.height, this.widthSegments, this.heightSegments);\r\n    const material = this.getMaterial();\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    this.applyShadowProps(mesh);\r\n    return mesh;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractMesh} from './abstract-mesh-3d';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-sphere-mesh',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => SphereMeshComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class SphereMeshComponent extends AbstractMesh {\r\n\r\n  @Input() radius: number;\r\n  @Input() widthSegments: number;\r\n  @Input() hightSegments: number;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Mesh {\r\n    // console.log('SphereMeshComponent.newObject3DInstance');\r\n    const geometry = new THREE.SphereGeometry(this.radius, this.widthSegments, this.hightSegments);\r\n    const material = this.getMaterial();\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    this.applyShadowProps(mesh);\r\n    return mesh;\r\n  }\r\n\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractMesh} from './abstract-mesh-3d';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-torus-mesh',\r\n  providers: [{ provide: AbstractObject3D, useExisting: forwardRef(() => TorusMeshComponent) }],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class TorusMeshComponent extends AbstractMesh {\r\n\r\n  /**\r\n   * Radius of the torus, from the center of the torus to the center of the tube\r\n   */\r\n  @Input() radius = 0.4;\r\n\r\n  /**\r\n   * Radius of the tube.\r\n   */\r\n  @Input()\r\n  tube: number;\r\n\r\n  @Input()\r\n  radialSegments = 8;\r\n\r\n  @Input()\r\n  tubularSegments = 6;\r\n\r\n  @Input()\r\n  arc: number = Math.PI * 2;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Mesh {\r\n    this.radius *= 1;\r\n    this.tube *= 1;\r\n    this.radialSegments *= 1;\r\n    this.tubularSegments *= 1;\r\n\r\n    const geometry = new THREE.TorusGeometry(this.radius, this.tube,\r\n      this.radialSegments, this.tubularSegments);\r\n    const material = this.getMaterial();\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    this.applyShadowProps(mesh);\r\n    return mesh;\r\n  }\r\n\r\n}\r\n","import {Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractMesh} from './abstract-mesh-3d';\r\nimport {calculateSize} from '../../util';\r\nimport {CSS3DObject} from 'three/examples/jsm/renderers/CSS3DRenderer';\r\n\r\nexport abstract class AbstractCss3dMesh extends AbstractMesh {\r\n\r\n  @Input() width = 1.0;\r\n  @Input() height = 1.0;\r\n\r\n  // 1280 / 720 = 1.777777778\r\n  @Input() resolutionX = 1280;\r\n  @Input() resolutionY = 720;\r\n\r\n  private widthSegments = 1;\r\n  private heightSegments = 1;\r\n\r\n  protected newObject3DInstance(): THREE.Mesh {\r\n    const geometry = new THREE.PlaneBufferGeometry(this.width, this.height, this.widthSegments, this.heightSegments);\r\n    const material = this.getMaterial();\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    this.applyShadowProps(mesh);\r\n\r\n    // Create and scale css3d object:\r\n    const meshSize = calculateSize(mesh);\r\n    const css3dObject = this.createCss3dObject();\r\n    this.scaleCss3d(css3dObject, meshSize);\r\n\r\n    // append to mesh:\r\n    mesh.add(css3dObject);\r\n    return mesh;\r\n  }\r\n\r\n\r\n  protected scaleCss3d(group: CSS3DObject, max: THREE.Vector3) {\r\n    const box = new THREE.Vector3(this.resolutionX, this.resolutionY, 0);\r\n\r\n    const scaleX = max.x / box.x;\r\n    const scaleY = max.y / box.y;\r\n    const scaleZ = max.z / box.z;\r\n\r\n    group.scale.set(\r\n      (scaleX < 1 ? scaleX : 1),\r\n      (scaleY < 1 ? scaleY : 1),\r\n      (scaleZ < 1 ? scaleZ : 1)\r\n    );\r\n\r\n  }\r\n\r\n  protected getMaterial(): THREE.Material {\r\n    // TODO: Renderer clear color\r\n    const transparentMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0x000000,\r\n      opacity: 0,\r\n      side: THREE.DoubleSide\r\n    });\r\n    return transparentMaterial;\r\n  }\r\n\r\n  protected abstract createCss3dObject(): CSS3DObject;\r\n\r\n}\r\n","import {AfterViewInit, Component, forwardRef, Input} from '@angular/core';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {CSS3DObject} from 'three/examples/jsm/renderers/CSS3DRenderer';\r\nimport {AbstractCss3dMesh} from './abstract-css3d-mesh';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-css3d-video-mesh',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => Css3dVideoMeshComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class Css3dVideoMeshComponent extends AbstractCss3dMesh implements AfterViewInit {\r\n\r\n  @Input()\r\n  videoSrc;\r\n\r\n  video = document.createElement('video');\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  protected createCss3dObject(): CSS3DObject {\r\n    // 1. Create DIV\r\n    const div = document.createElement('div');\r\n    div.style.width = this.resolutionX + 'px';\r\n    div.style.height = this.resolutionY + 'px';\r\n    div.style.backgroundColor = '#000000';\r\n    div.id = 'myWrapper';\r\n\r\n    // 2. Create Video Player with source\r\n    this.video.autoplay = false;\r\n    this.video.loop = true;\r\n    this.video.muted = true;\r\n    const source = document.createElement('source');\r\n    source.src = this.videoSrc;\r\n    source.type = 'video/mp4';\r\n    this.video.appendChild(source);\r\n    div.appendChild(this.video);\r\n\r\n    // 3. Create CSS3DObject\r\n    const object = new CSS3DObject(div);\r\n    return object;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    super.ngAfterViewInit();\r\n    this.video.load();\r\n    this.video.addEventListener('canplay', () => {\r\n      console.log('EVENT');\r\n      this.video.play();\r\n    });\r\n\r\n\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {BoxMeshComponent} from './box-mesh.component';\r\nimport {CylinderMeshComponent} from './cylinder-mesh.component';\r\nimport {FrameMeshComponent} from './frame-mesh.component';\r\nimport {PlaneMeshComponent} from './plane-mesh.component';\r\nimport {SphereMeshComponent} from './sphere-mesh.component';\r\nimport {TorusMeshComponent} from './torus-mesh.component';\r\nimport {Css3dVideoMeshComponent} from './css3d-video-mesh.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    BoxMeshComponent,\r\n    CylinderMeshComponent,\r\n    FrameMeshComponent,\r\n    PlaneMeshComponent,\r\n    SphereMeshComponent,\r\n    TorusMeshComponent,\r\n    Css3dVideoMeshComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    BoxMeshComponent,\r\n    CylinderMeshComponent,\r\n    FrameMeshComponent,\r\n    PlaneMeshComponent,\r\n    SphereMeshComponent,\r\n    TorusMeshComponent,\r\n    Css3dVideoMeshComponent\r\n  ]\r\n})\r\nexport class AtftMeshModule {\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from '../abstract-object-3d';\r\nimport {AbstractLazyObject3D} from '../abstract-lazy-object-3d';\r\nimport {appliedMaterial} from '../../util';\r\nimport {fixCenter} from '../../util/fix-center';\r\nimport {RendererService} from '../../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-text-mesh',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => TextMeshComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class TextMeshComponent extends AbstractLazyObject3D {\r\n\r\n  @Input()\r\n  material = 'basic';\r\n\r\n\r\n  private _materialColor = 0xDADADA;\r\n  @Input()\r\n  set materialColor(materialColor: number) {\r\n    // console.log('change color', materialColor);\r\n    this._materialColor = materialColor;\r\n    this.startLoading();\r\n  }\r\n  get materialColor() {\r\n    return this._materialColor;\r\n  }\r\n\r\n  private _text = 'Text';\r\n  @Input()\r\n  set text(text: string) {\r\n    this._text = text;\r\n    this.startLoading();\r\n  }\r\n  get text() {\r\n    return this._text;\r\n  }\r\n\r\n\r\n  @Input()\r\n  size = 10;\r\n\r\n  @Input()\r\n  height = 0.3;\r\n\r\n  @Input()\r\n  curveSegments = 2;\r\n\r\n  @Input()\r\n  bevelEnabled = false;\r\n\r\n  @Input()\r\n  bevelThickness = 0.1;\r\n\r\n  @Input()\r\n  bevelSize = 0.1;\r\n\r\n  @Input()\r\n  bevelOffset = 0;\r\n\r\n  @Input()\r\n  bevelSegments = 1;\r\n\r\n  @Input()\r\n  fontUrl = './assets/font/helvetiker_regular.typeface.json';\r\n\r\n  @Input()\r\n  castShadow = true;\r\n\r\n  @Input()\r\n  receiveShadow = true;\r\n\r\n  @Input()\r\n  depthWrite = true;\r\n\r\n  @Input()\r\n  centered = true;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n  }\r\n\r\n  public getMaterial(): THREE.Material {\r\n    return appliedMaterial(this.materialColor, this.material, this.depthWrite);\r\n  }\r\n\r\n  protected async loadLazyObject(): Promise<THREE.Object3D> {\r\n    // console.log('TextMeshComponent.loadLazyObject');\r\n\r\n    return new Promise<THREE.Object3D>(resolve => {\r\n      const loader = new THREE.FontLoader();\r\n      loader.load(this.fontUrl, font => {\r\n\r\n        const geometry = new THREE.TextGeometry(this.text, {\r\n          font: font,\r\n          size: this.size,\r\n          height: this.height,\r\n          curveSegments: this.curveSegments,\r\n          bevelEnabled: this.bevelEnabled,\r\n          bevelThickness: this.bevelThickness,\r\n          bevelSize: this.bevelSize,\r\n          bevelOffset: this.bevelOffset,\r\n          bevelSegments: this.bevelOffset\r\n        });\r\n        const material = this.getMaterial();\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.castShadow = this.castShadow;\r\n        mesh.receiveShadow = this.receiveShadow;\r\n\r\n        if (this.centered) {\r\n          fixCenter(mesh);\r\n        }\r\n        resolve(mesh);\r\n      });\r\n    });\r\n\r\n\r\n  }\r\n\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {TextMeshComponent} from './text-mesh.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TextMeshComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    TextMeshComponent\r\n  ]\r\n})\r\nexport class AtftTextModule {\r\n}\r\n","import {Component, forwardRef, Input} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {AbstractObject3D} from './abstract-object-3d';\r\nimport {appliedColor} from '../util/applied-color';\r\nimport {RendererService} from '../renderer/renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-scene',\r\n  providers: [{provide: AbstractObject3D, useExisting: forwardRef(() => SceneComponent)}],\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class SceneComponent extends AbstractObject3D<THREE.Scene> {\r\n\r\n  @Input() background = 0xffffff;\r\n  @Input() fog = false;\r\n  @Input() fogColor = 0xa0a0a0;\r\n  @Input() fogNear = 10;\r\n  @Input() fogFar = 500;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService\r\n  ) {\r\n    super(rendererService);\r\n    // TODO: directive?\r\n    rendererService.setScene(this);\r\n  }\r\n\r\n  protected newObject3DInstance(): THREE.Scene {\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(appliedColor(this.background));\r\n    if (this.fog === true) {\r\n      scene.fog = new THREE.Fog(appliedColor(this.fogColor), this.fogNear, this.fogFar);\r\n    }\r\n    return scene;\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {AtftConnectorModule} from './connector/atft-connector.module';\r\nimport {AtftHelperModule} from './helper/atft-helper.module';\r\nimport {AtftLightModule} from './light/atft-light.module';\r\nimport {AtftLoaderModule} from './loader/atft-loader.module';\r\nimport {AtftMeshModule} from './mesh/atft-mesh.module';\r\nimport {AtftTextModule} from './text/atft-text.module';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SceneComponent} from './scene.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    AtftConnectorModule,\r\n    AtftHelperModule,\r\n    AtftLightModule,\r\n    AtftLoaderModule,\r\n    AtftMeshModule,\r\n    AtftTextModule\r\n  ],\r\n  declarations: [\r\n    SceneComponent\r\n  ],\r\n  exports: [\r\n    SceneComponent,\r\n    CommonModule,\r\n    AtftConnectorModule,\r\n    AtftHelperModule,\r\n    AtftLightModule,\r\n    AtftLoaderModule,\r\n    AtftMeshModule,\r\n    AtftTextModule\r\n  ]\r\n})\r\nexport class AtftObjectModule {\r\n}\r\n","import {Injectable, OnDestroy} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {Intersection} from 'three';\r\nimport {AbstractCamera} from '../camera/abstract-camera';\r\nimport {AbstractObject3D} from '../object/abstract-object-3d';\r\n\r\n@Injectable()\r\nexport class RaycasterService implements OnDestroy {\r\n\r\n  private raycaster = new THREE.Raycaster();\r\n  private selected: THREE.Object3D;\r\n  private enabled = false;\r\n  private camera: AbstractCamera<any>;\r\n  private groups: Array<AbstractObject3D<any>> = [];\r\n  private paused = false;\r\n\r\n\r\n  constructor() {\r\n    this.onMouseMove = this.onMouseMove.bind(this);\r\n    this.onMouseDown = this.onMouseDown.bind(this);\r\n    this.onTouchStart = this.onTouchStart.bind(this);\r\n    this.subscribe();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.disable();\r\n    this.unsubscribe();\r\n  }\r\n\r\n  private subscribe() {\r\n    window.addEventListener('mousemove', this.onMouseMove);\r\n    window.addEventListener('mousedown', this.onMouseDown);\r\n    window.addEventListener('touchstart', this.onTouchStart);\r\n  }\r\n\r\n  private unsubscribe() {\r\n    // console.log('unsubscribe raycaster');\r\n    window.removeEventListener('mousemove', this.onMouseMove);\r\n    window.removeEventListener('mousedown', this.onMouseDown);\r\n    window.removeEventListener('touchstart', this.onTouchStart);\r\n  }\r\n\r\n  public enable() {\r\n    this.enabled = true;\r\n  }\r\n\r\n  public disable() {\r\n    this.enabled = false;\r\n  }\r\n\r\n  public pause() {\r\n    this.paused = true;\r\n  }\r\n\r\n  public resume() {\r\n    this.paused = false;\r\n  }\r\n\r\n\r\n  get isEnabled() {\r\n    return this.enabled;\r\n  }\r\n\r\n  public setCamera(camera: AbstractCamera<any>) {\r\n    // console.log('Add camera to raycaster', camera);\r\n    this.camera = camera;\r\n  }\r\n\r\n  public addGroup(group: AbstractObject3D<any>) {\r\n    // console.log('RaycasterService.addGroup', group.name, group);\r\n    this.groups.push(group);\r\n  }\r\n\r\n  private onMouseMove(event) {\r\n    if (!this.isReady()) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    const i = this.getFirstIntersectedGroup(event.layerX, event.layerY);\r\n    if (!this.selected || this.selected !== i) {\r\n      if (this.selected) {\r\n        this.selected.dispatchEvent({type: 'mouseExit'});\r\n        this.selected = null;\r\n      }\r\n      if (i) {\r\n        this.selected = i;\r\n        // console.log('RaycasterService.mouseEnter', i);\r\n        this.selected.dispatchEvent({type: 'mouseEnter'});\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  private onMouseDown(event) {\r\n    if (!this.isReady(true)) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    const i = this.getFirstIntersectedGroup(event.layerX, event.layerY);\r\n    if (i) {\r\n      i.dispatchEvent({type: 'mouseDown'});\r\n    }\r\n  }\r\n\r\n\r\n  private onTouchStart(event: TouchEvent) {\r\n    // console.log(event);\r\n    if (!this.isReady()) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    const i = this.getFirstIntersectedGroup(event.touches[0].clientX, event.touches[0].clientY);\r\n    if (i) {\r\n      i.dispatchEvent({type: 'mouseDown'});\r\n    }\r\n  }\r\n\r\n  private isReady(ignorePaused?: boolean) {\r\n    return this.enabled\r\n      && (ignorePaused || !this.paused)\r\n      && this.camera\r\n      && this.camera.camera\r\n      && this.groups\r\n      && this.groups.length > 0;\r\n  }\r\n\r\n  private getFirstIntersectedGroup(x, y): THREE.Object3D {\r\n    x = (x / window.innerWidth) * 2 - 1;\r\n    y = -(y / window.innerHeight) * 2 + 1;\r\n    const mouseVector = new THREE.Vector3(x, y, 0.5);\r\n    this.raycaster.setFromCamera(mouseVector, this.camera.camera);\r\n\r\n    // loop across all groups. Try to find the group with nearest distance.\r\n    let nearestIntersection: Intersection;\r\n    let nearestGroup: THREE.Object3D;\r\n    for (let k = 0; k < this.groups.length; k++) {\r\n      const i = this.groups[k].getObject();\r\n      const intersection = this.raycaster.intersectObject(i, true);\r\n      if (intersection.length > 0 && (!nearestIntersection || nearestIntersection.distance > intersection[0].distance)) {\r\n        nearestIntersection = intersection[0];\r\n        nearestGroup = i;\r\n      }\r\n    }\r\n\r\n    // return the group with nearest distance\r\n    if (nearestGroup) {\r\n      return nearestGroup;\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n}\r\n","import {AfterViewInit, Component, ElementRef, HostListener, ViewChild} from '@angular/core';\r\nimport {RendererService} from './renderer.service';\r\n\r\n@Component({\r\n  selector: 'atft-renderer-canvas',\r\n  templateUrl: './renderer-canvas.component.html',\r\n  styleUrls: ['./renderer-canvas.component.scss']\r\n})\r\nexport class RendererCanvasComponent implements AfterViewInit {\r\n\r\n  @ViewChild('canvas', {static: true})\r\n  private canvasRef: ElementRef;\r\n\r\n  constructor(\r\n    private rendererService: RendererService\r\n  ) {\r\n    // console.log('RendererComponent.constructor');\r\n    this.onResize = this.onResize.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // console.log('RendererComponent.ngAfterViewInit');\r\n    this.rendererService.initialize(this.canvas);\r\n  }\r\n\r\n  /**\r\n   * The render pane on which the scene is rendered.\r\n   * Currently, only the WebGL renderer with a canvas is used in this\r\n   * implementation, so this property will always be an ElementRef to the\r\n   * underlying <canvas> element.\r\n   *\r\n   * @example This property can be used to restrict the orbit control (i.e. the\r\n   * area which is listened for mouse move and zoom events) to the rendering pane\r\n   */\r\n  public get renderPane(): ElementRef {\r\n    return this.canvasRef;\r\n  }\r\n\r\n  private get canvas(): HTMLCanvasElement {\r\n    return this.canvasRef.nativeElement;\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  public onResize(event: Event) {\r\n    // strange, but single 100% resizing has unexpected behaviour with flex CSS\r\n    // as workaround - resettling to 100 pixels, then to 100%\r\n    this.rendererService.resize(this.canvas, '100px');\r\n    this.rendererService.resize(this.canvas, '100%');\r\n  }\r\n\r\n}\r\n","import {AfterViewInit, ContentChild, ContentChildren, ElementRef, OnChanges, OnDestroy, QueryList, SimpleChanges} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\r\nimport {AbstractCamera} from '../camera/abstract-camera';\r\nimport {RendererService} from '../renderer/renderer.service';\r\nimport {RaycasterService} from '../raycaster/raycaster.service';\r\nimport {RendererCanvasComponent} from '../renderer/renderer-canvas.component';\r\n\r\n\r\nexport abstract class AbstractOrbitControls<T extends OrbitControls> implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n  @ContentChildren(AbstractCamera, {descendants: true}) childCameras: QueryList<AbstractCamera<THREE.Camera>>;\r\n  @ContentChild(RendererCanvasComponent, {static: false}) webGlRenderer: RendererCanvasComponent;\r\n  /**\r\n   * The element on whose native element the orbit control will listen for mouse events.\r\n   *\r\n   * Note that keyboard events are still listened for on the global window object, this is\r\n   * a known issue from Three.js: https://github.com/mrdoob/three.js/pull/10315\r\n   */\r\n  protected listeningControlElement: ElementRef;\r\n\r\n  protected controls: T;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService,\r\n    protected raycasterService: RaycasterService\r\n  ) {\r\n    // console.log('OrbitControlsComponent.constructor');\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // If the THREE.js OrbitControls are not set up yet, we do not need to update\r\n    // anything as they will pick the new values from the @Input properties automatically\r\n    // upon creation.\r\n    if (!this.controls) {\r\n      return;\r\n    }\r\n\r\n    if (changes['listeningControlElement']) {\r\n      // The DOM element the OrbitControls listen on cannot be changed once an\r\n      // OrbitControls object is created. We thus need to recreate it.\r\n      this.controls.dispose();\r\n      this.setUpControls();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.controls) {\r\n      this.controls.dispose();\r\n    }\r\n  }\r\n\r\n  protected abstract setUpControls();\r\n\r\n\r\n  private configureListeners() {\r\n    this.controls.addEventListener('change', () => {\r\n      this.rendererService.render();\r\n    });\r\n\r\n    // don't raycast during rotation/damping/panning\r\n    if (this.raycasterService.isEnabled) {\r\n      this.controls.addEventListener('start', () => {\r\n        this.raycasterService.pause();\r\n      });\r\n      this.controls.addEventListener('end', () => {\r\n        this.raycasterService.resume();\r\n      });\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // console.log('OrbitControlsComponent.ngAfterViewInit');\r\n    if (this.childCameras === undefined || this.childCameras.first === undefined) {\r\n      throw new Error('Camera is not found');\r\n    }\r\n    if (!this.webGlRenderer) {\r\n      throw new Error('webGlRenderer is not found');\r\n    }\r\n    this.listeningControlElement = this.webGlRenderer.renderPane;\r\n    this.setUpControls();\r\n    this.configureListeners();\r\n    this.rendererService.render();\r\n  }\r\n\r\n}\r\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\r\nimport {RendererService} from '../renderer/renderer.service';\r\nimport {RaycasterService} from '../raycaster/raycaster.service';\r\nimport {AbstractOrbitControls} from './abstract-orbit-controls';\r\n\r\n@Component({\r\n  selector: 'atft-orbit-controls',\r\n  template: `\r\n      <ng-content></ng-content>`,\r\n  styleUrls: ['controls.component.scss']\r\n})\r\nexport class OrbitControlsComponent extends AbstractOrbitControls<OrbitControls> implements OnChanges {\r\n\r\n  @Input() rotateSpeed = 1.0;\r\n  @Input() zoomSpeed = 1.2;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService,\r\n    protected raycasterService: RaycasterService\r\n  ) {\r\n    super(rendererService, raycasterService);\r\n  }\r\n\r\n  protected setUpControls() {\r\n    this.controls = new OrbitControls(\r\n      this.childCameras.first.camera,\r\n      this.listeningControlElement && this.listeningControlElement.nativeElement\r\n    );\r\n    this.controls.rotateSpeed = this.rotateSpeed;\r\n    this.controls.zoomSpeed = this.zoomSpeed;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.controls) {\r\n      return;\r\n    }\r\n    super.ngOnChanges(changes);\r\n\r\n    if (changes['rotateSpeed']) {\r\n      this.controls.rotateSpeed = this.rotateSpeed;\r\n    }\r\n    if (changes['zoomSpeed']) {\r\n      this.controls.zoomSpeed = this.zoomSpeed;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport {MapControls, OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\r\nimport {RendererService} from '../renderer/renderer.service';\r\nimport {AnimationService} from '../animation/animation.service';\r\nimport {RaycasterService} from '../raycaster/raycaster.service';\r\nimport {AbstractOrbitControls} from './abstract-orbit-controls';\r\n\r\n@Component({\r\n  selector: 'atft-map-controls',\r\n  template: `\r\n      <ng-content></ng-content>`,\r\n  styleUrls: ['controls.component.scss']\r\n})\r\nexport class MapControlsComponent extends AbstractOrbitControls<OrbitControls> implements OnChanges {\r\n\r\n  @Input() rotateSpeed = 1.0;\r\n\r\n  @Input() zoomSpeed = 1.2;\r\n\r\n  @Input() autoRotate = false;\r\n\r\n  @Input() autoRotateSpeed = 0.5;\r\n\r\n  @Input() enableDamping = false;\r\n\r\n  @Input() dampingFactor = 0.1;\r\n\r\n  @Input() screenSpacePanning = false;\r\n\r\n  @Input() minDistance = 20;\r\n\r\n  @Input() maxDistance = 200;\r\n\r\n  @Input() maxPolarAngle: number = Math.PI / 2 - 0.1;\r\n\r\n  @Input() panSpeed = 1.2;\r\n\r\n  constructor(\r\n    protected rendererService: RendererService,\r\n    protected raycasterService: RaycasterService,\r\n    protected animationService: AnimationService\r\n  ) {\r\n    super(rendererService, raycasterService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.controls) {\r\n      return;\r\n    }\r\n    super.ngOnChanges(changes);\r\n\r\n    if (changes['rotateSpeed']) {\r\n      this.controls.rotateSpeed = this.rotateSpeed;\r\n    }\r\n    if (changes['zoomSpeed']) {\r\n      this.controls.zoomSpeed = this.zoomSpeed;\r\n    }\r\n    // TODO: add others\r\n  }\r\n\r\n  protected setUpControls() {\r\n    this.controls = new MapControls(\r\n      this.childCameras.first.camera,\r\n      this.listeningControlElement && this.listeningControlElement.nativeElement\r\n    );\r\n    this.controls.rotateSpeed = this.rotateSpeed;\r\n    this.controls.zoomSpeed = this.zoomSpeed;\r\n\r\n    this.controls.panSpeed = this.panSpeed;\r\n\r\n    this.controls.autoRotate = this.autoRotate;\r\n    this.controls.autoRotateSpeed = this.autoRotateSpeed;\r\n    this.controls.enableDamping = this.enableDamping; // an animation loop is required when either damping or auto-rotation are enabled\r\n    this.controls.dampingFactor = this.dampingFactor;\r\n\r\n    this.controls.screenSpacePanning = this.screenSpacePanning;\r\n    this.controls.minDistance = this.minDistance;\r\n    this.controls.maxDistance = this.maxDistance;\r\n    this.controls.maxPolarAngle = this.maxPolarAngle;\r\n\r\n    this.controls.update();\r\n\r\n    // Advanced animation:\r\n    if (this.autoRotate || this.enableDamping) {\r\n      this.animationService.animate.subscribe(() => {\r\n        this.controls.update();\r\n      });\r\n      this.controls.addEventListener('change', () => {\r\n        this.rendererService.render();\r\n      });\r\n      this.animationService.start();\r\n    }\r\n\r\n    this.rendererService.render();\r\n  }\r\n\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OrbitControlsComponent} from './orbit-controls.component';\r\nimport {MapControlsComponent} from './map-controls.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    OrbitControlsComponent,\r\n    MapControlsComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    OrbitControlsComponent,\r\n    MapControlsComponent\r\n  ]\r\n})\r\nexport class AtftControlModule {\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'deg2rad'\r\n})\r\nexport class Deg2RadPipe implements PipeTransform {\r\n\r\n  /**\r\n   * Converts degrees to radians\r\n   * @param degree Degrees\r\n   */\r\n  transform(degrees: number): number {\r\n    return (degrees / 180) * Math.PI;\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'rad2deg'\r\n})\r\nexport class Rad2DegPipe implements PipeTransform {\r\n\r\n  /**\r\n   * Converts radians to degrees\r\n   * @param radians Radians\r\n   */\r\n  transform(radians: number): number {\r\n    return radians * (180 / Math.PI);\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {Deg2RadPipe} from './deg2rad.pipe';\r\nimport {Rad2DegPipe} from './rad2deg.pipe';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    Deg2RadPipe,\r\n    Rad2DegPipe\r\n  ],\r\n  exports: [\r\n    Deg2RadPipe,\r\n    Rad2DegPipe\r\n  ]\r\n})\r\nexport class AtftPipeModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {RendererCanvasComponent} from './renderer-canvas.component';\r\nimport {CommonModule} from '@angular/common';\r\nimport {RendererService} from './renderer.service';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    RendererCanvasComponent\r\n  ],\r\n  providers: [\r\n    RendererService\r\n  ],\r\n  exports: [\r\n    RendererCanvasComponent\r\n  ]\r\n})\r\nexport class AtftRendererModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {AnimationService} from './animation.service';\r\n\r\n\r\n@NgModule({\r\n  providers: [\r\n    AnimationService\r\n  ]\r\n})\r\nexport class AtftAnimationModule {\r\n}\r\n","import {AfterViewInit, Directive, EventEmitter, OnDestroy, Output} from '@angular/core';\r\nimport {AbstractObject3D} from '../object/abstract-object-3d';\r\nimport {RaycasterService} from './raycaster.service';\r\n\r\n/**\r\n * Only components marked as atft-raycaster-group emit raycaster events.\r\n * NOTE: All childs are also considered by raycaster (very usefull, for composite components).\r\n */\r\n@Directive({selector: '[atft-raycaster-group]'})\r\nexport class RaycasterGroupDirective implements AfterViewInit, OnDestroy {\r\n\r\n  @Output() mouseEnter = new EventEmitter<void>();\r\n  @Output() mouseExit = new EventEmitter<void>();\r\n  @Output() mouseDown = new EventEmitter<void>();\r\n\r\n  constructor(\r\n    private host: AbstractObject3D<any>,\r\n    private raycasterService: RaycasterService\r\n  ) {\r\n    this.onMouseEnter = this.onMouseEnter.bind(this);\r\n    this.onMouseExit = this.onMouseExit.bind(this);\r\n    this.onMouseDown = this.onMouseDown.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.raycasterService.addGroup(this.host);\r\n    this.subscribeEvents();\r\n  }\r\n\r\n  private subscribeEvents() {\r\n    const obj = this.host.getObject();\r\n    obj.addEventListener('mouseEnter', this.onMouseEnter);\r\n    obj.addEventListener('mouseExit', this.onMouseExit);\r\n    obj.addEventListener('mouseDown', this.onMouseDown);\r\n  }\r\n\r\n  private unSubscribeEvents() {\r\n    const obj = this.host.getObject();\r\n    obj.removeEventListener('mouseEnter', this.onMouseEnter);\r\n    obj.removeEventListener('mouseExit', this.onMouseExit);\r\n    obj.removeEventListener('mouseDown', this.onMouseDown);\r\n  }\r\n\r\n  private onMouseExit() {\r\n    this.mouseExit.emit();\r\n  }\r\n\r\n  private onMouseEnter() {\r\n    this.mouseEnter.emit();\r\n  }\r\n\r\n  private onMouseDown() {\r\n    this.mouseDown.emit();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unSubscribeEvents();\r\n  }\r\n\r\n}\r\n","import {AfterViewInit, Directive} from '@angular/core';\r\nimport {AbstractCamera} from '../camera/abstract-camera';\r\nimport {RaycasterService} from './raycaster.service';\r\n\r\n@Directive({selector: '[atft-raycaster-camera]'})\r\nexport class RaycasterCameraDirective implements AfterViewInit {\r\n\r\n  constructor(\r\n    private host: AbstractCamera<any>,\r\n    private raycasterService: RaycasterService\r\n  ) {\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.raycasterService.setCamera(this.host);\r\n  }\r\n\r\n}\r\n","import {AfterViewInit, Directive} from '@angular/core';\r\nimport {RaycasterService} from './raycaster.service';\r\n\r\n@Directive({selector: '[atft-raycaster-enable]'})\r\nexport class RaycasterEnableDirective implements AfterViewInit {\r\n\r\n  constructor(\r\n    private raycasterService: RaycasterService\r\n  ) {\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.raycasterService.enable();\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {RaycasterGroupDirective} from './raycaster-group.directive';\r\nimport {RaycasterService} from './raycaster.service';\r\nimport {RaycasterCameraDirective} from './raycaster-camera.directive';\r\nimport {RaycasterEnableDirective} from './raycaster-enable.directive';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    RaycasterGroupDirective,\r\n    RaycasterCameraDirective,\r\n    RaycasterEnableDirective\r\n  ],\r\n  providers: [\r\n    RaycasterService\r\n  ],\r\n  exports: [\r\n    RaycasterGroupDirective,\r\n    RaycasterCameraDirective,\r\n    RaycasterEnableDirective\r\n  ]\r\n})\r\nexport class AtftRaycasterModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {AtftCameraModule} from './camera/atft-camera.module';\r\nimport {AtftObjectModule} from './object/atft-object.module';\r\nimport {AtftControlModule} from './control/atft-control.module';\r\nimport {AtftPipeModule} from './pipe/atft-pipe.module';\r\nimport {AtftRendererModule} from './renderer/atft-renderer.module';\r\nimport {AtftAnimationModule} from './animation/atft-animation.module';\r\nimport {AtftRaycasterModule} from './raycaster/atft-raycaster.module';\r\n\r\n// NOTE: In case of \"ERROR in Unexpected value 'undefined' exported by the module 'AtftModule\" fix imports (do not import index.ts)\r\n\r\n@NgModule({\r\n  imports: [\r\n    AtftCameraModule,\r\n    AtftObjectModule,\r\n    AtftControlModule,\r\n    AtftPipeModule,\r\n    AtftRendererModule,\r\n    AtftAnimationModule,\r\n    AtftRaycasterModule\r\n  ],\r\n  exports: [\r\n    AtftCameraModule,\r\n    AtftObjectModule,\r\n    AtftControlModule,\r\n    AtftPipeModule,\r\n    AtftRendererModule,\r\n    AtftAnimationModule,\r\n    AtftRaycasterModule\r\n  ]\r\n})\r\nexport class AtftModule {\r\n}\r\n","import {Injectable} from '@angular/core';\r\n\r\nexport interface StatsResults {\r\n  ms: number;\r\n  count: number;\r\n  callsPerSecond: number;\r\n}\r\n\r\n@Injectable()\r\nexport class StatsService {\r\n\r\n  private lastTime: number;\r\n  private ms = 0;\r\n  private count = 0;\r\n\r\n  start() {\r\n    this.lastTime = Date.now();\r\n  }\r\n\r\n  end() {\r\n    const deltaMs = Date.now() - this.lastTime;\r\n    this.ms += deltaMs;\r\n    this.count++;\r\n  }\r\n\r\n  getStats(): StatsResults {\r\n    return {\r\n      ms: this.ms,\r\n      count: this.count,\r\n      callsPerSecond: Math.round(this.count / (this.ms / 1000))\r\n    };\r\n  }\r\n\r\n  reset() {\r\n    this.ms = 0;\r\n    this.count = 0;\r\n  }\r\n\r\n}\r\n"]}