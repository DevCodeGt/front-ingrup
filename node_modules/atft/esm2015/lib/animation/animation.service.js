/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Injectable } from '@angular/core';
import { RendererService } from '../renderer/renderer.service';
/**
 * Animation service emits animate event, which should be used by animated components for animation logic.
 * NOTE: this service is for the performance optimization: requestAnimationFrame and render is called once.
 */
export class AnimationService {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        this.rendererService = rendererService;
        /**
         * Subscribe for animation frame creation (change position and etc.)
         * Avoid render() execution, it's called only once when all components updated animation frame.
         */
        this.animate = new EventEmitter();
        this.enabled = false;
        this.animationStep = this.animationStep.bind(this);
    }
    /**
     * Start the animation loop.
     * @return {?}
     */
    start() {
        if (!this.enabled) {
            this.enabled = true;
            this.animationStep();
        }
    }
    /**
     * Stop all animations.
     * @return {?}
     */
    stop() {
        if (this.enabled) {
            this.enabled = false;
        }
    }
    /**
     * @private
     * @return {?}
     */
    animationStep() {
        if (this.enabled) {
            requestAnimationFrame(this.animationStep);
            if (this.animate.observers.length > 0) {
                this.animate.emit();
                /**
                 * When all components updated animation, render event is emitted.
                 * Main renderer subscribed to this event emitter.
                 */
                this.rendererService.render();
            }
        }
    }
}
AnimationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AnimationService.ctorParameters = () => [
    { type: RendererService }
];
if (false) {
    /**
     * Subscribe for animation frame creation (change position and etc.)
     * Avoid render() execution, it's called only once when all components updated animation frame.
     * @type {?}
     */
    AnimationService.prototype.animate;
    /**
     * @type {?}
     * @private
     */
    AnimationService.prototype.enabled;
    /**
     * @type {?}
     * @private
     */
    AnimationService.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL2FuaW1hdGlvbi9hbmltYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBRSxVQUFVLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQzs7Ozs7QUFRN0QsTUFBTSxPQUFPLGdCQUFnQjs7OztJQVUzQixZQUNVLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjs7Ozs7UUFMakMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFFcEMsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUt0QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JELENBQUM7Ozs7O0lBS00sS0FBSztRQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN0QjtJQUNILENBQUM7Ozs7O0lBS00sSUFBSTtRQUNULElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztTQUN0QjtJQUNILENBQUM7Ozs7O0lBRU8sYUFBYTtRQUNuQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIscUJBQXFCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDcEI7OzttQkFHRztnQkFDSCxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQy9CO1NBQ0Y7SUFDSCxDQUFDOzs7WUFoREYsVUFBVTs7OztZQVBILGVBQWU7Ozs7Ozs7O0lBY3JCLG1DQUE0Qzs7Ozs7SUFFNUMsbUNBQXdCOzs7OztJQUd0QiwyQ0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0V2ZW50RW1pdHRlciwgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIFNraXBTZWxmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtSZW5kZXJlclNlcnZpY2V9IGZyb20gJy4uL3JlbmRlcmVyL3JlbmRlcmVyLnNlcnZpY2UnO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBBbmltYXRpb24gc2VydmljZSBlbWl0cyBhbmltYXRlIGV2ZW50LCB3aGljaCBzaG91bGQgYmUgdXNlZCBieSBhbmltYXRlZCBjb21wb25lbnRzIGZvciBhbmltYXRpb24gbG9naWMuXHJcbiAqIE5PVEU6IHRoaXMgc2VydmljZSBpcyBmb3IgdGhlIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbjogcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGFuZCByZW5kZXIgaXMgY2FsbGVkIG9uY2UuXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBbmltYXRpb25TZXJ2aWNlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogU3Vic2NyaWJlIGZvciBhbmltYXRpb24gZnJhbWUgY3JlYXRpb24gKGNoYW5nZSBwb3NpdGlvbiBhbmQgZXRjLilcclxuICAgKiBBdm9pZCByZW5kZXIoKSBleGVjdXRpb24sIGl0J3MgY2FsbGVkIG9ubHkgb25jZSB3aGVuIGFsbCBjb21wb25lbnRzIHVwZGF0ZWQgYW5pbWF0aW9uIGZyYW1lLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGFuaW1hdGUgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcblxyXG4gIHByaXZhdGUgZW5hYmxlZCA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2VcclxuICApIHtcclxuICAgIHRoaXMuYW5pbWF0aW9uU3RlcCA9IHRoaXMuYW5pbWF0aW9uU3RlcC5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RhcnQgdGhlIGFuaW1hdGlvbiBsb29wLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGFydCgpIHtcclxuICAgIGlmICghdGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uU3RlcCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RvcCBhbGwgYW5pbWF0aW9ucy5cclxuICAgKi9cclxuICBwdWJsaWMgc3RvcCgpIHtcclxuICAgIGlmICh0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFuaW1hdGlvblN0ZXAoKSB7XHJcbiAgICBpZiAodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGlvblN0ZXApO1xyXG4gICAgICBpZiAodGhpcy5hbmltYXRlLm9ic2VydmVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdGhpcy5hbmltYXRlLmVtaXQoKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXaGVuIGFsbCBjb21wb25lbnRzIHVwZGF0ZWQgYW5pbWF0aW9uLCByZW5kZXIgZXZlbnQgaXMgZW1pdHRlZC5cclxuICAgICAgICAgKiBNYWluIHJlbmRlcmVyIHN1YnNjcmliZWQgdG8gdGhpcyBldmVudCBlbWl0dGVyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXJTZXJ2aWNlLnJlbmRlcigpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=