/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef } from '@angular/core';
import { AbstractObject3D } from '../abstract-object-3d';
import { AbstractModelLoader } from './abstract-model-loader';
import * as THREE from 'three';
import { RendererService } from '../../renderer/renderer.service';
export class ObjectLoaderComponent extends AbstractModelLoader {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        super(rendererService);
        this.rendererService = rendererService;
        this.loader = new THREE.ObjectLoader();
    }
    /**
     * @protected
     * @return {?}
     */
    loadLazyObject() {
        return tslib_1.__awaiter(this, void 0, void 0, /** @this {!ObjectLoaderComponent} */ function* () {
            // console.log('ObjectLoaderComponent.loadLazyObject');
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            (resolve, reject) => {
                this.loader.load(this.model, (/**
                 * @param {?} model
                 * @return {?}
                 */
                model => {
                    // BUG #95: it seems that some textures loaded after last render (and model has black texture instead)
                    resolve(model);
                }), undefined, reject);
            }));
        });
    }
}
ObjectLoaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'atft-object-loader',
                providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ObjectLoaderComponent)) }],
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
ObjectLoaderComponent.ctorParameters = () => [
    { type: RendererService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ObjectLoaderComponent.prototype.loader;
    /**
     * @type {?}
     * @protected
     */
    ObjectLoaderComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LWxvYWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL29iamVjdC9sb2FkZXIvb2JqZWN0LWxvYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUU1RCxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFPaEUsTUFBTSxPQUFPLHFCQUFzQixTQUFRLG1CQUFtQjs7OztJQUc1RCxZQUNZLGVBQWdDO1FBRTFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUZiLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUhwQyxXQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7SUFNMUMsQ0FBQzs7Ozs7SUFFZSxjQUFjOztZQUM1Qix1REFBdUQ7WUFDdkQsT0FBTyxJQUFJLE9BQU87Ozs7O1lBQWlCLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO2dCQUNyRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSzs7OztnQkFBRSxLQUFLLENBQUMsRUFBRTtvQkFDakMsc0dBQXNHO29CQUN0RyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2pCLENBQUMsR0FDRCxTQUFTLEVBQ1QsTUFBTSxDQUNQLENBQUM7WUFDSixDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUM7S0FBQTs7O1lBekJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLHFCQUFxQixFQUFDLEVBQUUsQ0FBQztnQkFDaEcsUUFBUSxFQUFFLDJCQUEyQjthQUN0Qzs7OztZQU5PLGVBQWU7Ozs7Ozs7SUFRckIsdUNBQTBDOzs7OztJQUd4QyxnREFBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgZm9yd2FyZFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7QWJzdHJhY3RPYmplY3QzRH0gZnJvbSAnLi4vYWJzdHJhY3Qtb2JqZWN0LTNkJztcclxuaW1wb3J0IHtBYnN0cmFjdE1vZGVsTG9hZGVyfSBmcm9tICcuL2Fic3RyYWN0LW1vZGVsLWxvYWRlcic7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCB7UmVuZGVyZXJTZXJ2aWNlfSBmcm9tICcuLi8uLi9yZW5kZXJlci9yZW5kZXJlci5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXRmdC1vYmplY3QtbG9hZGVyJyxcclxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IEFic3RyYWN0T2JqZWN0M0QsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE9iamVjdExvYWRlckNvbXBvbmVudCkgfV0sXHJcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgT2JqZWN0TG9hZGVyQ29tcG9uZW50IGV4dGVuZHMgQWJzdHJhY3RNb2RlbExvYWRlciB7XHJcbiAgcHJpdmF0ZSBsb2FkZXIgPSBuZXcgVEhSRUUuT2JqZWN0TG9hZGVyKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIHJlbmRlcmVyU2VydmljZTogUmVuZGVyZXJTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICBzdXBlcihyZW5kZXJlclNlcnZpY2UpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGFzeW5jIGxvYWRMYXp5T2JqZWN0KCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ09iamVjdExvYWRlckNvbXBvbmVudC5sb2FkTGF6eU9iamVjdCcpO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFRIUkVFLk9iamVjdDNEPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRoaXMubG9hZGVyLmxvYWQodGhpcy5tb2RlbCwgbW9kZWwgPT4ge1xyXG4gICAgICAgICAgLy8gQlVHICM5NTogaXQgc2VlbXMgdGhhdCBzb21lIHRleHR1cmVzIGxvYWRlZCBhZnRlciBsYXN0IHJlbmRlciAoYW5kIG1vZGVsIGhhcyBibGFjayB0ZXh0dXJlIGluc3RlYWQpXHJcbiAgICAgICAgICByZXNvbHZlKG1vZGVsKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICByZWplY3RcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuIl19