/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { AbstractLazyObject3D } from '../abstract-lazy-object-3d';
/**
 * Helper parent class for model loader.
 *
 * @see ObjLoaderComponent
 * @abstract
 */
export class AbstractModelLoader extends AbstractLazyObject3D {
    /**
     * The model data source (usually a URI).
     * Settings this property only hides the previous model upon successful
     * loading of the new one. This especially means that if the new data source
     * is invalid, the old model will *not* be removed from the scene.
     * @param {?} newModelUrl
     * @return {?}
     */
    set model(newModelUrl) {
        if (this._model !== newModelUrl) {
            this._model = newModelUrl;
            super.startLoading();
        }
    }
    /**
     * The current model data source (usually a URI).
     * @return {?}
     */
    get model() {
        return this._model;
    }
}
AbstractModelLoader.propDecorators = {
    model: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AbstractModelLoader.prototype._model;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtbW9kZWwtbG9hZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXRmdC8iLCJzb3VyY2VzIjpbImxpYi9vYmplY3QvbG9hZGVyL2Fic3RyYWN0LW1vZGVsLWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNwQyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQzs7Ozs7OztBQU9oRSxNQUFNLE9BQWdCLG1CQUFvQixTQUFRLG9CQUFvQjs7Ozs7Ozs7O0lBVXBFLElBQ1csS0FBSyxDQUFDLFdBQW1CO1FBQ2xDLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxXQUFXLEVBQUU7WUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUM7WUFDMUIsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQzs7Ozs7SUFLRCxJQUFXLEtBQUs7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7O29CQWJBLEtBQUs7Ozs7Ozs7SUFSTixxQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtBYnN0cmFjdExhenlPYmplY3QzRH0gZnJvbSAnLi4vYWJzdHJhY3QtbGF6eS1vYmplY3QtM2QnO1xyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBwYXJlbnQgY2xhc3MgZm9yIG1vZGVsIGxvYWRlci5cclxuICpcclxuICogQHNlZSBPYmpMb2FkZXJDb21wb25lbnRcclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdE1vZGVsTG9hZGVyIGV4dGVuZHMgQWJzdHJhY3RMYXp5T2JqZWN0M0Qge1xyXG5cclxuICBwcm90ZWN0ZWQgX21vZGVsOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBtb2RlbCBkYXRhIHNvdXJjZSAodXN1YWxseSBhIFVSSSkuXHJcbiAgICogU2V0dGluZ3MgdGhpcyBwcm9wZXJ0eSBvbmx5IGhpZGVzIHRoZSBwcmV2aW91cyBtb2RlbCB1cG9uIHN1Y2Nlc3NmdWxcclxuICAgKiBsb2FkaW5nIG9mIHRoZSBuZXcgb25lLiBUaGlzIGVzcGVjaWFsbHkgbWVhbnMgdGhhdCBpZiB0aGUgbmV3IGRhdGEgc291cmNlXHJcbiAgICogaXMgaW52YWxpZCwgdGhlIG9sZCBtb2RlbCB3aWxsICpub3QqIGJlIHJlbW92ZWQgZnJvbSB0aGUgc2NlbmUuXHJcbiAgICovXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgc2V0IG1vZGVsKG5ld01vZGVsVXJsOiBzdHJpbmcpIHtcclxuICAgIGlmICh0aGlzLl9tb2RlbCAhPT0gbmV3TW9kZWxVcmwpIHtcclxuICAgICAgdGhpcy5fbW9kZWwgPSBuZXdNb2RlbFVybDtcclxuICAgICAgc3VwZXIuc3RhcnRMb2FkaW5nKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGUgY3VycmVudCBtb2RlbCBkYXRhIHNvdXJjZSAodXN1YWxseSBhIFVSSSkuXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBtb2RlbCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9tb2RlbDtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==