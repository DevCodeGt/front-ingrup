/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import { AbstractObject3D } from '../abstract-object-3d';
import { AbstractModelLoader } from './abstract-model-loader';
import { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader';
import * as THREE from 'three';
import { appliedColor, appliedMaterial } from '../../util';
import { fixCenter } from '../../util/fix-center';
import { scaleToFit } from '../../util/scale-to-fit';
import { RendererService } from '../../renderer/renderer.service';
export class SVGLoaderComponent extends AbstractModelLoader {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        super(rendererService);
        this.rendererService = rendererService;
        this._overrideMaterialColor = undefined;
        this.material = 'basic';
        this.depthWrite = true;
        this.centered = true;
        this.loader = new SVGLoader();
    }
    /**
     * @return {?}
     */
    get overrideMaterialColor() {
        return this._overrideMaterialColor;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set overrideMaterialColor(value) {
        this._overrideMaterialColor = value;
        this.startLoading();
    }
    /**
     * @protected
     * @return {?}
     */
    loadLazyObject() {
        return tslib_1.__awaiter(this, void 0, void 0, /** @this {!SVGLoaderComponent} */ function* () {
            // console.log('ObjectLoaderComponent.loadLazyObject');
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            (resolve, reject) => {
                this.loader.load(this.model, (/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    /** @type {?} */
                    const paths = data.paths;
                    /** @type {?} */
                    const group = new THREE.Group();
                    for (let i = 0; i < paths.length; i++) {
                        // NOTE: It seems that ShapePath does not includes typed color, cast to any as workaround
                        /** @type {?} */
                        const path = paths[i];
                        /** @type {?} */
                        const color = (this._overrideMaterialColor ? appliedColor(this._overrideMaterialColor) : path.color);
                        /** @type {?} */
                        const material = appliedMaterial(color, this.material, this.depthWrite);
                        /** @type {?} */
                        const shapes = path.toShapes(true, {});
                        for (let j = 0; j < shapes.length; j++) {
                            /** @type {?} */
                            const shape = shapes[j];
                            /** @type {?} */
                            const geometry = new THREE.ShapeBufferGeometry(shape);
                            /** @type {?} */
                            const mesh = new THREE.Mesh(geometry, material);
                            group.add(mesh);
                        }
                    }
                    if (this.maxX || this.maxY) {
                        scaleToFit(group, new THREE.Vector3(this.maxX, this.maxY, 0));
                    }
                    if (this.centered) {
                        fixCenter(group);
                    }
                    resolve(group);
                }), undefined, reject);
            }));
        });
    }
}
SVGLoaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'atft-svg-loader',
                providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => SVGLoaderComponent)) }],
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
SVGLoaderComponent.ctorParameters = () => [
    { type: RendererService }
];
SVGLoaderComponent.propDecorators = {
    overrideMaterialColor: [{ type: Input }],
    material: [{ type: Input }],
    depthWrite: [{ type: Input }],
    maxX: [{ type: Input }],
    maxY: [{ type: Input }],
    centered: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    SVGLoaderComponent.prototype._overrideMaterialColor;
    /** @type {?} */
    SVGLoaderComponent.prototype.material;
    /** @type {?} */
    SVGLoaderComponent.prototype.depthWrite;
    /** @type {?} */
    SVGLoaderComponent.prototype.maxX;
    /** @type {?} */
    SVGLoaderComponent.prototype.maxY;
    /** @type {?} */
    SVGLoaderComponent.prototype.centered;
    /**
     * @type {?}
     * @private
     */
    SVGLoaderComponent.prototype.loader;
    /**
     * @type {?}
     * @protected
     */
    SVGLoaderComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWxvYWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL29iamVjdC9sb2FkZXIvc3ZnLWxvYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDdkQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDNUQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBRS9ELE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBQyxZQUFZLEVBQUUsZUFBZSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ3pELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDbkQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBT2hFLE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxtQkFBbUI7Ozs7SUFnQ3pELFlBQ1ksZUFBZ0M7UUFFMUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRmIsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBckJwQywyQkFBc0IsR0FBVyxTQUFTLENBQUM7UUFJbkQsYUFBUSxHQUFHLE9BQU8sQ0FBQztRQUduQixlQUFVLEdBQUcsSUFBSSxDQUFDO1FBU2xCLGFBQVEsR0FBRyxJQUFJLENBQUM7UUFFUixXQUFNLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztJQU1qQyxDQUFDOzs7O0lBbENELElBQ0kscUJBQXFCO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDO0lBQ3JDLENBQUM7Ozs7O0lBRUQsSUFBSSxxQkFBcUIsQ0FBQyxLQUFhO1FBQ3JDLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxLQUFLLENBQUM7UUFDcEMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBNEJlLGNBQWM7O1lBQzVCLHVEQUF1RDtZQUN2RCxPQUFPLElBQUksT0FBTzs7Ozs7WUFBaUIsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7Z0JBQ3JELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLOzs7O2dCQUFFLElBQUksQ0FBQyxFQUFFOzswQkFDMUIsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLOzswQkFDbEIsS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtvQkFFL0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Ozs4QkFFL0IsSUFBSSxHQUFRLEtBQUssQ0FBQyxDQUFDLENBQUM7OzhCQUNwQixLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQzs7OEJBQzlGLFFBQVEsR0FBRyxlQUFlLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQzs7OEJBQ2pFLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7d0JBRXRDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztrQ0FDaEMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7O2tDQUNqQixRQUFRLEdBQUcsSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDOztrQ0FDL0MsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDOzRCQUMvQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO3lCQUNqQjtxQkFDRjtvQkFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTt3QkFDMUIsVUFBVSxDQUFDLEtBQUssRUFBRSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQy9EO29CQUNELElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTt3QkFDakIsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO3FCQUNsQjtvQkFFRCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2pCLENBQUMsR0FDRCxTQUFTLEVBQ1QsTUFBTSxDQUFDLENBQUM7WUFDWixDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUM7S0FBQTs7O1lBN0VGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixFQUFDLEVBQUMsQ0FBQztnQkFDM0YsUUFBUSxFQUFFLDJCQUEyQjthQUN0Qzs7OztZQU5PLGVBQWU7OztvQ0FTcEIsS0FBSzt1QkFhTCxLQUFLO3lCQUdMLEtBQUs7bUJBR0wsS0FBSzttQkFHTCxLQUFLO3VCQUdMLEtBQUs7Ozs7Ozs7SUFmTixvREFBbUQ7O0lBR25ELHNDQUNtQjs7SUFFbkIsd0NBQ2tCOztJQUVsQixrQ0FDYTs7SUFFYixrQ0FDYTs7SUFFYixzQ0FDZ0I7Ozs7O0lBRWhCLG9DQUFpQzs7Ozs7SUFHL0IsNkNBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtBYnN0cmFjdE9iamVjdDNEfSBmcm9tICcuLi9hYnN0cmFjdC1vYmplY3QtM2QnO1xyXG5pbXBvcnQge0Fic3RyYWN0TW9kZWxMb2FkZXJ9IGZyb20gJy4vYWJzdHJhY3QtbW9kZWwtbG9hZGVyJztcclxuaW1wb3J0IHtTVkdMb2FkZXJ9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9sb2FkZXJzL1NWR0xvYWRlcic7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCB7YXBwbGllZENvbG9yLCBhcHBsaWVkTWF0ZXJpYWx9IGZyb20gJy4uLy4uL3V0aWwnO1xyXG5pbXBvcnQge2ZpeENlbnRlcn0gZnJvbSAnLi4vLi4vdXRpbC9maXgtY2VudGVyJztcclxuaW1wb3J0IHtzY2FsZVRvRml0fSBmcm9tICcuLi8uLi91dGlsL3NjYWxlLXRvLWZpdCc7XHJcbmltcG9ydCB7UmVuZGVyZXJTZXJ2aWNlfSBmcm9tICcuLi8uLi9yZW5kZXJlci9yZW5kZXJlci5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXRmdC1zdmctbG9hZGVyJyxcclxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogQWJzdHJhY3RPYmplY3QzRCwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gU1ZHTG9hZGVyQ29tcG9uZW50KX1dLFxyXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PidcclxufSlcclxuZXhwb3J0IGNsYXNzIFNWR0xvYWRlckNvbXBvbmVudCBleHRlbmRzIEFic3RyYWN0TW9kZWxMb2FkZXIge1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGdldCBvdmVycmlkZU1hdGVyaWFsQ29sb3IoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9vdmVycmlkZU1hdGVyaWFsQ29sb3I7XHJcbiAgfVxyXG5cclxuICBzZXQgb3ZlcnJpZGVNYXRlcmlhbENvbG9yKHZhbHVlOiBudW1iZXIpIHtcclxuICAgIHRoaXMuX292ZXJyaWRlTWF0ZXJpYWxDb2xvciA9IHZhbHVlO1xyXG4gICAgdGhpcy5zdGFydExvYWRpbmcoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX292ZXJyaWRlTWF0ZXJpYWxDb2xvcjogbnVtYmVyID0gdW5kZWZpbmVkO1xyXG5cclxuXHJcbiAgQElucHV0KClcclxuICBtYXRlcmlhbCA9ICdiYXNpYyc7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgZGVwdGhXcml0ZSA9IHRydWU7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgbWF4WDogbnVtYmVyO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIG1heFk6IG51bWJlcjtcclxuXHJcbiAgQElucHV0KClcclxuICBjZW50ZXJlZCA9IHRydWU7XHJcblxyXG4gIHByaXZhdGUgbG9hZGVyID0gbmV3IFNWR0xvYWRlcigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCByZW5kZXJlclNlcnZpY2U6IFJlbmRlcmVyU2VydmljZVxyXG4gICkge1xyXG4gICAgc3VwZXIocmVuZGVyZXJTZXJ2aWNlKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBhc3luYyBsb2FkTGF6eU9iamVjdCgpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdPYmplY3RMb2FkZXJDb21wb25lbnQubG9hZExhenlPYmplY3QnKTtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxUSFJFRS5PYmplY3QzRD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0aGlzLmxvYWRlci5sb2FkKHRoaXMubW9kZWwsIGRhdGEgPT4ge1xyXG4gICAgICAgICAgY29uc3QgcGF0aHMgPSBkYXRhLnBhdGhzO1xyXG4gICAgICAgICAgY29uc3QgZ3JvdXAgPSBuZXcgVEhSRUUuR3JvdXAoKTtcclxuXHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGhzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vIE5PVEU6IEl0IHNlZW1zIHRoYXQgU2hhcGVQYXRoIGRvZXMgbm90IGluY2x1ZGVzIHR5cGVkIGNvbG9yLCBjYXN0IHRvIGFueSBhcyB3b3JrYXJvdW5kXHJcbiAgICAgICAgICAgIGNvbnN0IHBhdGg6IGFueSA9IHBhdGhzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBjb2xvciA9ICh0aGlzLl9vdmVycmlkZU1hdGVyaWFsQ29sb3IgPyBhcHBsaWVkQ29sb3IodGhpcy5fb3ZlcnJpZGVNYXRlcmlhbENvbG9yKSA6IHBhdGguY29sb3IpO1xyXG4gICAgICAgICAgICBjb25zdCBtYXRlcmlhbCA9IGFwcGxpZWRNYXRlcmlhbChjb2xvciwgdGhpcy5tYXRlcmlhbCwgdGhpcy5kZXB0aFdyaXRlKTtcclxuICAgICAgICAgICAgY29uc3Qgc2hhcGVzID0gcGF0aC50b1NoYXBlcyh0cnVlLCB7fSk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNoYXBlcy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHNoYXBlID0gc2hhcGVzW2pdO1xyXG4gICAgICAgICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNoYXBlQnVmZmVyR2VvbWV0cnkoc2hhcGUpO1xyXG4gICAgICAgICAgICAgIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgICAgICAgICAgIGdyb3VwLmFkZChtZXNoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICh0aGlzLm1heFggfHwgdGhpcy5tYXhZKSB7XHJcbiAgICAgICAgICAgIHNjYWxlVG9GaXQoZ3JvdXAsIG5ldyBUSFJFRS5WZWN0b3IzKHRoaXMubWF4WCwgdGhpcy5tYXhZLCAwKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAodGhpcy5jZW50ZXJlZCkge1xyXG4gICAgICAgICAgICBmaXhDZW50ZXIoZ3JvdXApO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJlc29sdmUoZ3JvdXApO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgIHJlamVjdCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG5cclxufVxyXG4iXX0=