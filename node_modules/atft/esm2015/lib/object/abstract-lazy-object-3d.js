/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AbstractObject3D } from './abstract-object-3d';
import * as THREE from 'three';
/**
 * @abstract
 */
export class AbstractLazyObject3D extends AbstractObject3D {
    constructor() {
        super(...arguments);
        /**
         * Flag to signal whether the parent class instance AbstractObject3D called the
         * overwritten method {\@link AbstractModelLoader#afterInit} yet.
         *
         * Unless that method was called, no methods and properties of {\@link AbstractObject3D}
         * may be safely accessed, especially {\@link AbstractObject3D#addChild} and
         * {\@link AbstractObject3D.renderer}.
         */
        this.parentInitialized = false;
    }
    /**
     * @protected
     * @return {?}
     */
    afterInit() {
        super.afterInit();
        this.parentInitialized = true;
        this.startLoading();
    }
    /**
     * @protected
     * @return {?}
     */
    startLoading() {
        // console.log('AbstractLazyObject3D.startLoading');
        // Trigger model acquisition now that the parent has been initialized.
        this.loadLazyObject().then((/**
         * @param {?} obj
         * @return {?}
         */
        obj => {
            // console.log('AbstractLazyObject3D loaded');
            // remove old if exists
            if (this.lazyObject) {
                super.removeChild(this.lazyObject);
            }
            // add lazy object to scene
            this.lazyObject = obj;
            super.addChild(obj);
            this.rendererService.render();
        })).catch((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            console.error(err);
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.lazyObject) {
            super.removeChild(this.lazyObject);
        }
    }
    /**
     * @protected
     * @return {?}
     */
    newObject3DInstance() {
        // Just empty object (holder of lazy object)
        return new THREE.Object3D();
    }
}
if (false) {
    /**
     * Flag to signal whether the parent class instance AbstractObject3D called the
     * overwritten method {\@link AbstractModelLoader#afterInit} yet.
     *
     * Unless that method was called, no methods and properties of {\@link AbstractObject3D}
     * may be safely accessed, especially {\@link AbstractObject3D#addChild} and
     * {\@link AbstractObject3D.renderer}.
     * @type {?}
     * @private
     */
    AbstractLazyObject3D.prototype.parentInitialized;
    /**
     * This is reference to lazy loaded Object3D (async after init)
     * @type {?}
     * @protected
     */
    AbstractLazyObject3D.prototype.lazyObject;
    /**
     * Abstract method for lazy loading
     *
     * @abstract
     * @protected
     * @return {?}
     */
    AbstractLazyObject3D.prototype.loadLazyObject = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtbGF6eS1vYmplY3QtM2QuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL29iamVjdC9hYnN0cmFjdC1sYXp5LW9iamVjdC0zZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFdEQsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7Ozs7QUFFL0IsTUFBTSxPQUFnQixvQkFBcUIsU0FBUSxnQkFBZ0M7SUFBbkY7Ozs7Ozs7Ozs7UUFVVSxzQkFBaUIsR0FBRyxLQUFLLENBQUM7SUFrRHBDLENBQUM7Ozs7O0lBckNXLFNBQVM7UUFDakIsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7UUFDOUIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBRVMsWUFBWTtRQUNwQixvREFBb0Q7UUFDcEQsc0VBQXNFO1FBQ3RFLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJOzs7O1FBQUMsR0FBRyxDQUFDLEVBQUU7WUFDL0IsOENBQThDO1lBQzlDLHVCQUF1QjtZQUN2QixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ25CLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3BDO1lBRUQsMkJBQTJCO1lBQzNCLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO1lBQ3RCLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFcEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoQyxDQUFDLEVBQUMsQ0FBQyxLQUFLOzs7O1FBQUMsR0FBRyxDQUFDLEVBQUU7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDcEM7SUFDSCxDQUFDOzs7OztJQUVTLG1CQUFtQjtRQUMzQiw0Q0FBNEM7UUFDNUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM5QixDQUFDO0NBRUY7Ozs7Ozs7Ozs7OztJQWxEQyxpREFBa0M7Ozs7OztJQUtsQywwQ0FBaUQ7Ozs7Ozs7O0lBTWpELGdFQUFtRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T25EZXN0cm95fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7QWJzdHJhY3RPYmplY3QzRH0gZnJvbSAnLi9hYnN0cmFjdC1vYmplY3QtM2QnO1xyXG5cclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0TGF6eU9iamVjdDNEIGV4dGVuZHMgQWJzdHJhY3RPYmplY3QzRDxUSFJFRS5PYmplY3QzRD4gaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG5cclxuICAvKipcclxuICAgKiBGbGFnIHRvIHNpZ25hbCB3aGV0aGVyIHRoZSBwYXJlbnQgY2xhc3MgaW5zdGFuY2UgQWJzdHJhY3RPYmplY3QzRCBjYWxsZWQgdGhlXHJcbiAgICogb3ZlcndyaXR0ZW4gbWV0aG9kIHtAbGluayBBYnN0cmFjdE1vZGVsTG9hZGVyI2FmdGVySW5pdH0geWV0LlxyXG4gICAqXHJcbiAgICogVW5sZXNzIHRoYXQgbWV0aG9kIHdhcyBjYWxsZWQsIG5vIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgb2Yge0BsaW5rIEFic3RyYWN0T2JqZWN0M0R9XHJcbiAgICogbWF5IGJlIHNhZmVseSBhY2Nlc3NlZCwgZXNwZWNpYWxseSB7QGxpbmsgQWJzdHJhY3RPYmplY3QzRCNhZGRDaGlsZH0gYW5kXHJcbiAgICoge0BsaW5rIEFic3RyYWN0T2JqZWN0M0QucmVuZGVyZXJ9LlxyXG4gICAqL1xyXG4gIHByaXZhdGUgcGFyZW50SW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBpcyByZWZlcmVuY2UgdG8gbGF6eSBsb2FkZWQgT2JqZWN0M0QgKGFzeW5jIGFmdGVyIGluaXQpXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGxhenlPYmplY3Q6IFRIUkVFLk9iamVjdDNEIHwgdW5kZWZpbmVkO1xyXG5cclxuICAvKipcclxuICAgKiBBYnN0cmFjdCBtZXRob2QgZm9yIGxhenkgbG9hZGluZ1xyXG4gICAqXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IGFzeW5jIGxvYWRMYXp5T2JqZWN0KCk6IFByb21pc2U8VEhSRUUuT2JqZWN0M0Q+O1xyXG5cclxuICBwcm90ZWN0ZWQgYWZ0ZXJJbml0KCkge1xyXG4gICAgc3VwZXIuYWZ0ZXJJbml0KCk7XHJcbiAgICB0aGlzLnBhcmVudEluaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgIHRoaXMuc3RhcnRMb2FkaW5nKCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgc3RhcnRMb2FkaW5nKCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ0Fic3RyYWN0TGF6eU9iamVjdDNELnN0YXJ0TG9hZGluZycpO1xyXG4gICAgLy8gVHJpZ2dlciBtb2RlbCBhY3F1aXNpdGlvbiBub3cgdGhhdCB0aGUgcGFyZW50IGhhcyBiZWVuIGluaXRpYWxpemVkLlxyXG4gICAgdGhpcy5sb2FkTGF6eU9iamVjdCgpLnRoZW4ob2JqID0+IHtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ0Fic3RyYWN0TGF6eU9iamVjdDNEIGxvYWRlZCcpO1xyXG4gICAgICAvLyByZW1vdmUgb2xkIGlmIGV4aXN0c1xyXG4gICAgICBpZiAodGhpcy5sYXp5T2JqZWN0KSB7XHJcbiAgICAgICAgc3VwZXIucmVtb3ZlQ2hpbGQodGhpcy5sYXp5T2JqZWN0KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gYWRkIGxhenkgb2JqZWN0IHRvIHNjZW5lXHJcbiAgICAgIHRoaXMubGF6eU9iamVjdCA9IG9iajtcclxuICAgICAgc3VwZXIuYWRkQ2hpbGQob2JqKTtcclxuXHJcbiAgICAgIHRoaXMucmVuZGVyZXJTZXJ2aWNlLnJlbmRlcigpO1xyXG4gICAgfSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmxhenlPYmplY3QpIHtcclxuICAgICAgc3VwZXIucmVtb3ZlQ2hpbGQodGhpcy5sYXp5T2JqZWN0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBuZXdPYmplY3QzREluc3RhbmNlKCk6IFRIUkVFLk9iamVjdDNEIHtcclxuICAgIC8vIEp1c3QgZW1wdHkgb2JqZWN0IChob2xkZXIgb2YgbGF6eSBvYmplY3QpXHJcbiAgICByZXR1cm4gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=