/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractObject3D } from '../abstract-object-3d';
import { AbstractLazyObject3D } from '../abstract-lazy-object-3d';
import { appliedMaterial } from '../../util';
import { fixCenter } from '../../util/fix-center';
import { RendererService } from '../../renderer/renderer.service';
export class TextMeshComponent extends AbstractLazyObject3D {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        super(rendererService);
        this.rendererService = rendererService;
        this.material = 'basic';
        this._materialColor = 0xDADADA;
        this._text = 'Text';
        this.size = 10;
        this.height = 0.3;
        this.curveSegments = 2;
        this.bevelEnabled = false;
        this.bevelThickness = 0.1;
        this.bevelSize = 0.1;
        this.bevelOffset = 0;
        this.bevelSegments = 1;
        this.fontUrl = './assets/font/helvetiker_regular.typeface.json';
        this.castShadow = true;
        this.receiveShadow = true;
        this.depthWrite = true;
        this.centered = true;
    }
    /**
     * @param {?} materialColor
     * @return {?}
     */
    set materialColor(materialColor) {
        // console.log('change color', materialColor);
        this._materialColor = materialColor;
        this.startLoading();
    }
    /**
     * @return {?}
     */
    get materialColor() {
        return this._materialColor;
    }
    /**
     * @param {?} text
     * @return {?}
     */
    set text(text) {
        this._text = text;
        this.startLoading();
    }
    /**
     * @return {?}
     */
    get text() {
        return this._text;
    }
    /**
     * @return {?}
     */
    getMaterial() {
        return appliedMaterial(this.materialColor, this.material, this.depthWrite);
    }
    /**
     * @protected
     * @return {?}
     */
    loadLazyObject() {
        return tslib_1.__awaiter(this, void 0, void 0, /** @this {!TextMeshComponent} */ function* () {
            // console.log('TextMeshComponent.loadLazyObject');
            return new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            resolve => {
                /** @type {?} */
                const loader = new THREE.FontLoader();
                loader.load(this.fontUrl, (/**
                 * @param {?} font
                 * @return {?}
                 */
                font => {
                    /** @type {?} */
                    const geometry = new THREE.TextGeometry(this.text, {
                        font: font,
                        size: this.size,
                        height: this.height,
                        curveSegments: this.curveSegments,
                        bevelEnabled: this.bevelEnabled,
                        bevelThickness: this.bevelThickness,
                        bevelSize: this.bevelSize,
                        bevelOffset: this.bevelOffset,
                        bevelSegments: this.bevelOffset
                    });
                    /** @type {?} */
                    const material = this.getMaterial();
                    /** @type {?} */
                    const mesh = new THREE.Mesh(geometry, material);
                    mesh.castShadow = this.castShadow;
                    mesh.receiveShadow = this.receiveShadow;
                    if (this.centered) {
                        fixCenter(mesh);
                    }
                    resolve(mesh);
                }));
            }));
        });
    }
}
TextMeshComponent.decorators = [
    { type: Component, args: [{
                selector: 'atft-text-mesh',
                providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TextMeshComponent)) }],
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
TextMeshComponent.ctorParameters = () => [
    { type: RendererService }
];
TextMeshComponent.propDecorators = {
    material: [{ type: Input }],
    materialColor: [{ type: Input }],
    text: [{ type: Input }],
    size: [{ type: Input }],
    height: [{ type: Input }],
    curveSegments: [{ type: Input }],
    bevelEnabled: [{ type: Input }],
    bevelThickness: [{ type: Input }],
    bevelSize: [{ type: Input }],
    bevelOffset: [{ type: Input }],
    bevelSegments: [{ type: Input }],
    fontUrl: [{ type: Input }],
    castShadow: [{ type: Input }],
    receiveShadow: [{ type: Input }],
    depthWrite: [{ type: Input }],
    centered: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TextMeshComponent.prototype.material;
    /**
     * @type {?}
     * @private
     */
    TextMeshComponent.prototype._materialColor;
    /**
     * @type {?}
     * @private
     */
    TextMeshComponent.prototype._text;
    /** @type {?} */
    TextMeshComponent.prototype.size;
    /** @type {?} */
    TextMeshComponent.prototype.height;
    /** @type {?} */
    TextMeshComponent.prototype.curveSegments;
    /** @type {?} */
    TextMeshComponent.prototype.bevelEnabled;
    /** @type {?} */
    TextMeshComponent.prototype.bevelThickness;
    /** @type {?} */
    TextMeshComponent.prototype.bevelSize;
    /** @type {?} */
    TextMeshComponent.prototype.bevelOffset;
    /** @type {?} */
    TextMeshComponent.prototype.bevelSegments;
    /** @type {?} */
    TextMeshComponent.prototype.fontUrl;
    /** @type {?} */
    TextMeshComponent.prototype.castShadow;
    /** @type {?} */
    TextMeshComponent.prototype.receiveShadow;
    /** @type {?} */
    TextMeshComponent.prototype.depthWrite;
    /** @type {?} */
    TextMeshComponent.prototype.centered;
    /**
     * @type {?}
     * @protected
     */
    TextMeshComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,