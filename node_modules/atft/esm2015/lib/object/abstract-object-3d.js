/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChildren, EventEmitter, Input, Output, QueryList, ViewChildren } from '@angular/core';
/**
 * @abstract
 * @template T
 */
export class AbstractObject3D {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        this.rendererService = rendererService;
        this.changed = new EventEmitter();
        // console.log('AbstractObject3D.constructor');
        this.changed.subscribe((/**
         * @return {?}
         */
        () => {
            this.rendererService.render();
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.object) {
            return;
        }
        /** @type {?} */
        let modified = false;
        if (['rotateX', 'rotateY', 'rotateZ'].some((/**
         * @param {?} propName
         * @return {?}
         */
        propName => propName in changes))) {
            this.applyRotation();
            modified = true;
        }
        if (['translateX', 'translateY', 'translateZ'].some((/**
         * @param {?} propName
         * @return {?}
         */
        propName => propName in changes))) {
            this.applyTranslation();
            modified = true;
        }
        if (modified) {
            this.changed.emit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // console.log('AbstractObject3D.OnDestroy');
        if (this.object && this.object.parent) {
            this.object.parent.remove(this.object);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // console.log('AbstractObject3D.ngAfterViewInit ' + this.name);
        this.object = this.newObject3DInstance();
        this.applyTranslation();
        this.applyRotation();
        this.collectChilds();
        this.afterInit();
    }
    /**
     * @return {?}
     */
    collectChilds() {
        // console.log('Collect childs for', this.name);
        if (this.childNodes !== undefined && this.childNodes.length > 1) {
            this.childNodes.filter((/**
             * @param {?} i
             * @return {?}
             */
            i => i !== this && i.getObject() !== undefined)).forEach((/**
             * @param {?} i
             * @return {?}
             */
            i => {
                // console.log('Add childNodes for', this.name, i);
                this.addChild(i.getObject());
            }));
        }
        else {
            // console.log("No child Object3D for: " + this.constructor.label);
        }
        if (this.viewChilds !== undefined && this.viewChilds.length > 0) {
            this.viewChilds.filter((/**
             * @param {?} i
             * @return {?}
             */
            i => i !== this
                && i.getObject() !== undefined
                && !i.getObject().parent /* direct childs only */)).forEach((/**
             * @param {?} i
             * @return {?}
             */
            i => {
                // console.log('Add viewChilds for', this.name, i);
                this.addChild(i.getObject());
            }));
        }
        else {
            // console.log("No child Object3D for: " + this.constructor.label);
        }
    }
    /**
     * @private
     * @return {?}
     */
    applyRotation() {
        this.object.rotation.set(this.rotateX || 0, this.rotateY || 0, this.rotateZ || 0, 'XYZ');
    }
    /**
     * @private
     * @return {?}
     */
    applyTranslation() {
        this.object.position.set(this.translateX || 0, this.translateY || 0, this.translateZ || 0);
    }
    /**
     * @param {?} object
     * @return {?}
     */
    addChild(object) {
        this.object.add(object);
    }
    /**
     * @protected
     * @param {?} object
     * @return {?}
     */
    removeChild(object) {
        this.object.remove(object);
    }
    /**
     * @return {?}
     */
    getObject() {
        return this.object;
    }
    /**
     * @protected
     * @return {?}
     */
    afterInit() {
        // this.changed.emit();
    }
}
AbstractObject3D.propDecorators = {
    childNodes: [{ type: ContentChildren, args: [AbstractObject3D, { descendants: false },] }],
    viewChilds: [{ type: ViewChildren, args: [AbstractObject3D,] }],
    rotateX: [{ type: Input }],
    rotateY: [{ type: Input }],
    rotateZ: [{ type: Input }],
    translateX: [{ type: Input }],
    translateY: [{ type: Input }],
    translateZ: [{ type: Input }],
    name: [{ type: Input }],
    changed: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    AbstractObject3D.prototype.childNodes;
    /** @type {?} */
    AbstractObject3D.prototype.viewChilds;
    /**
     * Rotation in Euler angles (radians) with order X, Y, Z.
     * @type {?}
     */
    AbstractObject3D.prototype.rotateX;
    /** @type {?} */
    AbstractObject3D.prototype.rotateY;
    /** @type {?} */
    AbstractObject3D.prototype.rotateZ;
    /**
     * Translate the geometry. This is typically done as a one time operation, and not during a loop.
     * @type {?}
     */
    AbstractObject3D.prototype.translateX;
    /** @type {?} */
    AbstractObject3D.prototype.translateY;
    /** @type {?} */
    AbstractObject3D.prototype.translateZ;
    /** @type {?} */
    AbstractObject3D.prototype.name;
    /** @type {?} */
    AbstractObject3D.prototype.changed;
    /**
     * @type {?}
     * @private
     */
    AbstractObject3D.prototype.object;
    /**
     * @type {?}
     * @protected
     */
    AbstractObject3D.prototype.rendererService;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    AbstractObject3D.prototype.newObject3DInstance = function () { };
}
//# sourceMappingURL=data:application/json;base64,