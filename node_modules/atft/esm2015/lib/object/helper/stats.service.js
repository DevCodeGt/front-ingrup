/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * @record
 */
export function StatsResults() { }
if (false) {
    /** @type {?} */
    StatsResults.prototype.ms;
    /** @type {?} */
    StatsResults.prototype.count;
    /** @type {?} */
    StatsResults.prototype.callsPerSecond;
}
export class StatsService {
    constructor() {
        this.ms = 0;
        this.count = 0;
    }
    /**
     * @return {?}
     */
    start() {
        this.lastTime = Date.now();
    }
    /**
     * @return {?}
     */
    end() {
        /** @type {?} */
        const deltaMs = Date.now() - this.lastTime;
        this.ms += deltaMs;
        this.count++;
    }
    /**
     * @return {?}
     */
    getStats() {
        return {
            ms: this.ms,
            count: this.count,
            callsPerSecond: Math.round(this.count / (this.ms / 1000))
        };
    }
    /**
     * @return {?}
     */
    reset() {
        this.ms = 0;
        this.count = 0;
    }
}
StatsService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    StatsService.prototype.lastTime;
    /**
     * @type {?}
     * @private
     */
    StatsService.prototype.ms;
    /**
     * @type {?}
     * @private
     */
    StatsService.prototype.count;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2F0ZnQvIiwic291cmNlcyI6WyJsaWIvb2JqZWN0L2hlbHBlci9zdGF0cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDOzs7O0FBRXpDLGtDQUlDOzs7SUFIQywwQkFBVzs7SUFDWCw2QkFBYzs7SUFDZCxzQ0FBdUI7O0FBSXpCLE1BQU0sT0FBTyxZQUFZO0lBRHpCO1FBSVUsT0FBRSxHQUFHLENBQUMsQ0FBQztRQUNQLFVBQUssR0FBRyxDQUFDLENBQUM7SUF5QnBCLENBQUM7Ozs7SUF2QkMsS0FBSztRQUNILElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxHQUFHOztjQUNLLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVE7UUFDMUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2YsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixPQUFPO1lBQ0wsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ1gsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLGNBQWMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQzFELENBQUM7SUFDSixDQUFDOzs7O0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ1osSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDakIsQ0FBQzs7O1lBNUJGLFVBQVU7Ozs7Ozs7SUFHVCxnQ0FBeUI7Ozs7O0lBQ3pCLDBCQUFlOzs7OztJQUNmLDZCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRzUmVzdWx0cyB7XHJcbiAgbXM6IG51bWJlcjtcclxuICBjb3VudDogbnVtYmVyO1xyXG4gIGNhbGxzUGVyU2Vjb25kOiBudW1iZXI7XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFN0YXRzU2VydmljZSB7XHJcblxyXG4gIHByaXZhdGUgbGFzdFRpbWU6IG51bWJlcjtcclxuICBwcml2YXRlIG1zID0gMDtcclxuICBwcml2YXRlIGNvdW50ID0gMDtcclxuXHJcbiAgc3RhcnQoKSB7XHJcbiAgICB0aGlzLmxhc3RUaW1lID0gRGF0ZS5ub3coKTtcclxuICB9XHJcblxyXG4gIGVuZCgpIHtcclxuICAgIGNvbnN0IGRlbHRhTXMgPSBEYXRlLm5vdygpIC0gdGhpcy5sYXN0VGltZTtcclxuICAgIHRoaXMubXMgKz0gZGVsdGFNcztcclxuICAgIHRoaXMuY291bnQrKztcclxuICB9XHJcblxyXG4gIGdldFN0YXRzKCk6IFN0YXRzUmVzdWx0cyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtczogdGhpcy5tcyxcclxuICAgICAgY291bnQ6IHRoaXMuY291bnQsXHJcbiAgICAgIGNhbGxzUGVyU2Vjb25kOiBNYXRoLnJvdW5kKHRoaXMuY291bnQgLyAodGhpcy5tcyAvIDEwMDApKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5tcyA9IDA7XHJcbiAgICB0aGlzLmNvdW50ID0gMDtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==