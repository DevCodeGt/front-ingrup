/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import { AbstractObject3D } from '../abstract-object-3d';
import { CSS3DObject } from 'three/examples/jsm/renderers/CSS3DRenderer';
import { AbstractCss3dMesh } from './abstract-css3d-mesh';
import { RendererService } from '../../renderer/renderer.service';
export class Css3dVideoMeshComponent extends AbstractCss3dMesh {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        super(rendererService);
        this.rendererService = rendererService;
        this.video = document.createElement('video');
    }
    /**
     * @protected
     * @return {?}
     */
    createCss3dObject() {
        // 1. Create DIV
        /** @type {?} */
        const div = document.createElement('div');
        div.style.width = this.resolutionX + 'px';
        div.style.height = this.resolutionY + 'px';
        div.style.backgroundColor = '#000000';
        div.id = 'myWrapper';
        // 2. Create Video Player with source
        this.video.autoplay = false;
        this.video.loop = true;
        this.video.muted = true;
        /** @type {?} */
        const source = document.createElement('source');
        source.src = this.videoSrc;
        source.type = 'video/mp4';
        this.video.appendChild(source);
        div.appendChild(this.video);
        // 3. Create CSS3DObject
        /** @type {?} */
        const object = new CSS3DObject(div);
        return object;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.video.load();
        this.video.addEventListener('canplay', (/**
         * @return {?}
         */
        () => {
            console.log('EVENT');
            this.video.play();
        }));
    }
}
Css3dVideoMeshComponent.decorators = [
    { type: Component, args: [{
                selector: 'atft-css3d-video-mesh',
                providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => Css3dVideoMeshComponent)) }],
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
Css3dVideoMeshComponent.ctorParameters = () => [
    { type: RendererService }
];
Css3dVideoMeshComponent.propDecorators = {
    videoSrc: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    Css3dVideoMeshComponent.prototype.videoSrc;
    /** @type {?} */
    Css3dVideoMeshComponent.prototype.video;
    /**
     * @type {?}
     * @protected
     */
    Css3dVideoMeshComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3NzM2QtdmlkZW8tbWVzaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL29iamVjdC9tZXNoL2NzczNkLXZpZGVvLW1lc2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWdCLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSw0Q0FBNEMsQ0FBQztBQUN2RSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFPaEUsTUFBTSxPQUFPLHVCQUF3QixTQUFRLGlCQUFpQjs7OztJQU81RCxZQUNZLGVBQWdDO1FBRTFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUZiLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUg1QyxVQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQU14QyxDQUFDOzs7OztJQUVTLGlCQUFpQjs7O2NBRW5CLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUN6QyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUMxQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUMzQyxHQUFHLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7UUFDdEMsR0FBRyxDQUFDLEVBQUUsR0FBRyxXQUFXLENBQUM7UUFFckIscUNBQXFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDOztjQUNsQixNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDL0MsTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzNCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDO1FBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9CLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7Y0FHdEIsTUFBTSxHQUFHLElBQUksV0FBVyxDQUFDLEdBQUcsQ0FBQztRQUNuQyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOzs7O0lBRUQsZUFBZTtRQUNiLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsU0FBUzs7O1FBQUUsR0FBRyxFQUFFO1lBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNwQixDQUFDLEVBQUMsQ0FBQztJQUdMLENBQUM7OztZQWxERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHVCQUF1QjtnQkFDakMsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLFVBQVU7Ozt3QkFBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBQyxFQUFDLENBQUM7Z0JBQ2hHLFFBQVEsRUFBRSwyQkFBMkI7YUFDdEM7Ozs7WUFOTyxlQUFlOzs7dUJBU3BCLEtBQUs7Ozs7SUFBTiwyQ0FDUzs7SUFFVCx3Q0FBd0M7Ozs7O0lBR3RDLGtEQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7QWJzdHJhY3RPYmplY3QzRH0gZnJvbSAnLi4vYWJzdHJhY3Qtb2JqZWN0LTNkJztcclxuaW1wb3J0IHtDU1MzRE9iamVjdH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL3JlbmRlcmVycy9DU1MzRFJlbmRlcmVyJztcclxuaW1wb3J0IHtBYnN0cmFjdENzczNkTWVzaH0gZnJvbSAnLi9hYnN0cmFjdC1jc3MzZC1tZXNoJztcclxuaW1wb3J0IHtSZW5kZXJlclNlcnZpY2V9IGZyb20gJy4uLy4uL3JlbmRlcmVyL3JlbmRlcmVyLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhdGZ0LWNzczNkLXZpZGVvLW1lc2gnLFxyXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBBYnN0cmFjdE9iamVjdDNELCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBDc3MzZFZpZGVvTWVzaENvbXBvbmVudCl9XSxcclxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDc3MzZFZpZGVvTWVzaENvbXBvbmVudCBleHRlbmRzIEFic3RyYWN0Q3NzM2RNZXNoIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgdmlkZW9TcmM7XHJcblxyXG4gIHZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgY3JlYXRlQ3NzM2RPYmplY3QoKTogQ1NTM0RPYmplY3Qge1xyXG4gICAgLy8gMS4gQ3JlYXRlIERJVlxyXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBkaXYuc3R5bGUud2lkdGggPSB0aGlzLnJlc29sdXRpb25YICsgJ3B4JztcclxuICAgIGRpdi5zdHlsZS5oZWlnaHQgPSB0aGlzLnJlc29sdXRpb25ZICsgJ3B4JztcclxuICAgIGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzAwMDAwMCc7XHJcbiAgICBkaXYuaWQgPSAnbXlXcmFwcGVyJztcclxuXHJcbiAgICAvLyAyLiBDcmVhdGUgVmlkZW8gUGxheWVyIHdpdGggc291cmNlXHJcbiAgICB0aGlzLnZpZGVvLmF1dG9wbGF5ID0gZmFsc2U7XHJcbiAgICB0aGlzLnZpZGVvLmxvb3AgPSB0cnVlO1xyXG4gICAgdGhpcy52aWRlby5tdXRlZCA9IHRydWU7XHJcbiAgICBjb25zdCBzb3VyY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzb3VyY2UnKTtcclxuICAgIHNvdXJjZS5zcmMgPSB0aGlzLnZpZGVvU3JjO1xyXG4gICAgc291cmNlLnR5cGUgPSAndmlkZW8vbXA0JztcclxuICAgIHRoaXMudmlkZW8uYXBwZW5kQ2hpbGQoc291cmNlKTtcclxuICAgIGRpdi5hcHBlbmRDaGlsZCh0aGlzLnZpZGVvKTtcclxuXHJcbiAgICAvLyAzLiBDcmVhdGUgQ1NTM0RPYmplY3RcclxuICAgIGNvbnN0IG9iamVjdCA9IG5ldyBDU1MzRE9iamVjdChkaXYpO1xyXG4gICAgcmV0dXJuIG9iamVjdDtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIHN1cGVyLm5nQWZ0ZXJWaWV3SW5pdCgpO1xyXG4gICAgdGhpcy52aWRlby5sb2FkKCk7XHJcbiAgICB0aGlzLnZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXknLCAoKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdFVkVOVCcpO1xyXG4gICAgICB0aGlzLnZpZGVvLnBsYXkoKTtcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgfVxyXG5cclxufVxyXG4iXX0=