/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractMesh } from './abstract-mesh-3d';
import { AbstractObject3D } from '../abstract-object-3d';
import { RendererService } from '../../renderer/renderer.service';
export class CylinderMeshComponent extends AbstractMesh {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        super(rendererService);
        this.rendererService = rendererService;
        this.radiusTop = 1.0;
        this.radiusBottom = 1.0;
        this.height = 1.0;
        this.radialSegments = 8;
        this.heightSegments = 1;
        this.openEnded = false;
        this.thetaStart = 0.0;
        this.thetaLength = 2 * Math.PI;
        // console.log('CylinderMeshComponent.constructor');
    }
    /**
     * @protected
     * @return {?}
     */
    newObject3DInstance() {
        // console.log('CylinderMeshComponent.newObject3DInstance');
        /** @type {?} */
        const geometry = new THREE.CylinderGeometry(this.radiusTop, this.radiusBottom, this.height, this.radialSegments, this.heightSegments, this.openEnded, this.thetaStart, this.thetaLength);
        /** @type {?} */
        const material = this.getMaterial();
        /** @type {?} */
        const mesh = new THREE.Mesh(geometry, material);
        this.applyShadowProps(mesh);
        return mesh;
    }
}
CylinderMeshComponent.decorators = [
    { type: Component, args: [{
                selector: 'atft-cylinder-mesh',
                providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => CylinderMeshComponent)) }],
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
CylinderMeshComponent.ctorParameters = () => [
    { type: RendererService }
];
CylinderMeshComponent.propDecorators = {
    radiusTop: [{ type: Input }],
    radiusBottom: [{ type: Input }],
    height: [{ type: Input }],
    radialSegments: [{ type: Input }],
    heightSegments: [{ type: Input }],
    openEnded: [{ type: Input }],
    thetaStart: [{ type: Input }],
    thetaLength: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CylinderMeshComponent.prototype.radiusTop;
    /** @type {?} */
    CylinderMeshComponent.prototype.radiusBottom;
    /** @type {?} */
    CylinderMeshComponent.prototype.height;
    /** @type {?} */
    CylinderMeshComponent.prototype.radialSegments;
    /** @type {?} */
    CylinderMeshComponent.prototype.heightSegments;
    /** @type {?} */
    CylinderMeshComponent.prototype.openEnded;
    /** @type {?} */
    CylinderMeshComponent.prototype.thetaStart;
    /** @type {?} */
    CylinderMeshComponent.prototype.thetaLength;
    /**
     * @type {?}
     * @protected
     */
    CylinderMeshComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3lsaW5kZXItbWVzaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL29iamVjdC9tZXNoL2N5bGluZGVyLW1lc2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQU9oRSxNQUFNLE9BQU8scUJBQXNCLFNBQVEsWUFBWTs7OztJQW1CckQsWUFDWSxlQUFnQztRQUUxQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFGYixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFqQjVDLGNBQVMsR0FBRyxHQUFHLENBQUM7UUFFaEIsaUJBQVksR0FBRyxHQUFHLENBQUM7UUFFbkIsV0FBTSxHQUFHLEdBQUcsQ0FBQztRQUViLG1CQUFjLEdBQUcsQ0FBQyxDQUFDO1FBRW5CLG1CQUFjLEdBQUcsQ0FBQyxDQUFDO1FBRW5CLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFFbEIsZUFBVSxHQUFHLEdBQUcsQ0FBQztRQUVqQixnQkFBVyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBTXhCLG9EQUFvRDtJQUN0RCxDQUFDOzs7OztJQUVTLG1CQUFtQjs7O2NBRXJCLFFBQVEsR0FBRyxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQ2xJLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDOztjQUM5QyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRTs7Y0FDN0IsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO1FBQy9DLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7OztZQXZDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLFVBQVU7Ozt3QkFBQyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsRUFBQyxFQUFDLENBQUM7Z0JBQzlGLFFBQVEsRUFBRSwyQkFBMkI7YUFDdEM7Ozs7WUFOTyxlQUFlOzs7d0JBU3BCLEtBQUs7MkJBRUwsS0FBSztxQkFFTCxLQUFLOzZCQUVMLEtBQUs7NkJBRUwsS0FBSzt3QkFFTCxLQUFLO3lCQUVMLEtBQUs7MEJBRUwsS0FBSzs7OztJQWROLDBDQUNnQjs7SUFDaEIsNkNBQ21COztJQUNuQix1Q0FDYTs7SUFDYiwrQ0FDbUI7O0lBQ25CLCtDQUNtQjs7SUFDbkIsMENBQ2tCOztJQUNsQiwyQ0FDaUI7O0lBQ2pCLDRDQUMwQjs7Ozs7SUFHeEIsZ0RBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5pbXBvcnQge0Fic3RyYWN0TWVzaH0gZnJvbSAnLi9hYnN0cmFjdC1tZXNoLTNkJztcclxuaW1wb3J0IHtBYnN0cmFjdE9iamVjdDNEfSBmcm9tICcuLi9hYnN0cmFjdC1vYmplY3QtM2QnO1xyXG5pbXBvcnQge1JlbmRlcmVyU2VydmljZX0gZnJvbSAnLi4vLi4vcmVuZGVyZXIvcmVuZGVyZXIuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2F0ZnQtY3lsaW5kZXItbWVzaCcsXHJcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IEFic3RyYWN0T2JqZWN0M0QsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEN5bGluZGVyTWVzaENvbXBvbmVudCl9XSxcclxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDeWxpbmRlck1lc2hDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdE1lc2gge1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHJhZGl1c1RvcCA9IDEuMDtcclxuICBASW5wdXQoKVxyXG4gIHJhZGl1c0JvdHRvbSA9IDEuMDtcclxuICBASW5wdXQoKVxyXG4gIGhlaWdodCA9IDEuMDtcclxuICBASW5wdXQoKVxyXG4gIHJhZGlhbFNlZ21lbnRzID0gODtcclxuICBASW5wdXQoKVxyXG4gIGhlaWdodFNlZ21lbnRzID0gMTtcclxuICBASW5wdXQoKVxyXG4gIG9wZW5FbmRlZCA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpXHJcbiAgdGhldGFTdGFydCA9IDAuMDtcclxuICBASW5wdXQoKVxyXG4gIHRoZXRhTGVuZ3RoID0gMiAqIE1hdGguUEk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIHJlbmRlcmVyU2VydmljZTogUmVuZGVyZXJTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICBzdXBlcihyZW5kZXJlclNlcnZpY2UpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ0N5bGluZGVyTWVzaENvbXBvbmVudC5jb25zdHJ1Y3RvcicpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIG5ld09iamVjdDNESW5zdGFuY2UoKTogVEhSRUUuTWVzaCB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnQ3lsaW5kZXJNZXNoQ29tcG9uZW50Lm5ld09iamVjdDNESW5zdGFuY2UnKTtcclxuICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkodGhpcy5yYWRpdXNUb3AsIHRoaXMucmFkaXVzQm90dG9tLCB0aGlzLmhlaWdodCwgdGhpcy5yYWRpYWxTZWdtZW50cywgdGhpcy5oZWlnaHRTZWdtZW50cyxcclxuICAgICAgdGhpcy5vcGVuRW5kZWQsIHRoaXMudGhldGFTdGFydCwgdGhpcy50aGV0YUxlbmd0aCk7XHJcbiAgICBjb25zdCBtYXRlcmlhbCA9IHRoaXMuZ2V0TWF0ZXJpYWwoKTtcclxuICAgIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgdGhpcy5hcHBseVNoYWRvd1Byb3BzKG1lc2gpO1xyXG4gICAgcmV0dXJuIG1lc2g7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=