/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractMesh } from './abstract-mesh-3d';
import { AbstractObject3D } from '../abstract-object-3d';
import { RendererService } from '../../renderer/renderer.service';
export class FrameMeshComponent extends AbstractMesh {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        super(rendererService);
        this.rendererService = rendererService;
        this.thickness = 2;
        this.sizeX = 20;
        this.sizeY = 20;
    }
    /**
     * @protected
     * @return {?}
     */
    newObject3DInstance() {
        /** @type {?} */
        const halfX = this.sizeX / 2.0;
        /** @type {?} */
        const halfY = this.sizeY / 2.0;
        /** @type {?} */
        const t = this.thickness;
        /** @type {?} */
        const shape = new THREE.Shape();
        shape.moveTo(-halfX, halfY);
        shape.lineTo(-halfX - t, halfY + t);
        shape.lineTo(halfX + t, halfY + t);
        shape.lineTo(halfX + t, -halfY - t);
        shape.lineTo(-halfX - t, -halfY - t);
        shape.lineTo(-halfX - t, halfY + t);
        shape.lineTo(-halfX, halfY);
        shape.lineTo(-halfX, -halfY);
        shape.lineTo(halfX, -halfY);
        shape.lineTo(halfX, halfY);
        shape.lineTo(-halfX, halfY);
        /** @type {?} */
        const geometry = new THREE.ShapeBufferGeometry(shape);
        /** @type {?} */
        const material = this.getMaterial();
        /** @type {?} */
        const mesh = new THREE.Mesh(geometry, material);
        this.applyShadowProps(mesh);
        return mesh;
    }
}
FrameMeshComponent.decorators = [
    { type: Component, args: [{
                selector: 'atft-frame-mesh',
                providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => FrameMeshComponent)) }],
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
FrameMeshComponent.ctorParameters = () => [
    { type: RendererService }
];
FrameMeshComponent.propDecorators = {
    thickness: [{ type: Input }],
    sizeX: [{ type: Input }],
    sizeY: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FrameMeshComponent.prototype.thickness;
    /** @type {?} */
    FrameMeshComponent.prototype.sizeX;
    /** @type {?} */
    FrameMeshComponent.prototype.sizeY;
    /**
     * @type {?}
     * @protected
     */
    FrameMeshComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWUtbWVzaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL29iamVjdC9tZXNoL2ZyYW1lLW1lc2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQU9oRSxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsWUFBWTs7OztJQVdsRCxZQUNZLGVBQWdDO1FBRTFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUZiLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQVQ1QyxjQUFTLEdBQUcsQ0FBQyxDQUFDO1FBR2QsVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUdYLFVBQUssR0FBRyxFQUFFLENBQUM7SUFNWCxDQUFDOzs7OztJQUVTLG1CQUFtQjs7Y0FFckIsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRzs7Y0FDeEIsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRzs7Y0FDeEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTOztjQUVsQixLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO1FBRS9CLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDNUIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbkMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUVwQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzVCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QixLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVCLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7O2NBRXRCLFFBQVEsR0FBRyxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUM7O2NBQy9DLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFOztjQUM3QixJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7UUFFL0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7O1lBakRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixFQUFDLEVBQUMsQ0FBQztnQkFDM0YsUUFBUSxFQUFFLDJCQUEyQjthQUN0Qzs7OztZQU5PLGVBQWU7Ozt3QkFTcEIsS0FBSztvQkFHTCxLQUFLO29CQUdMLEtBQUs7Ozs7SUFOTix1Q0FDYzs7SUFFZCxtQ0FDVzs7SUFFWCxtQ0FDVzs7Ozs7SUFHVCw2Q0FBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCB7QWJzdHJhY3RNZXNofSBmcm9tICcuL2Fic3RyYWN0LW1lc2gtM2QnO1xyXG5pbXBvcnQge0Fic3RyYWN0T2JqZWN0M0R9IGZyb20gJy4uL2Fic3RyYWN0LW9iamVjdC0zZCc7XHJcbmltcG9ydCB7UmVuZGVyZXJTZXJ2aWNlfSBmcm9tICcuLi8uLi9yZW5kZXJlci9yZW5kZXJlci5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXRmdC1mcmFtZS1tZXNoJyxcclxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogQWJzdHJhY3RPYmplY3QzRCwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRnJhbWVNZXNoQ29tcG9uZW50KX1dLFxyXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PidcclxufSlcclxuZXhwb3J0IGNsYXNzIEZyYW1lTWVzaENvbXBvbmVudCBleHRlbmRzIEFic3RyYWN0TWVzaCB7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgdGhpY2tuZXNzID0gMjtcclxuXHJcbiAgQElucHV0KClcclxuICBzaXplWCA9IDIwO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHNpemVZID0gMjA7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIHJlbmRlcmVyU2VydmljZTogUmVuZGVyZXJTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICBzdXBlcihyZW5kZXJlclNlcnZpY2UpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIG5ld09iamVjdDNESW5zdGFuY2UoKTogVEhSRUUuTWVzaCB7XHJcblxyXG4gICAgY29uc3QgaGFsZlggPSB0aGlzLnNpemVYIC8gMi4wO1xyXG4gICAgY29uc3QgaGFsZlkgPSB0aGlzLnNpemVZIC8gMi4wO1xyXG4gICAgY29uc3QgdCA9IHRoaXMudGhpY2tuZXNzO1xyXG5cclxuICAgIGNvbnN0IHNoYXBlID0gbmV3IFRIUkVFLlNoYXBlKCk7XHJcblxyXG4gICAgc2hhcGUubW92ZVRvKC1oYWxmWCwgaGFsZlkpO1xyXG4gICAgc2hhcGUubGluZVRvKC1oYWxmWCAtIHQsIGhhbGZZICsgdCk7XHJcbiAgICBzaGFwZS5saW5lVG8oaGFsZlggKyB0LCBoYWxmWSArIHQpO1xyXG4gICAgc2hhcGUubGluZVRvKGhhbGZYICsgdCwgLWhhbGZZIC0gdCk7XHJcbiAgICBzaGFwZS5saW5lVG8oLWhhbGZYIC0gdCwgLWhhbGZZIC0gdCk7XHJcbiAgICBzaGFwZS5saW5lVG8oLWhhbGZYIC0gdCwgaGFsZlkgKyB0KTtcclxuXHJcbiAgICBzaGFwZS5saW5lVG8oLWhhbGZYLCBoYWxmWSk7XHJcbiAgICBzaGFwZS5saW5lVG8oLWhhbGZYLCAtaGFsZlkpO1xyXG4gICAgc2hhcGUubGluZVRvKGhhbGZYLCAtaGFsZlkpO1xyXG4gICAgc2hhcGUubGluZVRvKGhhbGZYLCBoYWxmWSk7XHJcbiAgICBzaGFwZS5saW5lVG8oLWhhbGZYLCBoYWxmWSk7XHJcblxyXG4gICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU2hhcGVCdWZmZXJHZW9tZXRyeShzaGFwZSk7XHJcbiAgICBjb25zdCBtYXRlcmlhbCA9IHRoaXMuZ2V0TWF0ZXJpYWwoKTtcclxuICAgIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG5cclxuICAgIHRoaXMuYXBwbHlTaGFkb3dQcm9wcyhtZXNoKTtcclxuICAgIHJldHVybiBtZXNoO1xyXG4gIH1cclxuXHJcbn1cclxuIl19