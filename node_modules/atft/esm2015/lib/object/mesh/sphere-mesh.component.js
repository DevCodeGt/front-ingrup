/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractMesh } from './abstract-mesh-3d';
import { AbstractObject3D } from '../abstract-object-3d';
import { RendererService } from '../../renderer/renderer.service';
export class SphereMeshComponent extends AbstractMesh {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        super(rendererService);
        this.rendererService = rendererService;
    }
    /**
     * @protected
     * @return {?}
     */
    newObject3DInstance() {
        // console.log('SphereMeshComponent.newObject3DInstance');
        /** @type {?} */
        const geometry = new THREE.SphereGeometry(this.radius, this.widthSegments, this.hightSegments);
        /** @type {?} */
        const material = this.getMaterial();
        /** @type {?} */
        const mesh = new THREE.Mesh(geometry, material);
        this.applyShadowProps(mesh);
        return mesh;
    }
}
SphereMeshComponent.decorators = [
    { type: Component, args: [{
                selector: 'atft-sphere-mesh',
                providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => SphereMeshComponent)) }],
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
SphereMeshComponent.ctorParameters = () => [
    { type: RendererService }
];
SphereMeshComponent.propDecorators = {
    radius: [{ type: Input }],
    widthSegments: [{ type: Input }],
    hightSegments: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SphereMeshComponent.prototype.radius;
    /** @type {?} */
    SphereMeshComponent.prototype.widthSegments;
    /** @type {?} */
    SphereMeshComponent.prototype.hightSegments;
    /**
     * @type {?}
     * @protected
     */
    SphereMeshComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BoZXJlLW1lc2guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXRmdC8iLCJzb3VyY2VzIjpbImxpYi9vYmplY3QvbWVzaC9zcGhlcmUtbWVzaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDaEQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDdkQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBT2hFLE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxZQUFZOzs7O0lBTW5ELFlBQ1ksZUFBZ0M7UUFFMUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRmIsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBRzVDLENBQUM7Ozs7O0lBRVMsbUJBQW1COzs7Y0FFckIsUUFBUSxHQUFHLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQzs7Y0FDeEYsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUU7O2NBQzdCLElBQUksR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7WUF4QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUMsRUFBQyxDQUFDO2dCQUM1RixRQUFRLEVBQUUsMkJBQTJCO2FBQ3RDOzs7O1lBTk8sZUFBZTs7O3FCQVNwQixLQUFLOzRCQUNMLEtBQUs7NEJBQ0wsS0FBSzs7OztJQUZOLHFDQUF3Qjs7SUFDeEIsNENBQStCOztJQUMvQiw0Q0FBK0I7Ozs7O0lBRzdCLDhDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuaW1wb3J0IHtBYnN0cmFjdE1lc2h9IGZyb20gJy4vYWJzdHJhY3QtbWVzaC0zZCc7XHJcbmltcG9ydCB7QWJzdHJhY3RPYmplY3QzRH0gZnJvbSAnLi4vYWJzdHJhY3Qtb2JqZWN0LTNkJztcclxuaW1wb3J0IHtSZW5kZXJlclNlcnZpY2V9IGZyb20gJy4uLy4uL3JlbmRlcmVyL3JlbmRlcmVyLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhdGZ0LXNwaGVyZS1tZXNoJyxcclxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogQWJzdHJhY3RPYmplY3QzRCwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gU3BoZXJlTWVzaENvbXBvbmVudCl9XSxcclxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTcGhlcmVNZXNoQ29tcG9uZW50IGV4dGVuZHMgQWJzdHJhY3RNZXNoIHtcclxuXHJcbiAgQElucHV0KCkgcmFkaXVzOiBudW1iZXI7XHJcbiAgQElucHV0KCkgd2lkdGhTZWdtZW50czogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIGhpZ2h0U2VnbWVudHM6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbmV3T2JqZWN0M0RJbnN0YW5jZSgpOiBUSFJFRS5NZXNoIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdTcGhlcmVNZXNoQ29tcG9uZW50Lm5ld09iamVjdDNESW5zdGFuY2UnKTtcclxuICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KHRoaXMucmFkaXVzLCB0aGlzLndpZHRoU2VnbWVudHMsIHRoaXMuaGlnaHRTZWdtZW50cyk7XHJcbiAgICBjb25zdCBtYXRlcmlhbCA9IHRoaXMuZ2V0TWF0ZXJpYWwoKTtcclxuICAgIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgdGhpcy5hcHBseVNoYWRvd1Byb3BzKG1lc2gpO1xyXG4gICAgcmV0dXJuIG1lc2g7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=