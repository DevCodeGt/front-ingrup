/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { AbstractObject3D } from '../abstract-object-3d';
import { appliedMaterial } from '../../util';
/**
 * @abstract
 */
export class AbstractMesh extends AbstractObject3D {
    constructor() {
        super(...arguments);
        this.materialColor = 0x5DADE2;
        this.castShadow = true;
        this.receiveShadow = true;
        this.depthWrite = true;
    }
    /**
     * @protected
     * @return {?}
     */
    getMaterial() {
        return appliedMaterial(this.materialColor, this.material, this.depthWrite);
    }
    /**
     * @protected
     * @param {?} mesh
     * @return {?}
     */
    applyShadowProps(mesh) {
        mesh.castShadow = this.castShadow;
        mesh.receiveShadow = this.receiveShadow;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        if (!this.getObject()) {
            return;
        }
        /** @type {?} */
        let mustRerender = false;
        if (['material', 'materialColor', 'depthWrite'].some((/**
         * @param {?} propName
         * @return {?}
         */
        propName => propName in changes))) {
            this.applyMaterial();
            mustRerender = true;
        }
        if (mustRerender) {
            this.rendererService.render();
        }
    }
    /**
     * @return {?}
     */
    applyMaterial() {
        this.getObject().material = this.getMaterial();
    }
}
AbstractMesh.propDecorators = {
    material: [{ type: Input }],
    materialColor: [{ type: Input }],
    castShadow: [{ type: Input }],
    receiveShadow: [{ type: Input }],
    depthWrite: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AbstractMesh.prototype.material;
    /** @type {?} */
    AbstractMesh.prototype.materialColor;
    /** @type {?} */
    AbstractMesh.prototype.castShadow;
    /** @type {?} */
    AbstractMesh.prototype.receiveShadow;
    /** @type {?} */
    AbstractMesh.prototype.depthWrite;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtbWVzaC0zZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2F0ZnQvIiwic291cmNlcyI6WyJsaWIvb2JqZWN0L21lc2gvYWJzdHJhY3QtbWVzaC0zZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLEtBQUssRUFBMkIsTUFBTSxlQUFlLENBQUM7QUFFOUQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDdkQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLFlBQVksQ0FBQzs7OztBQUUzQyxNQUFNLE9BQWdCLFlBQWEsU0FBUSxnQkFBNEI7SUFBdkU7O1FBTUUsa0JBQWEsR0FBRyxRQUFRLENBQUM7UUFHekIsZUFBVSxHQUFHLElBQUksQ0FBQztRQUdsQixrQkFBYSxHQUFHLElBQUksQ0FBQztRQUdyQixlQUFVLEdBQUcsSUFBSSxDQUFDO0lBaUNwQixDQUFDOzs7OztJQS9CVyxXQUFXO1FBQ25CLE9BQU8sZUFBZSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0UsQ0FBQzs7Ozs7O0lBRVMsZ0JBQWdCLENBQUMsSUFBZ0I7UUFDekMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUMxQyxDQUFDOzs7OztJQUVNLFdBQVcsQ0FBQyxPQUFzQjtRQUN2QyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDckIsT0FBTztTQUNSOztZQUVHLFlBQVksR0FBRyxLQUFLO1FBQ3hCLElBQUksQ0FBQyxVQUFVLEVBQUUsZUFBZSxFQUFFLFlBQVksQ0FBQyxDQUFDLElBQUk7Ozs7UUFBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsSUFBSSxPQUFPLEVBQUMsRUFBRTtZQUNyRixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDckIsWUFBWSxHQUFHLElBQUksQ0FBQztTQUNyQjtRQUVELElBQUksWUFBWSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDL0I7SUFDSCxDQUFDOzs7O0lBRU0sYUFBYTtRQUNsQixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNqRCxDQUFDOzs7dUJBM0NBLEtBQUs7NEJBR0wsS0FBSzt5QkFHTCxLQUFLOzRCQUdMLEtBQUs7eUJBR0wsS0FBSzs7OztJQVpOLGdDQUNpQjs7SUFFakIscUNBQ3lCOztJQUV6QixrQ0FDa0I7O0lBRWxCLHFDQUNxQjs7SUFFckIsa0NBQ2tCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5pbXBvcnQge0Fic3RyYWN0T2JqZWN0M0R9IGZyb20gJy4uL2Fic3RyYWN0LW9iamVjdC0zZCc7XHJcbmltcG9ydCB7YXBwbGllZE1hdGVyaWFsfSBmcm9tICcuLi8uLi91dGlsJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdE1lc2ggZXh0ZW5kcyBBYnN0cmFjdE9iamVjdDNEPFRIUkVFLk1lc2g+IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuXHJcbiAgQElucHV0KClcclxuICBtYXRlcmlhbDogc3RyaW5nO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIG1hdGVyaWFsQ29sb3IgPSAweDVEQURFMjtcclxuXHJcbiAgQElucHV0KClcclxuICBjYXN0U2hhZG93ID0gdHJ1ZTtcclxuXHJcbiAgQElucHV0KClcclxuICByZWNlaXZlU2hhZG93ID0gdHJ1ZTtcclxuXHJcbiAgQElucHV0KClcclxuICBkZXB0aFdyaXRlID0gdHJ1ZTtcclxuXHJcbiAgcHJvdGVjdGVkIGdldE1hdGVyaWFsKCk6IFRIUkVFLk1hdGVyaWFsIHtcclxuICAgIHJldHVybiBhcHBsaWVkTWF0ZXJpYWwodGhpcy5tYXRlcmlhbENvbG9yLCB0aGlzLm1hdGVyaWFsLCB0aGlzLmRlcHRoV3JpdGUpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGFwcGx5U2hhZG93UHJvcHMobWVzaDogVEhSRUUuTWVzaCkge1xyXG4gICAgbWVzaC5jYXN0U2hhZG93ID0gdGhpcy5jYXN0U2hhZG93O1xyXG4gICAgbWVzaC5yZWNlaXZlU2hhZG93ID0gdGhpcy5yZWNlaXZlU2hhZG93O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgIHN1cGVyLm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xyXG4gICAgaWYgKCF0aGlzLmdldE9iamVjdCgpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbXVzdFJlcmVuZGVyID0gZmFsc2U7XHJcbiAgICBpZiAoWydtYXRlcmlhbCcsICdtYXRlcmlhbENvbG9yJywgJ2RlcHRoV3JpdGUnXS5zb21lKHByb3BOYW1lID0+IHByb3BOYW1lIGluIGNoYW5nZXMpKSB7XHJcbiAgICAgIHRoaXMuYXBwbHlNYXRlcmlhbCgpO1xyXG4gICAgICBtdXN0UmVyZW5kZXIgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChtdXN0UmVyZW5kZXIpIHtcclxuICAgICAgdGhpcy5yZW5kZXJlclNlcnZpY2UucmVuZGVyKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXBwbHlNYXRlcmlhbCgpIHtcclxuICAgIHRoaXMuZ2V0T2JqZWN0KCkubWF0ZXJpYWwgPSB0aGlzLmdldE1hdGVyaWFsKCk7XHJcbiAgfVxyXG5cclxuXHJcbn1cclxuIl19