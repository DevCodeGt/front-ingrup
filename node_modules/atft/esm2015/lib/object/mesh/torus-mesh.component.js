/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractMesh } from './abstract-mesh-3d';
import { AbstractObject3D } from '../abstract-object-3d';
import { RendererService } from '../../renderer/renderer.service';
export class TorusMeshComponent extends AbstractMesh {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        super(rendererService);
        this.rendererService = rendererService;
        /**
         * Radius of the torus, from the center of the torus to the center of the tube
         */
        this.radius = 0.4;
        this.radialSegments = 8;
        this.tubularSegments = 6;
        this.arc = Math.PI * 2;
    }
    /**
     * @protected
     * @return {?}
     */
    newObject3DInstance() {
        this.radius *= 1;
        this.tube *= 1;
        this.radialSegments *= 1;
        this.tubularSegments *= 1;
        /** @type {?} */
        const geometry = new THREE.TorusGeometry(this.radius, this.tube, this.radialSegments, this.tubularSegments);
        /** @type {?} */
        const material = this.getMaterial();
        /** @type {?} */
        const mesh = new THREE.Mesh(geometry, material);
        this.applyShadowProps(mesh);
        return mesh;
    }
}
TorusMeshComponent.decorators = [
    { type: Component, args: [{
                selector: 'atft-torus-mesh',
                providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TorusMeshComponent)) }],
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
TorusMeshComponent.ctorParameters = () => [
    { type: RendererService }
];
TorusMeshComponent.propDecorators = {
    radius: [{ type: Input }],
    tube: [{ type: Input }],
    radialSegments: [{ type: Input }],
    tubularSegments: [{ type: Input }],
    arc: [{ type: Input }]
};
if (false) {
    /**
     * Radius of the torus, from the center of the torus to the center of the tube
     * @type {?}
     */
    TorusMeshComponent.prototype.radius;
    /**
     * Radius of the tube.
     * @type {?}
     */
    TorusMeshComponent.prototype.tube;
    /** @type {?} */
    TorusMeshComponent.prototype.radialSegments;
    /** @type {?} */
    TorusMeshComponent.prototype.tubularSegments;
    /** @type {?} */
    TorusMeshComponent.prototype.arc;
    /**
     * @type {?}
     * @protected
     */
    TorusMeshComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9ydXMtbWVzaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL29iamVjdC9tZXNoL3RvcnVzLW1lc2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQU9oRSxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsWUFBWTs7OztJQXNCbEQsWUFDWSxlQUFnQztRQUUxQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFGYixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7Ozs7UUFsQm5DLFdBQU0sR0FBRyxHQUFHLENBQUM7UUFTdEIsbUJBQWMsR0FBRyxDQUFDLENBQUM7UUFHbkIsb0JBQWUsR0FBRyxDQUFDLENBQUM7UUFHcEIsUUFBRyxHQUFXLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBTTFCLENBQUM7Ozs7O0lBRVMsbUJBQW1CO1FBQzNCLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLGNBQWMsSUFBSSxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLGVBQWUsSUFBSSxDQUFDLENBQUM7O2NBRXBCLFFBQVEsR0FBRyxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxFQUM3RCxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUM7O2NBQ3RDLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFOztjQUM3QixJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7UUFDL0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7O1lBN0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixFQUFDLEVBQUUsQ0FBQztnQkFDN0YsUUFBUSxFQUFFLDJCQUEyQjthQUN0Qzs7OztZQU5PLGVBQWU7OztxQkFZcEIsS0FBSzttQkFLTCxLQUFLOzZCQUdMLEtBQUs7OEJBR0wsS0FBSztrQkFHTCxLQUFLOzs7Ozs7O0lBZE4sb0NBQXNCOzs7OztJQUt0QixrQ0FDYTs7SUFFYiw0Q0FDbUI7O0lBRW5CLDZDQUNvQjs7SUFFcEIsaUNBQzBCOzs7OztJQUd4Qiw2Q0FBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCB7QWJzdHJhY3RNZXNofSBmcm9tICcuL2Fic3RyYWN0LW1lc2gtM2QnO1xyXG5pbXBvcnQge0Fic3RyYWN0T2JqZWN0M0R9IGZyb20gJy4uL2Fic3RyYWN0LW9iamVjdC0zZCc7XHJcbmltcG9ydCB7UmVuZGVyZXJTZXJ2aWNlfSBmcm9tICcuLi8uLi9yZW5kZXJlci9yZW5kZXJlci5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXRmdC10b3J1cy1tZXNoJyxcclxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IEFic3RyYWN0T2JqZWN0M0QsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRvcnVzTWVzaENvbXBvbmVudCkgfV0sXHJcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVG9ydXNNZXNoQ29tcG9uZW50IGV4dGVuZHMgQWJzdHJhY3RNZXNoIHtcclxuXHJcbiAgLyoqXHJcbiAgICogUmFkaXVzIG9mIHRoZSB0b3J1cywgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSB0b3J1cyB0byB0aGUgY2VudGVyIG9mIHRoZSB0dWJlXHJcbiAgICovXHJcbiAgQElucHV0KCkgcmFkaXVzID0gMC40O1xyXG5cclxuICAvKipcclxuICAgKiBSYWRpdXMgb2YgdGhlIHR1YmUuXHJcbiAgICovXHJcbiAgQElucHV0KClcclxuICB0dWJlOiBudW1iZXI7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcmFkaWFsU2VnbWVudHMgPSA4O1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHR1YnVsYXJTZWdtZW50cyA9IDY7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgYXJjOiBudW1iZXIgPSBNYXRoLlBJICogMjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbmV3T2JqZWN0M0RJbnN0YW5jZSgpOiBUSFJFRS5NZXNoIHtcclxuICAgIHRoaXMucmFkaXVzICo9IDE7XHJcbiAgICB0aGlzLnR1YmUgKj0gMTtcclxuICAgIHRoaXMucmFkaWFsU2VnbWVudHMgKj0gMTtcclxuICAgIHRoaXMudHVidWxhclNlZ21lbnRzICo9IDE7XHJcblxyXG4gICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuVG9ydXNHZW9tZXRyeSh0aGlzLnJhZGl1cywgdGhpcy50dWJlLFxyXG4gICAgICB0aGlzLnJhZGlhbFNlZ21lbnRzLCB0aGlzLnR1YnVsYXJTZWdtZW50cyk7XHJcbiAgICBjb25zdCBtYXRlcmlhbCA9IHRoaXMuZ2V0TWF0ZXJpYWwoKTtcclxuICAgIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgdGhpcy5hcHBseVNoYWRvd1Byb3BzKG1lc2gpO1xyXG4gICAgcmV0dXJuIG1lc2g7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=