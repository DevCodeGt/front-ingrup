/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractObject3D } from '../abstract-object-3d';
import { AbstractConnector } from './abstract-connector';
import { appliedColor } from '../../util/applied-color';
import { RendererService } from '../../renderer/renderer.service';
export class LineConnectorComponent extends AbstractConnector {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        super(rendererService);
        this.rendererService = rendererService;
        this.materialColor = 0xffff00;
    }
    /**
     * @return {?}
     */
    createConnectorObject() {
        this.geometry = this.getLineGeometry();
        /** @type {?} */
        const material = new THREE.LineBasicMaterial({
            color: appliedColor(this.materialColor),
            /**
             * NOTE: linewidth=1: Due to limitations of the OpenGL Core Profile
             * with the WebGL renderer on most platforms linewidth will always be 1
             * regardless of the set value.
             */
            linewidth: 1
        });
        /** @type {?} */
        const line = new THREE.Line(this.geometry, material);
        return line;
    }
    /**
     * @return {?}
     */
    updateLineGeometry() {
        this.geometry.verticesNeedUpdate = true;
        this.rendererService.render();
    }
}
LineConnectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'atft-line-connector',
                providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => LineConnectorComponent)) }],
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
LineConnectorComponent.ctorParameters = () => [
    { type: RendererService }
];
LineConnectorComponent.propDecorators = {
    materialColor: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    LineConnectorComponent.prototype.materialColor;
    /**
     * @type {?}
     * @private
     */
    LineConnectorComponent.prototype.geometry;
    /**
     * @type {?}
     * @protected
     */
    LineConnectorComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS1jb25uZWN0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXRmdC8iLCJzb3VyY2VzIjpbImxpYi9vYmplY3QvY29ubmVjdG9yL2xpbmUtY29ubmVjdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFPaEUsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGlCQUE2Qjs7OztJQVF2RSxZQUFzQixlQUFnQztRQUNwRCxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFESCxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFMdEQsa0JBQWEsR0FBRyxRQUFRLENBQUM7SUFPekIsQ0FBQzs7OztJQUVNLHFCQUFxQjtRQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQzs7Y0FFakMsUUFBUSxHQUFHLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDO1lBQzNDLEtBQUssRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzs7Ozs7O1lBTXZDLFNBQVMsRUFBRSxDQUFDO1NBQ2IsQ0FBQzs7Y0FFSSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO1FBRXBELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7OztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztRQUN4QyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hDLENBQUM7OztZQXRDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLFVBQVU7Ozt3QkFBQyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsRUFBQyxFQUFDLENBQUM7Z0JBQy9GLFFBQVEsRUFBRSwyQkFBMkI7YUFDdEM7Ozs7WUFOTyxlQUFlOzs7NEJBU3BCLEtBQUs7Ozs7SUFBTiwrQ0FDeUI7Ozs7O0lBR3pCLDBDQUFpQzs7Ozs7SUFFckIsaURBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5pbXBvcnQge0Fic3RyYWN0T2JqZWN0M0R9IGZyb20gJy4uL2Fic3RyYWN0LW9iamVjdC0zZCc7XHJcbmltcG9ydCB7QWJzdHJhY3RDb25uZWN0b3J9IGZyb20gJy4vYWJzdHJhY3QtY29ubmVjdG9yJztcclxuaW1wb3J0IHthcHBsaWVkQ29sb3J9IGZyb20gJy4uLy4uL3V0aWwvYXBwbGllZC1jb2xvcic7XHJcbmltcG9ydCB7UmVuZGVyZXJTZXJ2aWNlfSBmcm9tICcuLi8uLi9yZW5kZXJlci9yZW5kZXJlci5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXRmdC1saW5lLWNvbm5lY3RvcicsXHJcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IEFic3RyYWN0T2JqZWN0M0QsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IExpbmVDb25uZWN0b3JDb21wb25lbnQpfV0sXHJcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTGluZUNvbm5lY3RvckNvbXBvbmVudCBleHRlbmRzIEFic3RyYWN0Q29ubmVjdG9yPFRIUkVFLkxpbmU+IHtcclxuXHJcbiAgQElucHV0KClcclxuICBtYXRlcmlhbENvbG9yID0gMHhmZmZmMDA7XHJcblxyXG4gIC8vIFRPRE86IG1vdmUgdG8gYWJzdHJhY3Q/XHJcbiAgcHJpdmF0ZSBnZW9tZXRyeTogVEhSRUUuR2VvbWV0cnk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCByZW5kZXJlclNlcnZpY2U6IFJlbmRlcmVyU2VydmljZSkge1xyXG4gICAgc3VwZXIocmVuZGVyZXJTZXJ2aWNlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjcmVhdGVDb25uZWN0b3JPYmplY3QoKTogVEhSRUUuTGluZSB7XHJcbiAgICB0aGlzLmdlb21ldHJ5ID0gdGhpcy5nZXRMaW5lR2VvbWV0cnkoKTtcclxuXHJcbiAgICBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7XHJcbiAgICAgIGNvbG9yOiBhcHBsaWVkQ29sb3IodGhpcy5tYXRlcmlhbENvbG9yKSxcclxuICAgICAgLyoqXHJcbiAgICAgICAqIE5PVEU6IGxpbmV3aWR0aD0xOiBEdWUgdG8gbGltaXRhdGlvbnMgb2YgdGhlIE9wZW5HTCBDb3JlIFByb2ZpbGVcclxuICAgICAgICogd2l0aCB0aGUgV2ViR0wgcmVuZGVyZXIgb24gbW9zdCBwbGF0Zm9ybXMgbGluZXdpZHRoIHdpbGwgYWx3YXlzIGJlIDFcclxuICAgICAgICogcmVnYXJkbGVzcyBvZiB0aGUgc2V0IHZhbHVlLlxyXG4gICAgICAgKi9cclxuICAgICAgbGluZXdpZHRoOiAxXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBsaW5lID0gbmV3IFRIUkVFLkxpbmUodGhpcy5nZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG5cclxuICAgIHJldHVybiBsaW5lO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlTGluZUdlb21ldHJ5KCk6IHZvaWQge1xyXG4gICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPSB0cnVlO1xyXG4gICAgdGhpcy5yZW5kZXJlclNlcnZpY2UucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=