/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractObject3D } from '../abstract-object-3d';
/**
 * @abstract
 * @template T
 */
export class AbstractConnector extends AbstractObject3D {
    /**
     * @protected
     * @return {?}
     */
    newObject3DInstance() {
        /** @type {?} */
        const mesh = this.createConnectorObject();
        this.watchObjects();
        return mesh;
    }
    /**
     * @private
     * @return {?}
     */
    watchObjects() {
        this.source.changed.subscribe((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.updateLineGeometry();
        }));
        this.target.changed.subscribe((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.updateLineGeometry();
        }));
    }
    /**
     * @protected
     * @return {?}
     */
    getLineGeometry() {
        /** @type {?} */
        const geo = new THREE.Geometry();
        if (!this.source || !this.target) {
            throw new Error('AbstractConnector: source or target inputs are missing!');
        }
        geo.vertices.push(this.source.getObject().position);
        geo.vertices.push(this.target.getObject().position);
        return geo;
    }
}
AbstractConnector.propDecorators = {
    source: [{ type: Input }],
    target: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AbstractConnector.prototype.source;
    /** @type {?} */
    AbstractConnector.prototype.target;
    /**
     * Create line mesh
     * @abstract
     * @return {?}
     */
    AbstractConnector.prototype.createConnectorObject = function () { };
    /**
     * If at least one line end (source or target object)  changed, then line geoetry should be updated as well
     * // TODO: Calculate only when source/target positions were changed
     * @abstract
     * @return {?}
     */
    AbstractConnector.prototype.updateLineGeometry = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtY29ubmVjdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXRmdC8iLCJzb3VyY2VzIjpbImxpYi9vYmplY3QvY29ubmVjdG9yL2Fic3RyYWN0LWNvbm5lY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNwQyxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7QUFFdkQsTUFBTSxPQUFnQixpQkFBNEMsU0FBUSxnQkFBbUI7Ozs7O0lBUWpGLG1CQUFtQjs7Y0FDckIsSUFBSSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtRQUN6QyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7OztJQUVPLFlBQVk7UUFDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUzs7OztRQUFDLElBQUksQ0FBQyxFQUFFO1lBQ25DLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzVCLENBQUMsRUFBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUzs7OztRQUFDLElBQUksQ0FBQyxFQUFFO1lBQ25DLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzVCLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFUyxlQUFlOztjQUNqQixHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFO1FBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQyxNQUFNLElBQUksS0FBSyxDQUFDLHlEQUF5RCxDQUFDLENBQUM7U0FDNUU7UUFDRCxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BELEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEQsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOzs7cUJBOUJBLEtBQUs7cUJBR0wsS0FBSzs7OztJQUhOLG1DQUN5Qzs7SUFFekMsbUNBQ3lDOzs7Ozs7SUFnQ3pDLG9FQUFvQzs7Ozs7OztJQU1wQyxpRUFBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5pbXBvcnQge0Fic3RyYWN0T2JqZWN0M0R9IGZyb20gJy4uL2Fic3RyYWN0LW9iamVjdC0zZCc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RDb25uZWN0b3I8VCBleHRlbmRzIFRIUkVFLk9iamVjdDNEPiBleHRlbmRzIEFic3RyYWN0T2JqZWN0M0Q8VD4ge1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHNvdXJjZTogQWJzdHJhY3RPYmplY3QzRDxUSFJFRS5PYmplY3QzRD47XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgdGFyZ2V0OiBBYnN0cmFjdE9iamVjdDNEPFRIUkVFLk9iamVjdDNEPjtcclxuXHJcbiAgcHJvdGVjdGVkIG5ld09iamVjdDNESW5zdGFuY2UoKTogVCB7XHJcbiAgICBjb25zdCBtZXNoID0gdGhpcy5jcmVhdGVDb25uZWN0b3JPYmplY3QoKTtcclxuICAgIHRoaXMud2F0Y2hPYmplY3RzKCk7XHJcbiAgICByZXR1cm4gbWVzaDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgd2F0Y2hPYmplY3RzKCkge1xyXG4gICAgdGhpcy5zb3VyY2UuY2hhbmdlZC5zdWJzY3JpYmUoaXRlbSA9PiB7XHJcbiAgICAgIHRoaXMudXBkYXRlTGluZUdlb21ldHJ5KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnRhcmdldC5jaGFuZ2VkLnN1YnNjcmliZShpdGVtID0+IHtcclxuICAgICAgdGhpcy51cGRhdGVMaW5lR2VvbWV0cnkoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGdldExpbmVHZW9tZXRyeSgpOiBUSFJFRS5HZW9tZXRyeSB7XHJcbiAgICBjb25zdCBnZW8gPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcclxuICAgIGlmICghdGhpcy5zb3VyY2UgfHwgIXRoaXMudGFyZ2V0KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWJzdHJhY3RDb25uZWN0b3I6IHNvdXJjZSBvciB0YXJnZXQgaW5wdXRzIGFyZSBtaXNzaW5nIScpO1xyXG4gICAgfVxyXG4gICAgZ2VvLnZlcnRpY2VzLnB1c2godGhpcy5zb3VyY2UuZ2V0T2JqZWN0KCkucG9zaXRpb24pO1xyXG4gICAgZ2VvLnZlcnRpY2VzLnB1c2godGhpcy50YXJnZXQuZ2V0T2JqZWN0KCkucG9zaXRpb24pO1xyXG4gICAgcmV0dXJuIGdlbztcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgbGluZSBtZXNoXHJcbiAgICovXHJcbiAgYWJzdHJhY3QgY3JlYXRlQ29ubmVjdG9yT2JqZWN0KCk6IFQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIElmIGF0IGxlYXN0IG9uZSBsaW5lIGVuZCAoc291cmNlIG9yIHRhcmdldCBvYmplY3QpICBjaGFuZ2VkLCB0aGVuIGxpbmUgZ2VvZXRyeSBzaG91bGQgYmUgdXBkYXRlZCBhcyB3ZWxsXHJcbiAgICogLy8gVE9ETzogQ2FsY3VsYXRlIG9ubHkgd2hlbiBzb3VyY2UvdGFyZ2V0IHBvc2l0aW9ucyB3ZXJlIGNoYW5nZWRcclxuICAgKi9cclxuICBhYnN0cmFjdCB1cGRhdGVMaW5lR2VvbWV0cnkoKTogdm9pZDtcclxuXHJcbn1cclxuIl19