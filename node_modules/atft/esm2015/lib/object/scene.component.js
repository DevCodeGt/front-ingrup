/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractObject3D } from './abstract-object-3d';
import { appliedColor } from '../util/applied-color';
import { RendererService } from '../renderer/renderer.service';
export class SceneComponent extends AbstractObject3D {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        super(rendererService);
        this.rendererService = rendererService;
        this.background = 0xffffff;
        this.fog = false;
        this.fogColor = 0xa0a0a0;
        this.fogNear = 10;
        this.fogFar = 500;
        // TODO: directive?
        rendererService.setScene(this);
    }
    /**
     * @protected
     * @return {?}
     */
    newObject3DInstance() {
        /** @type {?} */
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(appliedColor(this.background));
        if (this.fog === true) {
            scene.fog = new THREE.Fog(appliedColor(this.fogColor), this.fogNear, this.fogFar);
        }
        return scene;
    }
}
SceneComponent.decorators = [
    { type: Component, args: [{
                selector: 'atft-scene',
                providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => SceneComponent)) }],
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
SceneComponent.ctorParameters = () => [
    { type: RendererService }
];
SceneComponent.propDecorators = {
    background: [{ type: Input }],
    fog: [{ type: Input }],
    fogColor: [{ type: Input }],
    fogNear: [{ type: Input }],
    fogFar: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SceneComponent.prototype.background;
    /** @type {?} */
    SceneComponent.prototype.fog;
    /** @type {?} */
    SceneComponent.prototype.fogColor;
    /** @type {?} */
    SceneComponent.prototype.fogNear;
    /** @type {?} */
    SceneComponent.prototype.fogFar;
    /**
     * @type {?}
     * @protected
     */
    SceneComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NlbmUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXRmdC8iLCJzb3VyY2VzIjpbImxpYi9vYmplY3Qvc2NlbmUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDdEQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ25ELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQU83RCxNQUFNLE9BQU8sY0FBZSxTQUFRLGdCQUE2Qjs7OztJQVEvRCxZQUNZLGVBQWdDO1FBRTFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUZiLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQVBuQyxlQUFVLEdBQUcsUUFBUSxDQUFDO1FBQ3RCLFFBQUcsR0FBRyxLQUFLLENBQUM7UUFDWixhQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3BCLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFDYixXQUFNLEdBQUcsR0FBRyxDQUFDO1FBTXBCLG1CQUFtQjtRQUNuQixlQUFlLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRVMsbUJBQW1COztjQUNyQixLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO1FBQy9CLEtBQUssQ0FBQyxVQUFVLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNsRSxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssSUFBSSxFQUFFO1lBQ3JCLEtBQUssQ0FBQyxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbkY7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7OztZQTVCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMsY0FBYyxFQUFDLEVBQUMsQ0FBQztnQkFDdkYsUUFBUSxFQUFFLDJCQUEyQjthQUN0Qzs7OztZQU5PLGVBQWU7Ozt5QkFTcEIsS0FBSztrQkFDTCxLQUFLO3VCQUNMLEtBQUs7c0JBQ0wsS0FBSztxQkFDTCxLQUFLOzs7O0lBSk4sb0NBQStCOztJQUMvQiw2QkFBcUI7O0lBQ3JCLGtDQUE2Qjs7SUFDN0IsaUNBQXNCOztJQUN0QixnQ0FBc0I7Ozs7O0lBR3BCLHlDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuaW1wb3J0IHtBYnN0cmFjdE9iamVjdDNEfSBmcm9tICcuL2Fic3RyYWN0LW9iamVjdC0zZCc7XHJcbmltcG9ydCB7YXBwbGllZENvbG9yfSBmcm9tICcuLi91dGlsL2FwcGxpZWQtY29sb3InO1xyXG5pbXBvcnQge1JlbmRlcmVyU2VydmljZX0gZnJvbSAnLi4vcmVuZGVyZXIvcmVuZGVyZXIuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2F0ZnQtc2NlbmUnLFxyXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBBYnN0cmFjdE9iamVjdDNELCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBTY2VuZUNvbXBvbmVudCl9XSxcclxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTY2VuZUNvbXBvbmVudCBleHRlbmRzIEFic3RyYWN0T2JqZWN0M0Q8VEhSRUUuU2NlbmU+IHtcclxuXHJcbiAgQElucHV0KCkgYmFja2dyb3VuZCA9IDB4ZmZmZmZmO1xyXG4gIEBJbnB1dCgpIGZvZyA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIGZvZ0NvbG9yID0gMHhhMGEwYTA7XHJcbiAgQElucHV0KCkgZm9nTmVhciA9IDEwO1xyXG4gIEBJbnB1dCgpIGZvZ0ZhciA9IDUwMDtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyU2VydmljZSk7XHJcbiAgICAvLyBUT0RPOiBkaXJlY3RpdmU/XHJcbiAgICByZW5kZXJlclNlcnZpY2Uuc2V0U2NlbmUodGhpcyk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbmV3T2JqZWN0M0RJbnN0YW5jZSgpOiBUSFJFRS5TY2VuZSB7XHJcbiAgICBjb25zdCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG4gICAgc2NlbmUuYmFja2dyb3VuZCA9IG5ldyBUSFJFRS5Db2xvcihhcHBsaWVkQ29sb3IodGhpcy5iYWNrZ3JvdW5kKSk7XHJcbiAgICBpZiAodGhpcy5mb2cgPT09IHRydWUpIHtcclxuICAgICAgc2NlbmUuZm9nID0gbmV3IFRIUkVFLkZvZyhhcHBsaWVkQ29sb3IodGhpcy5mb2dDb2xvciksIHRoaXMuZm9nTmVhciwgdGhpcy5mb2dGYXIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNjZW5lO1xyXG4gIH1cclxuXHJcbn1cclxuIl19