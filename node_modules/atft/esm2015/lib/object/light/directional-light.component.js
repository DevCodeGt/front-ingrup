/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractObject3D } from '../abstract-object-3d';
import { appliedColor } from '../../util/applied-color';
import { RendererService } from '../../renderer/renderer.service';
export class DirectionalLightComponent extends AbstractObject3D {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        super(rendererService);
        this.rendererService = rendererService;
        this.color = 0xffffff;
        this.intensity = 1;
        // by default, target is 0,0,0
        this.target = new THREE.Object3D();
        this.castShadow = true;
    }
    /**
     * @protected
     * @return {?}
     */
    newObject3DInstance() {
        /** @type {?} */
        const light = new THREE.DirectionalLight(appliedColor(this.color), this.intensity);
        light.target = this.target;
        if (this.castShadow === true) {
            light.castShadow = this.castShadow;
            // TODO: props
            light.shadow.camera.top = 100;
            light.shadow.camera.bottom = -100;
            light.shadow.camera.left = -100;
            light.shadow.camera.right = 100;
            light.shadow.camera.near = 0.1;
            light.shadow.camera.far = 500;
            light.shadow.mapSize.set(1024, 1024);
            light.shadow.bias = -0.001;
        }
        return light;
    }
}
DirectionalLightComponent.decorators = [
    { type: Component, args: [{
                selector: 'atft-directional-light',
                providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => DirectionalLightComponent)) }],
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
DirectionalLightComponent.ctorParameters = () => [
    { type: RendererService }
];
DirectionalLightComponent.propDecorators = {
    color: [{ type: Input }],
    intensity: [{ type: Input }],
    target: [{ type: Input }],
    castShadow: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DirectionalLightComponent.prototype.color;
    /** @type {?} */
    DirectionalLightComponent.prototype.intensity;
    /** @type {?} */
    DirectionalLightComponent.prototype.target;
    /** @type {?} */
    DirectionalLightComponent.prototype.castShadow;
    /**
     * @type {?}
     * @protected
     */
    DirectionalLightComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uYWwtbGlnaHQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXRmdC8iLCJzb3VyY2VzIjpbImxpYi9vYmplY3QvbGlnaHQvZGlyZWN0aW9uYWwtbGlnaHQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDdkQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ3RELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQU9oRSxNQUFNLE9BQU8seUJBQTBCLFNBQVEsZ0JBQXdDOzs7O0lBUXJGLFlBQ1ksZUFBZ0M7UUFFMUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRmIsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBUG5DLFVBQUssR0FBRyxRQUFRLENBQUM7UUFDakIsY0FBUyxHQUFHLENBQUMsQ0FBQzs7UUFFZCxXQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDOUIsZUFBVSxHQUFHLElBQUksQ0FBQztJQU0zQixDQUFDOzs7OztJQUVTLG1CQUFtQjs7Y0FFckIsS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUN0QyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUN4QixJQUFJLENBQUMsU0FBUyxDQUNmO1FBRUQsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRTNCLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxJQUFJLEVBQUU7WUFDNUIsS0FBSyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ25DLGNBQWM7WUFDZCxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1lBQzlCLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUNsQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUM7WUFDaEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztZQUNoQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1lBQy9CLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7WUFDOUIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNyQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQztTQUU1QjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBRWYsQ0FBQzs7O1lBM0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixFQUFDLEVBQUMsQ0FBQztnQkFDbEcsUUFBUSxFQUFFLDJCQUEyQjthQUN0Qzs7OztZQU5PLGVBQWU7OztvQkFTcEIsS0FBSzt3QkFDTCxLQUFLO3FCQUVMLEtBQUs7eUJBQ0wsS0FBSzs7OztJQUpOLDBDQUEwQjs7SUFDMUIsOENBQXVCOztJQUV2QiwyQ0FBdUM7O0lBQ3ZDLCtDQUEyQjs7Ozs7SUFHekIsb0RBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5pbXBvcnQge0Fic3RyYWN0T2JqZWN0M0R9IGZyb20gJy4uL2Fic3RyYWN0LW9iamVjdC0zZCc7XHJcbmltcG9ydCB7YXBwbGllZENvbG9yfSBmcm9tICcuLi8uLi91dGlsL2FwcGxpZWQtY29sb3InO1xyXG5pbXBvcnQge1JlbmRlcmVyU2VydmljZX0gZnJvbSAnLi4vLi4vcmVuZGVyZXIvcmVuZGVyZXIuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2F0ZnQtZGlyZWN0aW9uYWwtbGlnaHQnLFxyXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBBYnN0cmFjdE9iamVjdDNELCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBEaXJlY3Rpb25hbExpZ2h0Q29tcG9uZW50KX1dLFxyXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PidcclxufSlcclxuZXhwb3J0IGNsYXNzIERpcmVjdGlvbmFsTGlnaHRDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdE9iamVjdDNEPFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQ+IHtcclxuXHJcbiAgQElucHV0KCkgY29sb3IgPSAweGZmZmZmZjtcclxuICBASW5wdXQoKSBpbnRlbnNpdHkgPSAxO1xyXG4gIC8vIGJ5IGRlZmF1bHQsIHRhcmdldCBpcyAwLDAsMFxyXG4gIEBJbnB1dCgpIHRhcmdldCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gIEBJbnB1dCgpIGNhc3RTaGFkb3cgPSB0cnVlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCByZW5kZXJlclNlcnZpY2U6IFJlbmRlcmVyU2VydmljZVxyXG4gICkge1xyXG4gICAgc3VwZXIocmVuZGVyZXJTZXJ2aWNlKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBuZXdPYmplY3QzREluc3RhbmNlKCkge1xyXG5cclxuICAgIGNvbnN0IGxpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoXHJcbiAgICAgIGFwcGxpZWRDb2xvcih0aGlzLmNvbG9yKSxcclxuICAgICAgdGhpcy5pbnRlbnNpdHlcclxuICAgICk7XHJcblxyXG4gICAgbGlnaHQudGFyZ2V0ID0gdGhpcy50YXJnZXQ7XHJcblxyXG4gICAgaWYgKHRoaXMuY2FzdFNoYWRvdyA9PT0gdHJ1ZSkge1xyXG4gICAgICBsaWdodC5jYXN0U2hhZG93ID0gdGhpcy5jYXN0U2hhZG93O1xyXG4gICAgICAvLyBUT0RPOiBwcm9wc1xyXG4gICAgICBsaWdodC5zaGFkb3cuY2FtZXJhLnRvcCA9IDEwMDtcclxuICAgICAgbGlnaHQuc2hhZG93LmNhbWVyYS5ib3R0b20gPSAtMTAwO1xyXG4gICAgICBsaWdodC5zaGFkb3cuY2FtZXJhLmxlZnQgPSAtMTAwO1xyXG4gICAgICBsaWdodC5zaGFkb3cuY2FtZXJhLnJpZ2h0ID0gMTAwO1xyXG4gICAgICBsaWdodC5zaGFkb3cuY2FtZXJhLm5lYXIgPSAwLjE7XHJcbiAgICAgIGxpZ2h0LnNoYWRvdy5jYW1lcmEuZmFyID0gNTAwO1xyXG4gICAgICBsaWdodC5zaGFkb3cubWFwU2l6ZS5zZXQoMTAyNCwgMTAyNCk7XHJcbiAgICAgIGxpZ2h0LnNoYWRvdy5iaWFzID0gLTAuMDAxO1xyXG5cclxuICAgIH1cclxuICAgIHJldHVybiBsaWdodDtcclxuXHJcbiAgfVxyXG5cclxufVxyXG4iXX0=