/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractObject3D } from '../abstract-object-3d';
import { appliedColor } from '../../util/applied-color';
import { RendererService } from '../../renderer/renderer.service';
export class HemisphereLightComponent extends AbstractObject3D {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        super(rendererService);
        this.rendererService = rendererService;
        this.skyColor = 0xffffff;
        this.groundColor = 0x444444;
        this.intensity = 1;
    }
    /**
     * @protected
     * @return {?}
     */
    newObject3DInstance() {
        /** @type {?} */
        const light = new THREE.HemisphereLight(appliedColor(this.skyColor), appliedColor(this.groundColor), appliedColor(this.intensity));
        return light;
    }
}
HemisphereLightComponent.decorators = [
    { type: Component, args: [{
                selector: 'atft-hemisphere-light',
                providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => HemisphereLightComponent)) }],
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
HemisphereLightComponent.ctorParameters = () => [
    { type: RendererService }
];
HemisphereLightComponent.propDecorators = {
    skyColor: [{ type: Input }],
    groundColor: [{ type: Input }],
    intensity: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    HemisphereLightComponent.prototype.skyColor;
    /** @type {?} */
    HemisphereLightComponent.prototype.groundColor;
    /** @type {?} */
    HemisphereLightComponent.prototype.intensity;
    /**
     * @type {?}
     * @protected
     */
    HemisphereLightComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVtaXNwaGVyZS1saWdodC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL29iamVjdC9saWdodC9oZW1pc3BoZXJlLWxpZ2h0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFPaEUsTUFBTSxPQUFPLHdCQUF5QixTQUFRLGdCQUF1Qzs7OztJQU1uRixZQUNZLGVBQWdDO1FBRTFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUZiLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUxuQyxhQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3BCLGdCQUFXLEdBQUcsUUFBUSxDQUFDO1FBQ3ZCLGNBQVMsR0FBRyxDQUFDLENBQUM7SUFNdkIsQ0FBQzs7Ozs7SUFFUyxtQkFBbUI7O2NBRXJCLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQ3JDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQzNCLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQzlCLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQzdCO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7WUExQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx1QkFBdUI7Z0JBQ2pDLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMsd0JBQXdCLEVBQUMsRUFBRSxDQUFDO2dCQUNuRyxRQUFRLEVBQUUsMkJBQTJCO2FBQ3RDOzs7O1lBTk8sZUFBZTs7O3VCQVNwQixLQUFLOzBCQUNMLEtBQUs7d0JBQ0wsS0FBSzs7OztJQUZOLDRDQUE2Qjs7SUFDN0IsK0NBQWdDOztJQUNoQyw2Q0FBdUI7Ozs7O0lBR3JCLG1EQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuaW1wb3J0IHtBYnN0cmFjdE9iamVjdDNEfSBmcm9tICcuLi9hYnN0cmFjdC1vYmplY3QtM2QnO1xyXG5pbXBvcnQge2FwcGxpZWRDb2xvcn0gZnJvbSAnLi4vLi4vdXRpbC9hcHBsaWVkLWNvbG9yJztcclxuaW1wb3J0IHtSZW5kZXJlclNlcnZpY2V9IGZyb20gJy4uLy4uL3JlbmRlcmVyL3JlbmRlcmVyLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhdGZ0LWhlbWlzcGhlcmUtbGlnaHQnLFxyXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogQWJzdHJhY3RPYmplY3QzRCwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gSGVtaXNwaGVyZUxpZ2h0Q29tcG9uZW50KSB9XSxcclxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIZW1pc3BoZXJlTGlnaHRDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdE9iamVjdDNEPFRIUkVFLkhlbWlzcGhlcmVMaWdodD4ge1xyXG5cclxuICBASW5wdXQoKSBza3lDb2xvciA9IDB4ZmZmZmZmO1xyXG4gIEBJbnB1dCgpIGdyb3VuZENvbG9yID0gMHg0NDQ0NDQ7XHJcbiAgQElucHV0KCkgaW50ZW5zaXR5ID0gMTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbmV3T2JqZWN0M0RJbnN0YW5jZSgpIHtcclxuXHJcbiAgICBjb25zdCBsaWdodCA9IG5ldyBUSFJFRS5IZW1pc3BoZXJlTGlnaHQoXHJcbiAgICAgIGFwcGxpZWRDb2xvcih0aGlzLnNreUNvbG9yKSxcclxuICAgICAgYXBwbGllZENvbG9yKHRoaXMuZ3JvdW5kQ29sb3IpLFxyXG4gICAgICBhcHBsaWVkQ29sb3IodGhpcy5pbnRlbnNpdHkpXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiBsaWdodDtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==