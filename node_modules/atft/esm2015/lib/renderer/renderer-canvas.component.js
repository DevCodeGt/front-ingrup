/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, HostListener, ViewChild } from '@angular/core';
import { RendererService } from './renderer.service';
export class RendererCanvasComponent {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        this.rendererService = rendererService;
        // console.log('RendererComponent.constructor');
        this.onResize = this.onResize.bind(this);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // console.log('RendererComponent.ngAfterViewInit');
        this.rendererService.initialize(this.canvas);
    }
    /**
     * The render pane on which the scene is rendered.
     * Currently, only the WebGL renderer with a canvas is used in this
     * implementation, so this property will always be an ElementRef to the
     * underlying <canvas> element.
     *
     * \@example This property can be used to restrict the orbit control (i.e. the
     * area which is listened for mouse move and zoom events) to the rendering pane
     * @return {?}
     */
    get renderPane() {
        return this.canvasRef;
    }
    /**
     * @private
     * @return {?}
     */
    get canvas() {
        return this.canvasRef.nativeElement;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        // strange, but single 100% resizing has unexpected behaviour with flex CSS
        // as workaround - resettling to 100 pixels, then to 100%
        this.rendererService.resize(this.canvas, '100px');
        this.rendererService.resize(this.canvas, '100%');
    }
}
RendererCanvasComponent.decorators = [
    { type: Component, args: [{
                selector: 'atft-renderer-canvas',
                template: "<canvas #canvas>\r\n  <ng-content></ng-content>\r\n</canvas>\r\n",
                styles: [":host{display:flex;flex:1}canvas{flex:1}"]
            }] }
];
/** @nocollapse */
RendererCanvasComponent.ctorParameters = () => [
    { type: RendererService }
];
RendererCanvasComponent.propDecorators = {
    canvasRef: [{ type: ViewChild, args: ['canvas', { static: true },] }],
    onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    RendererCanvasComponent.prototype.canvasRef;
    /**
     * @type {?}
     * @private
     */
    RendererCanvasComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXItY2FudmFzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2F0ZnQvIiwic291cmNlcyI6WyJsaWIvcmVuZGVyZXIvcmVuZGVyZXItY2FudmFzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFnQixTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBT25ELE1BQU0sT0FBTyx1QkFBdUI7Ozs7SUFLbEMsWUFDVSxlQUFnQztRQUFoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFFeEMsZ0RBQWdEO1FBQ2hELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7OztJQUVELGVBQWU7UUFDYixvREFBb0Q7UUFDcEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9DLENBQUM7Ozs7Ozs7Ozs7O0lBV0QsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDOzs7OztJQUVELElBQVksTUFBTTtRQUNoQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO0lBQ3RDLENBQUM7Ozs7O0lBR00sUUFBUSxDQUFDLEtBQVk7UUFDMUIsMkVBQTJFO1FBQzNFLHlEQUF5RDtRQUN6RCxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7O1lBN0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyw0RUFBK0M7O2FBRWhEOzs7O1lBTk8sZUFBZTs7O3dCQVNwQixTQUFTLFNBQUMsUUFBUSxFQUFFLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQzt1QkFnQ2xDLFlBQVksU0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7SUFoQ3pDLDRDQUM4Qjs7Ozs7SUFHNUIsa0RBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtSZW5kZXJlclNlcnZpY2V9IGZyb20gJy4vcmVuZGVyZXIuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2F0ZnQtcmVuZGVyZXItY2FudmFzJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcmVuZGVyZXItY2FudmFzLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9yZW5kZXJlci1jYW52YXMuY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmVuZGVyZXJDYW52YXNDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgQFZpZXdDaGlsZCgnY2FudmFzJywge3N0YXRpYzogdHJ1ZX0pXHJcbiAgcHJpdmF0ZSBjYW52YXNSZWY6IEVsZW1lbnRSZWY7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSByZW5kZXJlclNlcnZpY2U6IFJlbmRlcmVyU2VydmljZVxyXG4gICkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ1JlbmRlcmVyQ29tcG9uZW50LmNvbnN0cnVjdG9yJyk7XHJcbiAgICB0aGlzLm9uUmVzaXplID0gdGhpcy5vblJlc2l6ZS5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ1JlbmRlcmVyQ29tcG9uZW50Lm5nQWZ0ZXJWaWV3SW5pdCcpO1xyXG4gICAgdGhpcy5yZW5kZXJlclNlcnZpY2UuaW5pdGlhbGl6ZSh0aGlzLmNhbnZhcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGUgcmVuZGVyIHBhbmUgb24gd2hpY2ggdGhlIHNjZW5lIGlzIHJlbmRlcmVkLlxyXG4gICAqIEN1cnJlbnRseSwgb25seSB0aGUgV2ViR0wgcmVuZGVyZXIgd2l0aCBhIGNhbnZhcyBpcyB1c2VkIGluIHRoaXNcclxuICAgKiBpbXBsZW1lbnRhdGlvbiwgc28gdGhpcyBwcm9wZXJ0eSB3aWxsIGFsd2F5cyBiZSBhbiBFbGVtZW50UmVmIHRvIHRoZVxyXG4gICAqIHVuZGVybHlpbmcgPGNhbnZhcz4gZWxlbWVudC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlIFRoaXMgcHJvcGVydHkgY2FuIGJlIHVzZWQgdG8gcmVzdHJpY3QgdGhlIG9yYml0IGNvbnRyb2wgKGkuZS4gdGhlXHJcbiAgICogYXJlYSB3aGljaCBpcyBsaXN0ZW5lZCBmb3IgbW91c2UgbW92ZSBhbmQgem9vbSBldmVudHMpIHRvIHRoZSByZW5kZXJpbmcgcGFuZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgcmVuZGVyUGFuZSgpOiBFbGVtZW50UmVmIHtcclxuICAgIHJldHVybiB0aGlzLmNhbnZhc1JlZjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0IGNhbnZhcygpOiBIVE1MQ2FudmFzRWxlbWVudCB7XHJcbiAgICByZXR1cm4gdGhpcy5jYW52YXNSZWYubmF0aXZlRWxlbWVudDtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpyZXNpemUnLCBbJyRldmVudCddKVxyXG4gIHB1YmxpYyBvblJlc2l6ZShldmVudDogRXZlbnQpIHtcclxuICAgIC8vIHN0cmFuZ2UsIGJ1dCBzaW5nbGUgMTAwJSByZXNpemluZyBoYXMgdW5leHBlY3RlZCBiZWhhdmlvdXIgd2l0aCBmbGV4IENTU1xyXG4gICAgLy8gYXMgd29ya2Fyb3VuZCAtIHJlc2V0dGxpbmcgdG8gMTAwIHBpeGVscywgdGhlbiB0byAxMDAlXHJcbiAgICB0aGlzLnJlbmRlcmVyU2VydmljZS5yZXNpemUodGhpcy5jYW52YXMsICcxMDBweCcpO1xyXG4gICAgdGhpcy5yZW5kZXJlclNlcnZpY2UucmVzaXplKHRoaXMuY2FudmFzLCAnMTAwJScpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19