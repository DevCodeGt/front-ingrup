/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as THREE from 'three';
import { CSS3DRenderer } from 'three/examples/jsm/renderers/CSS3DRenderer';
/* TODO: Refactor to pair
interface RendererPair {
  scene: SceneComponent;
  camera: AbstractCamera<any>;
  webGlRenderer: THREE.Renderer;
  layers: Array<number>;
}
*/
export class RendererService {
    constructor() {
        this.init = false;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @param {?} scene
     * @return {?}
     */
    setScene(scene) {
        this.scene = scene;
    }
    /**
     * @param {?} camera
     * @return {?}
     */
    setCamera(camera) {
        this.camera = camera;
        this.camera.updateAspectRatio(this.aspect);
    }
    /**
     * @return {?}
     */
    render() {
        if (this.init && this.scene && this.camera) {
            //  console.log('render');
            this.webGlRenderer.render(this.scene.getObject(), this.camera.camera);
            this.css3dRenderer.render(this.scene.getObject(), this.camera.camera);
        }
    }
    /**
     * @param {?} canvas
     * @return {?}
     */
    initialize(canvas) {
        // console.log('RendererComponent.initialize');
        // TODO: Multiple renderers
        this.webGlRenderer = new THREE.WebGLRenderer({
            canvas: canvas,
            antialias: true,
            alpha: true
        });
        this.webGlRenderer.setPixelRatio(devicePixelRatio);
        this.webGlRenderer.setSize(canvas.clientWidth, canvas.clientHeight, false);
        // TODO: props
        this.webGlRenderer.shadowMap.enabled = false;
        this.webGlRenderer.shadowMap.autoUpdate = false;
        this.webGlRenderer.shadowMap.type = THREE.PCFSoftShadowMap;
        this.webGlRenderer.setClearColor(0x000000, 0);
        this.webGlRenderer.autoClear = true;
        canvas.style.zIndex = '2';
        // ------------------------------ START
        this.css3dRenderer = new CSS3DRenderer();
        this.css3dRenderer.setSize(window.innerWidth, window.innerHeight);
        this.css3dRenderer.domElement.style.position = 'absolute';
        this.css3dRenderer.domElement.style.top = '0';
        this.css3dRenderer.domElement.style.zIndex = '1';
        canvas.parentElement.appendChild(this.css3dRenderer.domElement);
        // ------------------------------ END
        this.updateChildCamerasAspectRatio(canvas);
        this.init = true;
        this.render();
    }
    /**
     * @param {?} canvas
     * @param {?} size
     * @return {?}
     */
    resize(canvas, size) {
        canvas.style.width = size;
        canvas.style.height = size;
        /** @type {?} */
        const width = canvas.clientWidth;
        /** @type {?} */
        const height = canvas.clientHeight;
        this.webGlRenderer.setSize(width, height, true);
        this.css3dRenderer.setSize(width, height);
        this.updateChildCamerasAspectRatio(canvas);
        this.render();
    }
    /**
     * @private
     * @param {?} canvas
     * @return {?}
     */
    calculateAspectRatio(canvas) {
        /** @type {?} */
        const height = canvas.clientHeight;
        if (height === 0) {
            return 0;
        }
        this.aspect = canvas.clientWidth / canvas.clientHeight;
    }
    /**
     * @private
     * @param {?} canvas
     * @return {?}
     */
    updateChildCamerasAspectRatio(canvas) {
        this.calculateAspectRatio(canvas);
        if (this.camera) {
            this.camera.updateAspectRatio(this.aspect);
        }
    }
}
RendererService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RendererService.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    RendererService.prototype.init;
    /**
     * @type {?}
     * @private
     */
    RendererService.prototype.scene;
    /**
     * @type {?}
     * @private
     */
    RendererService.prototype.camera;
    /**
     * @type {?}
     * @private
     */
    RendererService.prototype.webGlRenderer;
    /**
     * @type {?}
     * @private
     */
    RendererService.prototype.css3dRenderer;
    /**
     * @type {?}
     * @private
     */
    RendererService.prototype.aspect;
}
//# sourceMappingURL=data:application/json;base64,