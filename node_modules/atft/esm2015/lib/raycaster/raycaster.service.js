/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as THREE from 'three';
export class RaycasterService {
    constructor() {
        this.raycaster = new THREE.Raycaster();
        this.enabled = false;
        this.groups = [];
        this.paused = false;
        this.onMouseMove = this.onMouseMove.bind(this);
        this.onMouseDown = this.onMouseDown.bind(this);
        this.onTouchStart = this.onTouchStart.bind(this);
        this.subscribe();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disable();
        this.unsubscribe();
    }
    /**
     * @private
     * @return {?}
     */
    subscribe() {
        window.addEventListener('mousemove', this.onMouseMove);
        window.addEventListener('mousedown', this.onMouseDown);
        window.addEventListener('touchstart', this.onTouchStart);
    }
    /**
     * @private
     * @return {?}
     */
    unsubscribe() {
        // console.log('unsubscribe raycaster');
        window.removeEventListener('mousemove', this.onMouseMove);
        window.removeEventListener('mousedown', this.onMouseDown);
        window.removeEventListener('touchstart', this.onTouchStart);
    }
    /**
     * @return {?}
     */
    enable() {
        this.enabled = true;
    }
    /**
     * @return {?}
     */
    disable() {
        this.enabled = false;
    }
    /**
     * @return {?}
     */
    pause() {
        this.paused = true;
    }
    /**
     * @return {?}
     */
    resume() {
        this.paused = false;
    }
    /**
     * @return {?}
     */
    get isEnabled() {
        return this.enabled;
    }
    /**
     * @param {?} camera
     * @return {?}
     */
    setCamera(camera) {
        // console.log('Add camera to raycaster', camera);
        this.camera = camera;
    }
    /**
     * @param {?} group
     * @return {?}
     */
    addGroup(group) {
        // console.log('RaycasterService.addGroup', group.name, group);
        this.groups.push(group);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onMouseMove(event) {
        if (!this.isReady()) {
            return;
        }
        event.preventDefault();
        /** @type {?} */
        const i = this.getFirstIntersectedGroup(event.layerX, event.layerY);
        if (!this.selected || this.selected !== i) {
            if (this.selected) {
                this.selected.dispatchEvent({ type: 'mouseExit' });
                this.selected = null;
            }
            if (i) {
                this.selected = i;
                // console.log('RaycasterService.mouseEnter', i);
                this.selected.dispatchEvent({ type: 'mouseEnter' });
            }
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onMouseDown(event) {
        if (!this.isReady(true)) {
            return;
        }
        event.preventDefault();
        /** @type {?} */
        const i = this.getFirstIntersectedGroup(event.layerX, event.layerY);
        if (i) {
            i.dispatchEvent({ type: 'mouseDown' });
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onTouchStart(event) {
        // console.log(event);
        if (!this.isReady()) {
            return;
        }
        event.preventDefault();
        /** @type {?} */
        const i = this.getFirstIntersectedGroup(event.touches[0].clientX, event.touches[0].clientY);
        if (i) {
            i.dispatchEvent({ type: 'mouseDown' });
        }
    }
    /**
     * @private
     * @param {?=} ignorePaused
     * @return {?}
     */
    isReady(ignorePaused) {
        return this.enabled
            && (ignorePaused || !this.paused)
            && this.camera
            && this.camera.camera
            && this.groups
            && this.groups.length > 0;
    }
    /**
     * @private
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    getFirstIntersectedGroup(x, y) {
        x = (x / window.innerWidth) * 2 - 1;
        y = -(y / window.innerHeight) * 2 + 1;
        /** @type {?} */
        const mouseVector = new THREE.Vector3(x, y, 0.5);
        this.raycaster.setFromCamera(mouseVector, this.camera.camera);
        // loop across all groups. Try to find the group with nearest distance.
        /** @type {?} */
        let nearestIntersection;
        /** @type {?} */
        let nearestGroup;
        for (let k = 0; k < this.groups.length; k++) {
            /** @type {?} */
            const i = this.groups[k].getObject();
            /** @type {?} */
            const intersection = this.raycaster.intersectObject(i, true);
            if (intersection.length > 0 && (!nearestIntersection || nearestIntersection.distance > intersection[0].distance)) {
                nearestIntersection = intersection[0];
                nearestGroup = i;
            }
        }
        // return the group with nearest distance
        if (nearestGroup) {
            return nearestGroup;
        }
        else {
            return;
        }
    }
}
RaycasterService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RaycasterService.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    RaycasterService.prototype.raycaster;
    /**
     * @type {?}
     * @private
     */
    RaycasterService.prototype.selected;
    /**
     * @type {?}
     * @private
     */
    RaycasterService.prototype.enabled;
    /**
     * @type {?}
     * @private
     */
    RaycasterService.prototype.camera;
    /**
     * @type {?}
     * @private
     */
    RaycasterService.prototype.groups;
    /**
     * @type {?}
     * @private
     */
    RaycasterService.prototype.paused;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF5Y2FzdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL3JheWNhc3Rlci9yYXljYXN0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQU0vQixNQUFNLE9BQU8sZ0JBQWdCO0lBVTNCO1FBUlEsY0FBUyxHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRWxDLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFFaEIsV0FBTSxHQUFpQyxFQUFFLENBQUM7UUFDMUMsV0FBTSxHQUFHLEtBQUssQ0FBQztRQUlyQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbkIsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFTyxTQUFTO1FBQ2YsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMs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QUFFOztrQkFDOUIsWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUM7WUFDNUQsSUFBSSxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsbUJBQW1CLElBQUksbUJBQW1CLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDaEgsbUJBQW1CLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxZQUFZLEdBQUcsQ0FBQyxDQUFDO2FBQ2xCO1NBQ0Y7UUFFRCx5Q0FBeUM7UUFDekMsSUFBSSxZQUFZLEVBQUU7WUFDaEIsT0FBTyxZQUFZLENBQUM7U0FDckI7YUFBTTtZQUNMLE9BQU87U0FDUjtJQUNILENBQUM7OztZQWhKRixVQUFVOzs7Ozs7Ozs7SUFHVCxxQ0FBMEM7Ozs7O0lBQzFDLG9DQUFpQzs7Ozs7SUFDakMsbUNBQXdCOzs7OztJQUN4QixrQ0FBb0M7Ozs7O0lBQ3BDLGtDQUFrRDs7Ozs7SUFDbEQsa0NBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBPbkRlc3Ryb3l9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCB7SW50ZXJzZWN0aW9ufSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCB7QWJzdHJhY3RDYW1lcmF9IGZyb20gJy4uL2NhbWVyYS9hYnN0cmFjdC1jYW1lcmEnO1xyXG5pbXBvcnQge0Fic3RyYWN0T2JqZWN0M0R9IGZyb20gJy4uL29iamVjdC9hYnN0cmFjdC1vYmplY3QtM2QnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUmF5Y2FzdGVyU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcblxyXG4gIHByaXZhdGUgcmF5Y2FzdGVyID0gbmV3IFRIUkVFLlJheWNhc3RlcigpO1xyXG4gIHByaXZhdGUgc2VsZWN0ZWQ6IFRIUkVFLk9iamVjdDNEO1xyXG4gIHByaXZhdGUgZW5hYmxlZCA9IGZhbHNlO1xyXG4gIHByaXZhdGUgY2FtZXJhOiBBYnN0cmFjdENhbWVyYTxhbnk+O1xyXG4gIHByaXZhdGUgZ3JvdXBzOiBBcnJheTxBYnN0cmFjdE9iamVjdDNEPGFueT4+ID0gW107XHJcbiAgcHJpdmF0ZSBwYXVzZWQgPSBmYWxzZTtcclxuXHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5vbk1vdXNlTW92ZSA9IHRoaXMub25Nb3VzZU1vdmUuYmluZCh0aGlzKTtcclxuICAgIHRoaXMub25Nb3VzZURvd24gPSB0aGlzLm9uTW91c2VEb3duLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLm9uVG91Y2hTdGFydCA9IHRoaXMub25Ub3VjaFN0YXJ0LmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLnN1YnNjcmliZSgpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLmRpc2FibGUoKTtcclxuICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3Vic2NyaWJlKCkge1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hTdGFydCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVuc3Vic2NyaWJlKCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3Vuc3Vic2NyaWJlIHJheWNhc3RlcicpO1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24pO1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hTdGFydCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZW5hYmxlKCkge1xyXG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkaXNhYmxlKCkge1xyXG4gICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcGF1c2UoKSB7XHJcbiAgICB0aGlzLnBhdXNlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzdW1lKCkge1xyXG4gICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcclxuICB9XHJcblxyXG5cclxuICBnZXQgaXNFbmFibGVkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZW5hYmxlZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRDYW1lcmEoY2FtZXJhOiBBYnN0cmFjdENhbWVyYTxhbnk+KSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnQWRkIGNhbWVyYSB0byByYXljYXN0ZXInLCBjYW1lcmEpO1xyXG4gICAgdGhpcy5jYW1lcmEgPSBjYW1lcmE7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWRkR3JvdXAoZ3JvdXA6IEFic3RyYWN0T2JqZWN0M0Q8YW55Pikge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ1JheWNhc3RlclNlcnZpY2UuYWRkR3JvdXAnLCBncm91cC5uYW1lLCBncm91cCk7XHJcbiAgICB0aGlzLmdyb3Vwcy5wdXNoKGdyb3VwKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgb25Nb3VzZU1vdmUoZXZlbnQpIHtcclxuICAgIGlmICghdGhpcy5pc1JlYWR5KCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IGkgPSB0aGlzLmdldEZpcnN0SW50ZXJzZWN0ZWRHcm91cChldmVudC5sYXllclgsIGV2ZW50LmxheWVyWSk7XHJcbiAgICBpZiAoIXRoaXMuc2VsZWN0ZWQgfHwgdGhpcy5zZWxlY3RlZCAhPT0gaSkge1xyXG4gICAgICBpZiAodGhpcy5zZWxlY3RlZCkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWQuZGlzcGF0Y2hFdmVudCh7dHlwZTogJ21vdXNlRXhpdCd9KTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaSkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdSYXljYXN0ZXJTZXJ2aWNlLm1vdXNlRW50ZXInLCBpKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkLmRpc3BhdGNoRXZlbnQoe3R5cGU6ICdtb3VzZUVudGVyJ30pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBvbk1vdXNlRG93bihldmVudCkge1xyXG4gICAgaWYgKCF0aGlzLmlzUmVhZHkodHJ1ZSkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IGkgPSB0aGlzLmdldEZpcnN0SW50ZXJzZWN0ZWRHcm91cChldmVudC5sYXllclgsIGV2ZW50LmxheWVyWSk7XHJcbiAgICBpZiAoaSkge1xyXG4gICAgICBpLmRpc3BhdGNoRXZlbnQoe3R5cGU6ICdtb3VzZURvd24nfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgcHJpdmF0ZSBvblRvdWNoU3RhcnQoZXZlbnQ6IFRvdWNoRXZlbnQpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKGV2ZW50KTtcclxuICAgIGlmICghdGhpcy5pc1JlYWR5KCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IGkgPSB0aGlzLmdldEZpcnN0SW50ZXJzZWN0ZWRHcm91cChldmVudC50b3VjaGVzWzBdLmNsaWVudFgsIGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WSk7XHJcbiAgICBpZiAoaSkge1xyXG4gICAgICBpLmRpc3BhdGNoRXZlbnQoe3R5cGU6ICdtb3VzZURvd24nfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGlzUmVhZHkoaWdub3JlUGF1c2VkPzogYm9vbGVhbikge1xyXG4gICAgcmV0dXJuIHRoaXMuZW5hYmxlZFxyXG4gICAgICAmJiAoaWdub3JlUGF1c2VkIHx8ICF0aGlzLnBhdXNlZClcclxuICAgICAgJiYgdGhpcy5jYW1lcmFcclxuICAgICAgJiYgdGhpcy5jYW1lcmEuY2FtZXJhXHJcbiAgICAgICYmIHRoaXMuZ3JvdXBzXHJcbiAgICAgICYmIHRoaXMuZ3JvdXBzLmxlbmd0aCA+IDA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEZpcnN0SW50ZXJzZWN0ZWRHcm91cCh4LCB5KTogVEhSRUUuT2JqZWN0M0Qge1xyXG4gICAgeCA9ICh4IC8gd2luZG93LmlubmVyV2lkdGgpICogMiAtIDE7XHJcbiAgICB5ID0gLSh5IC8gd2luZG93LmlubmVySGVpZ2h0KSAqIDIgKyAxO1xyXG4gICAgY29uc3QgbW91c2VWZWN0b3IgPSBuZXcgVEhSRUUuVmVjdG9yMyh4LCB5LCAwLjUpO1xyXG4gICAgdGhpcy5yYXljYXN0ZXIuc2V0RnJvbUNhbWVyYShtb3VzZVZlY3RvciwgdGhpcy5jYW1lcmEuY2FtZXJhKTtcclxuXHJcbiAgICAvLyBsb29wIGFjcm9zcyBhbGwgZ3JvdXBzLiBUcnkgdG8gZmluZCB0aGUgZ3JvdXAgd2l0aCBuZWFyZXN0IGRpc3RhbmNlLlxyXG4gICAgbGV0IG5lYXJlc3RJbnRlcnNlY3Rpb246IEludGVyc2VjdGlvbjtcclxuICAgIGxldCBuZWFyZXN0R3JvdXA6IFRIUkVFLk9iamVjdDNEO1xyXG4gICAgZm9yIChsZXQgayA9IDA7IGsgPCB0aGlzLmdyb3Vwcy5sZW5ndGg7IGsrKykge1xyXG4gICAgICBjb25zdCBpID0gdGhpcy5ncm91cHNba10uZ2V0T2JqZWN0KCk7XHJcbiAgICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IHRoaXMucmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdChpLCB0cnVlKTtcclxuICAgICAgaWYgKGludGVyc2VjdGlvbi5sZW5ndGggPiAwICYmICghbmVhcmVzdEludGVyc2VjdGlvbiB8fCBuZWFyZXN0SW50ZXJzZWN0aW9uLmRpc3RhbmNlID4gaW50ZXJzZWN0aW9uWzBdLmRpc3RhbmNlKSkge1xyXG4gICAgICAgIG5lYXJlc3RJbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb25bMF07XHJcbiAgICAgICAgbmVhcmVzdEdyb3VwID0gaTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHJldHVybiB0aGUgZ3JvdXAgd2l0aCBuZWFyZXN0IGRpc3RhbmNlXHJcbiAgICBpZiAobmVhcmVzdEdyb3VwKSB7XHJcbiAgICAgIHJldHVybiBuZWFyZXN0R3JvdXA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=