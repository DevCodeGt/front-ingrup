/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import { AbstractCamera } from './abstract-camera';
import * as THREE from 'three';
import { RendererService } from '../renderer/renderer.service';
export class PerspectiveCameraComponent extends AbstractCamera {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        super(rendererService);
        this.rendererService = rendererService;
    }
    /**
     * @protected
     * @return {?}
     */
    createCamera() {
        // console.log('PerspectiveCameraComponent.createCamera');
        // let aspectRatio = undefined; // Updated later
        this.camera = new THREE.PerspectiveCamera(this.fov, undefined, this.near, this.far);
    }
    /**
     * @param {?} aspect
     * @return {?}
     */
    updateAspectRatio(aspect) {
        // console.log('PerspectiveCameraComponent.updateAspectRatio: ' + aspect);
        this.camera.aspect = aspect;
        this.camera.updateProjectionMatrix();
    }
}
PerspectiveCameraComponent.decorators = [
    { type: Component, args: [{
                selector: 'atft-perspective-camera',
                providers: [{ provide: AbstractCamera, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => PerspectiveCameraComponent)) }],
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
PerspectiveCameraComponent.ctorParameters = () => [
    { type: RendererService }
];
PerspectiveCameraComponent.propDecorators = {
    fov: [{ type: Input }],
    near: [{ type: Input }],
    far: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PerspectiveCameraComponent.prototype.fov;
    /** @type {?} */
    PerspectiveCameraComponent.prototype.near;
    /** @type {?} */
    PerspectiveCameraComponent.prototype.far;
    /**
     * @type {?}
     * @protected
     */
    PerspectiveCameraComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc3BlY3RpdmUtY2FtZXJhLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2F0ZnQvIiwic291cmNlcyI6WyJsaWIvY2FtZXJhL3BlcnNwZWN0aXZlLWNhbWVyYS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBTzdELE1BQU0sT0FBTywwQkFBMkIsU0FBUSxjQUF1Qzs7OztJQU1yRixZQUNZLGVBQWdDO1FBRTFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUZiLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUc1QyxDQUFDOzs7OztJQUVTLFlBQVk7UUFDcEIsMERBQTBEO1FBQzFELGdEQUFnRDtRQUNoRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUN2QyxJQUFJLENBQUMsR0FBRyxFQUNSLFNBQVMsRUFDVCxJQUFJLENBQUMsSUFBSSxFQUNULElBQUksQ0FBQyxHQUFHLENBQ1QsQ0FBQztJQUNKLENBQUM7Ozs7O0lBRU0saUJBQWlCLENBQUMsTUFBYztRQUNyQywwRUFBMEU7UUFDMUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUN2QyxDQUFDOzs7WUFoQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx5QkFBeUI7Z0JBQ25DLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLDBCQUEwQixFQUFDLEVBQUMsQ0FBQztnQkFDakcsUUFBUSxFQUFFLDJCQUEyQjthQUN0Qzs7OztZQU5PLGVBQWU7OztrQkFTcEIsS0FBSzttQkFDTCxLQUFLO2tCQUNMLEtBQUs7Ozs7SUFGTix5Q0FBcUI7O0lBQ3JCLDBDQUFzQjs7SUFDdEIseUNBQXFCOzs7OztJQUduQixxREFBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0Fic3RyYWN0Q2FtZXJhfSBmcm9tICcuL2Fic3RyYWN0LWNhbWVyYSc7XHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuaW1wb3J0IHtSZW5kZXJlclNlcnZpY2V9IGZyb20gJy4uL3JlbmRlcmVyL3JlbmRlcmVyLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhdGZ0LXBlcnNwZWN0aXZlLWNhbWVyYScsXHJcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IEFic3RyYWN0Q2FtZXJhLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBQZXJzcGVjdGl2ZUNhbWVyYUNvbXBvbmVudCl9XSxcclxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQZXJzcGVjdGl2ZUNhbWVyYUNvbXBvbmVudCBleHRlbmRzIEFic3RyYWN0Q2FtZXJhPFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhPiB7XHJcblxyXG4gIEBJbnB1dCgpIGZvdjogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIG5lYXI6IG51bWJlcjtcclxuICBASW5wdXQoKSBmYXI6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgY3JlYXRlQ2FtZXJhKCk6IHZvaWQge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ1BlcnNwZWN0aXZlQ2FtZXJhQ29tcG9uZW50LmNyZWF0ZUNhbWVyYScpO1xyXG4gICAgLy8gbGV0IGFzcGVjdFJhdGlvID0gdW5kZWZpbmVkOyAvLyBVcGRhdGVkIGxhdGVyXHJcbiAgICB0aGlzLmNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYShcclxuICAgICAgdGhpcy5mb3YsXHJcbiAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgdGhpcy5uZWFyLFxyXG4gICAgICB0aGlzLmZhclxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1cGRhdGVBc3BlY3RSYXRpbyhhc3BlY3Q6IG51bWJlcikge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ1BlcnNwZWN0aXZlQ2FtZXJhQ29tcG9uZW50LnVwZGF0ZUFzcGVjdFJhdGlvOiAnICsgYXNwZWN0KTtcclxuICAgIHRoaXMuY2FtZXJhLmFzcGVjdCA9IGFzcGVjdDtcclxuICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==