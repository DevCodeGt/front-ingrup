/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
/**
 * @abstract
 * @template T
 */
export class AbstractCamera {
    /**
     * @param {?} rendererService
     */
    constructor(rendererService) {
        this.rendererService = rendererService;
        this.zAxisUp = false;
        // console.log('AbstractCamera.constructor');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // console.log('AbstractCamera.ngAfterViewInit');
        this.createCamera();
        this.applyZAxisUp();
        this.applyPosition();
        // TODO: Directive?
        this.rendererService.setCamera(this);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        let mustRerender = false;
        if (['positionX', 'positionY', 'positionZ'].some((/**
         * @param {?} propName
         * @return {?}
         */
        propName => propName in changes))) {
            this.applyPosition();
            mustRerender = true;
        }
        if (mustRerender) {
            this.rendererService.render();
        }
    }
    /**
     * @protected
     * @return {?}
     */
    applyPosition() {
        if (this.camera) {
            this.camera.position.set(this.positionX || 0, this.positionY || 0, this.positionZ || 0);
        }
    }
    /**
     * @protected
     * @return {?}
     */
    applyZAxisUp() {
        if (this.camera && this.zAxisUp) {
            // Z axis up (similarly to 3D Creation Software: Blender, 3DS Max)
            this.camera.up.set(0, 0, 1);
        }
    }
}
AbstractCamera.propDecorators = {
    positionX: [{ type: Input }],
    positionY: [{ type: Input }],
    positionZ: [{ type: Input }],
    zAxisUp: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AbstractCamera.prototype.camera;
    /** @type {?} */
    AbstractCamera.prototype.positionX;
    /** @type {?} */
    AbstractCamera.prototype.positionY;
    /** @type {?} */
    AbstractCamera.prototype.positionZ;
    /** @type {?} */
    AbstractCamera.prototype.zAxisUp;
    /**
     * @type {?}
     * @protected
     */
    AbstractCamera.prototype.rendererService;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    AbstractCamera.prototype.createCamera = function () { };
    /**
     * @abstract
     * @param {?} aspect
     * @return {?}
     */
    AbstractCamera.prototype.updateAspectRatio = function (aspect) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtY2FtZXJhLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXRmdC8iLCJzb3VyY2VzIjpbImxpYi9jYW1lcmEvYWJzdHJhY3QtY2FtZXJhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWdCLEtBQUssRUFBMkIsTUFBTSxlQUFlLENBQUM7Ozs7O0FBSTdFLE1BQU0sT0FBZ0IsY0FBYzs7OztJQVVsQyxZQUNZLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUhuQyxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBS3ZCLDZDQUE2QztJQUMvQyxDQUFDOzs7O0lBRU0sZUFBZTtRQUNwQixpREFBaUQ7UUFDakQsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXBCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFckIsbUJBQW1CO1FBQ25CLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Ozs7O0lBTUQsV0FBVyxDQUFDLE9BQXNCOztZQUM1QixZQUFZLEdBQUcsS0FBSztRQUV4QixJQUFJLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQyxJQUFJOzs7O1FBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLElBQUksT0FBTyxFQUFDLEVBQUU7WUFDakYsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3JCLFlBQVksR0FBRyxJQUFJLENBQUM7U0FDckI7UUFFRCxJQUFJLFlBQVksRUFBRTtZQUNoQixJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQy9CO0lBRUgsQ0FBQzs7Ozs7SUFFUyxhQUFhO1FBQ3JCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDdEIsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLEVBQ25CLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxFQUNuQixJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FDcEIsQ0FBQztTQUNIO0lBQ0gsQ0FBQzs7Ozs7SUFFUyxZQUFZO1FBQ3BCLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQy9CLGtFQUFrRTtZQUNsRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUM3QjtJQUNILENBQUM7Ozt3QkF4REEsS0FBSzt3QkFDTCxLQUFLO3dCQUNMLEtBQUs7c0JBRUwsS0FBSzs7OztJQU5OLGdDQUFVOztJQUVWLG1DQUEyQjs7SUFDM0IsbUNBQTJCOztJQUMzQixtQ0FBMkI7O0lBRTNCLGlDQUF5Qjs7Ozs7SUFHdkIseUNBQTBDOzs7Ozs7SUFnQjVDLHdEQUF3Qzs7Ozs7O0lBRXhDLG1FQUFrRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJWaWV3SW5pdCwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlc30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuaW1wb3J0IHtSZW5kZXJlclNlcnZpY2V9IGZyb20gJy4uL3JlbmRlcmVyL3JlbmRlcmVyLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0Q2FtZXJhPFQgZXh0ZW5kcyBUSFJFRS5DYW1lcmE+IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzIHtcclxuXHJcbiAgY2FtZXJhOiBUO1xyXG5cclxuICBASW5wdXQoKSBwb3NpdGlvblg6IG51bWJlcjtcclxuICBASW5wdXQoKSBwb3NpdGlvblk6IG51bWJlcjtcclxuICBASW5wdXQoKSBwb3NpdGlvblo6IG51bWJlcjtcclxuXHJcbiAgQElucHV0KCkgekF4aXNVcCA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCByZW5kZXJlclNlcnZpY2U6IFJlbmRlcmVyU2VydmljZVxyXG4gICkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ0Fic3RyYWN0Q2FtZXJhLmNvbnN0cnVjdG9yJyk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ0Fic3RyYWN0Q2FtZXJhLm5nQWZ0ZXJWaWV3SW5pdCcpO1xyXG4gICAgdGhpcy5jcmVhdGVDYW1lcmEoKTtcclxuXHJcbiAgICB0aGlzLmFwcGx5WkF4aXNVcCgpO1xyXG4gICAgdGhpcy5hcHBseVBvc2l0aW9uKCk7XHJcblxyXG4gICAgLy8gVE9ETzogRGlyZWN0aXZlP1xyXG4gICAgdGhpcy5yZW5kZXJlclNlcnZpY2Uuc2V0Q2FtZXJhKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNyZWF0ZUNhbWVyYSgpOiB2b2lkO1xyXG5cclxuICBwdWJsaWMgYWJzdHJhY3QgdXBkYXRlQXNwZWN0UmF0aW8oYXNwZWN0OiBudW1iZXIpO1xyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICBsZXQgbXVzdFJlcmVuZGVyID0gZmFsc2U7XHJcblxyXG4gICAgaWYgKFsncG9zaXRpb25YJywgJ3Bvc2l0aW9uWScsICdwb3NpdGlvblonXS5zb21lKHByb3BOYW1lID0+IHByb3BOYW1lIGluIGNoYW5nZXMpKSB7XHJcbiAgICAgIHRoaXMuYXBwbHlQb3NpdGlvbigpO1xyXG4gICAgICBtdXN0UmVyZW5kZXIgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChtdXN0UmVyZW5kZXIpIHtcclxuICAgICAgdGhpcy5yZW5kZXJlclNlcnZpY2UucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGFwcGx5UG9zaXRpb24oKSB7XHJcbiAgICBpZiAodGhpcy5jYW1lcmEpIHtcclxuICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24uc2V0KFxyXG4gICAgICAgIHRoaXMucG9zaXRpb25YIHx8IDAsXHJcbiAgICAgICAgdGhpcy5wb3NpdGlvblkgfHwgMCxcclxuICAgICAgICB0aGlzLnBvc2l0aW9uWiB8fCAwLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGFwcGx5WkF4aXNVcCgpIHtcclxuICAgIGlmICh0aGlzLmNhbWVyYSAmJiB0aGlzLnpBeGlzVXApIHtcclxuICAgICAgLy8gWiBheGlzIHVwIChzaW1pbGFybHkgdG8gM0QgQ3JlYXRpb24gU29mdHdhcmU6IEJsZW5kZXIsIDNEUyBNYXgpXHJcbiAgICAgIHRoaXMuY2FtZXJhLnVwLnNldCgwLCAwLCAxKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==