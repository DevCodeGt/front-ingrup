/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { RendererService } from '../renderer/renderer.service';
import { RaycasterService } from '../raycaster/raycaster.service';
import { AbstractOrbitControls } from './abstract-orbit-controls';
export class OrbitControlsComponent extends AbstractOrbitControls {
    /**
     * @param {?} rendererService
     * @param {?} raycasterService
     */
    constructor(rendererService, raycasterService) {
        super(rendererService, raycasterService);
        this.rendererService = rendererService;
        this.raycasterService = raycasterService;
        this.rotateSpeed = 1.0;
        this.zoomSpeed = 1.2;
    }
    /**
     * @protected
     * @return {?}
     */
    setUpControls() {
        this.controls = new OrbitControls(this.childCameras.first.camera, this.listeningControlElement && this.listeningControlElement.nativeElement);
        this.controls.rotateSpeed = this.rotateSpeed;
        this.controls.zoomSpeed = this.zoomSpeed;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.controls) {
            return;
        }
        super.ngOnChanges(changes);
        if (changes['rotateSpeed']) {
            this.controls.rotateSpeed = this.rotateSpeed;
        }
        if (changes['zoomSpeed']) {
            this.controls.zoomSpeed = this.zoomSpeed;
        }
    }
}
OrbitControlsComponent.decorators = [
    { type: Component, args: [{
                selector: 'atft-orbit-controls',
                template: `
      <ng-content></ng-content>`,
                styles: [":host{display:flex;flex:1}"]
            }] }
];
/** @nocollapse */
OrbitControlsComponent.ctorParameters = () => [
    { type: RendererService },
    { type: RaycasterService }
];
OrbitControlsComponent.propDecorators = {
    rotateSpeed: [{ type: Input }],
    zoomSpeed: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    OrbitControlsComponent.prototype.rotateSpeed;
    /** @type {?} */
    OrbitControlsComponent.prototype.zoomSpeed;
    /**
     * @type {?}
     * @protected
     */
    OrbitControlsComponent.prototype.rendererService;
    /**
     * @type {?}
     * @protected
     */
    OrbitControlsComponent.prototype.raycasterService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JiaXQtY29udHJvbHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXRmdC8iLCJzb3VyY2VzIjpbImxpYi9jb250cm9sL29yYml0LWNvbnRyb2xzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQTJCLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSwyQ0FBMkMsQ0FBQztBQUN4RSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDN0QsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDaEUsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFRaEUsTUFBTSxPQUFPLHNCQUF1QixTQUFRLHFCQUFvQzs7Ozs7SUFLOUUsWUFDWSxlQUFnQyxFQUNoQyxnQkFBa0M7UUFFNUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBSC9CLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUNoQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBTHJDLGdCQUFXLEdBQUcsR0FBRyxDQUFDO1FBQ2xCLGNBQVMsR0FBRyxHQUFHLENBQUM7SUFPekIsQ0FBQzs7Ozs7SUFFUyxhQUFhO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxhQUFhLENBQy9CLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFDOUIsSUFBSSxDQUFDLHVCQUF1QixJQUFJLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLENBQzNFLENBQUM7UUFDRixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzdDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDM0MsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsT0FBTztTQUNSO1FBQ0QsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUzQixJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQzlDO1FBQ0QsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUMxQztJQUNILENBQUM7OztZQXZDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsUUFBUSxFQUFFO2dDQUNvQjs7YUFFL0I7Ozs7WUFUTyxlQUFlO1lBQ2YsZ0JBQWdCOzs7MEJBV3JCLEtBQUs7d0JBQ0wsS0FBSzs7OztJQUROLDZDQUEyQjs7SUFDM0IsMkNBQXlCOzs7OztJQUd2QixpREFBMEM7Ozs7O0lBQzFDLGtEQUE0QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtPcmJpdENvbnRyb2xzfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vY29udHJvbHMvT3JiaXRDb250cm9scyc7XHJcbmltcG9ydCB7UmVuZGVyZXJTZXJ2aWNlfSBmcm9tICcuLi9yZW5kZXJlci9yZW5kZXJlci5zZXJ2aWNlJztcclxuaW1wb3J0IHtSYXljYXN0ZXJTZXJ2aWNlfSBmcm9tICcuLi9yYXljYXN0ZXIvcmF5Y2FzdGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQge0Fic3RyYWN0T3JiaXRDb250cm9sc30gZnJvbSAnLi9hYnN0cmFjdC1vcmJpdC1jb250cm9scyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2F0ZnQtb3JiaXQtY29udHJvbHMnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxyXG4gIHN0eWxlVXJsczogWydjb250cm9scy5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBPcmJpdENvbnRyb2xzQ29tcG9uZW50IGV4dGVuZHMgQWJzdHJhY3RPcmJpdENvbnRyb2xzPE9yYml0Q29udHJvbHM+IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuXHJcbiAgQElucHV0KCkgcm90YXRlU3BlZWQgPSAxLjA7XHJcbiAgQElucHV0KCkgem9vbVNwZWVkID0gMS4yO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCByZW5kZXJlclNlcnZpY2U6IFJlbmRlcmVyU2VydmljZSxcclxuICAgIHByb3RlY3RlZCByYXljYXN0ZXJTZXJ2aWNlOiBSYXljYXN0ZXJTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICBzdXBlcihyZW5kZXJlclNlcnZpY2UsIHJheWNhc3RlclNlcnZpY2UpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHNldFVwQ29udHJvbHMoKSB7XHJcbiAgICB0aGlzLmNvbnRyb2xzID0gbmV3IE9yYml0Q29udHJvbHMoXHJcbiAgICAgIHRoaXMuY2hpbGRDYW1lcmFzLmZpcnN0LmNhbWVyYSxcclxuICAgICAgdGhpcy5saXN0ZW5pbmdDb250cm9sRWxlbWVudCAmJiB0aGlzLmxpc3RlbmluZ0NvbnRyb2xFbGVtZW50Lm5hdGl2ZUVsZW1lbnRcclxuICAgICk7XHJcbiAgICB0aGlzLmNvbnRyb2xzLnJvdGF0ZVNwZWVkID0gdGhpcy5yb3RhdGVTcGVlZDtcclxuICAgIHRoaXMuY29udHJvbHMuem9vbVNwZWVkID0gdGhpcy56b29tU3BlZWQ7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBpZiAoIXRoaXMuY29udHJvbHMpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgc3VwZXIubmdPbkNoYW5nZXMoY2hhbmdlcyk7XHJcblxyXG4gICAgaWYgKGNoYW5nZXNbJ3JvdGF0ZVNwZWVkJ10pIHtcclxuICAgICAgdGhpcy5jb250cm9scy5yb3RhdGVTcGVlZCA9IHRoaXMucm90YXRlU3BlZWQ7XHJcbiAgICB9XHJcbiAgICBpZiAoY2hhbmdlc1snem9vbVNwZWVkJ10pIHtcclxuICAgICAgdGhpcy5jb250cm9scy56b29tU3BlZWQgPSB0aGlzLnpvb21TcGVlZDtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxufVxyXG4iXX0=