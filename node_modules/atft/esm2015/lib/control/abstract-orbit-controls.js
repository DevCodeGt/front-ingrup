/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChild, ContentChildren, QueryList } from '@angular/core';
import { AbstractCamera } from '../camera/abstract-camera';
import { RendererCanvasComponent } from '../renderer/renderer-canvas.component';
/**
 * @abstract
 * @template T
 */
export class AbstractOrbitControls {
    /**
     * @param {?} rendererService
     * @param {?} raycasterService
     */
    constructor(rendererService, raycasterService) {
        this.rendererService = rendererService;
        this.raycasterService = raycasterService;
        // console.log('OrbitControlsComponent.constructor');
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // If the THREE.js OrbitControls are not set up yet, we do not need to update
        // anything as they will pick the new values from the @Input properties automatically
        // upon creation.
        if (!this.controls) {
            return;
        }
        if (changes['listeningControlElement']) {
            // The DOM element the OrbitControls listen on cannot be changed once an
            // OrbitControls object is created. We thus need to recreate it.
            this.controls.dispose();
            this.setUpControls();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.controls) {
            this.controls.dispose();
        }
    }
    /**
     * @private
     * @return {?}
     */
    configureListeners() {
        this.controls.addEventListener('change', (/**
         * @return {?}
         */
        () => {
            this.rendererService.render();
        }));
        // don't raycast during rotation/damping/panning
        if (this.raycasterService.isEnabled) {
            this.controls.addEventListener('start', (/**
             * @return {?}
             */
            () => {
                this.raycasterService.pause();
            }));
            this.controls.addEventListener('end', (/**
             * @return {?}
             */
            () => {
                this.raycasterService.resume();
            }));
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // console.log('OrbitControlsComponent.ngAfterViewInit');
        if (this.childCameras === undefined || this.childCameras.first === undefined) {
            throw new Error('Camera is not found');
        }
        if (!this.webGlRenderer) {
            throw new Error('webGlRenderer is not found');
        }
        this.listeningControlElement = this.webGlRenderer.renderPane;
        this.setUpControls();
        this.configureListeners();
        this.rendererService.render();
    }
}
AbstractOrbitControls.propDecorators = {
    childCameras: [{ type: ContentChildren, args: [AbstractCamera, { descendants: true },] }],
    webGlRenderer: [{ type: ContentChild, args: [RendererCanvasComponent, { static: false },] }]
};
if (false) {
    /** @type {?} */
    AbstractOrbitControls.prototype.childCameras;
    /** @type {?} */
    AbstractOrbitControls.prototype.webGlRenderer;
    /**
     * The element on whose native element the orbit control will listen for mouse events.
     *
     * Note that keyboard events are still listened for on the global window object, this is
     * a known issue from Three.js: https://github.com/mrdoob/three.js/pull/10315
     * @type {?}
     * @protected
     */
    AbstractOrbitControls.prototype.listeningControlElement;
    /**
     * @type {?}
     * @protected
     */
    AbstractOrbitControls.prototype.controls;
    /**
     * @type {?}
     * @protected
     */
    AbstractOrbitControls.prototype.rendererService;
    /**
     * @type {?}
     * @protected
     */
    AbstractOrbitControls.prototype.raycasterService;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    AbstractOrbitControls.prototype.setUpControls = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3Qtb3JiaXQtY29udHJvbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL2NvbnRyb2wvYWJzdHJhY3Qtb3JiaXQtY29udHJvbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBZ0IsWUFBWSxFQUFFLGVBQWUsRUFBb0MsU0FBUyxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUd2SSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFHekQsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sdUNBQXVDLENBQUM7Ozs7O0FBRzlFLE1BQU0sT0FBZ0IscUJBQXFCOzs7OztJQWN6QyxZQUNZLGVBQWdDLEVBQ2hDLGdCQUFrQztRQURsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUU1QyxxREFBcUQ7SUFDdkQsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsNkVBQTZFO1FBQzdFLHFGQUFxRjtRQUNyRixpQkFBaUI7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsT0FBTztTQUNSO1FBRUQsSUFBSSxPQUFPLENBQUMseUJBQXlCLENBQUMsRUFBRTtZQUN0Qyx3RUFBd0U7WUFDeEUsZ0VBQWdFO1lBQ2hFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDeEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUN6QjtJQUNILENBQUM7Ozs7O0lBS08sa0JBQWtCO1FBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsUUFBUTs7O1FBQUUsR0FBRyxFQUFFO1lBQzVDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDaEMsQ0FBQyxFQUFDLENBQUM7UUFFSCxnREFBZ0Q7UUFDaEQsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFO1lBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsT0FBTzs7O1lBQUUsR0FBRyxFQUFFO2dCQUMzQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDaEMsQ0FBQyxFQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEtBQUs7OztZQUFFLEdBQUcsRUFBRTtnQkFDekMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2pDLENBQUMsRUFBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7O0lBRUQsZUFBZTtRQUNiLHlEQUF5RDtRQUN6RCxJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUM1RSxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDeEM7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7U0FDL0M7UUFDRCxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7UUFDN0QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEMsQ0FBQzs7OzJCQXhFQSxlQUFlLFNBQUMsY0FBYyxFQUFFLEVBQUMsV0FBVyxFQUFFLElBQUksRUFBQzs0QkFDbkQsWUFBWSxTQUFDLHVCQUF1QixFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQzs7OztJQUR0RCw2Q0FBNEc7O0lBQzVHLDhDQUErRjs7Ozs7Ozs7O0lBTy9GLHdEQUE4Qzs7Ozs7SUFFOUMseUNBQXNCOzs7OztJQUdwQixnREFBMEM7Ozs7O0lBQzFDLGlEQUE0Qzs7Ozs7O0lBMkI5QyxnRUFBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyVmlld0luaXQsIENvbnRlbnRDaGlsZCwgQ29udGVudENoaWxkcmVuLCBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgUXVlcnlMaXN0LCBTaW1wbGVDaGFuZ2VzfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5pbXBvcnQge09yYml0Q29udHJvbHN9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9jb250cm9scy9PcmJpdENvbnRyb2xzJztcclxuaW1wb3J0IHtBYnN0cmFjdENhbWVyYX0gZnJvbSAnLi4vY2FtZXJhL2Fic3RyYWN0LWNhbWVyYSc7XHJcbmltcG9ydCB7UmVuZGVyZXJTZXJ2aWNlfSBmcm9tICcuLi9yZW5kZXJlci9yZW5kZXJlci5zZXJ2aWNlJztcclxuaW1wb3J0IHtSYXljYXN0ZXJTZXJ2aWNlfSBmcm9tICcuLi9yYXljYXN0ZXIvcmF5Y2FzdGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQge1JlbmRlcmVyQ2FudmFzQ29tcG9uZW50fSBmcm9tICcuLi9yZW5kZXJlci9yZW5kZXJlci1jYW52YXMuY29tcG9uZW50JztcclxuXHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RPcmJpdENvbnRyb2xzPFQgZXh0ZW5kcyBPcmJpdENvbnRyb2xzPiBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcclxuXHJcbiAgQENvbnRlbnRDaGlsZHJlbihBYnN0cmFjdENhbWVyYSwge2Rlc2NlbmRhbnRzOiB0cnVlfSkgY2hpbGRDYW1lcmFzOiBRdWVyeUxpc3Q8QWJzdHJhY3RDYW1lcmE8VEhSRUUuQ2FtZXJhPj47XHJcbiAgQENvbnRlbnRDaGlsZChSZW5kZXJlckNhbnZhc0NvbXBvbmVudCwge3N0YXRpYzogZmFsc2V9KSB3ZWJHbFJlbmRlcmVyOiBSZW5kZXJlckNhbnZhc0NvbXBvbmVudDtcclxuICAvKipcclxuICAgKiBUaGUgZWxlbWVudCBvbiB3aG9zZSBuYXRpdmUgZWxlbWVudCB0aGUgb3JiaXQgY29udHJvbCB3aWxsIGxpc3RlbiBmb3IgbW91c2UgZXZlbnRzLlxyXG4gICAqXHJcbiAgICogTm90ZSB0aGF0IGtleWJvYXJkIGV2ZW50cyBhcmUgc3RpbGwgbGlzdGVuZWQgZm9yIG9uIHRoZSBnbG9iYWwgd2luZG93IG9iamVjdCwgdGhpcyBpc1xyXG4gICAqIGEga25vd24gaXNzdWUgZnJvbSBUaHJlZS5qczogaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9wdWxsLzEwMzE1XHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGxpc3RlbmluZ0NvbnRyb2xFbGVtZW50OiBFbGVtZW50UmVmO1xyXG5cclxuICBwcm90ZWN0ZWQgY29udHJvbHM6IFQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIHJlbmRlcmVyU2VydmljZTogUmVuZGVyZXJTZXJ2aWNlLFxyXG4gICAgcHJvdGVjdGVkIHJheWNhc3RlclNlcnZpY2U6IFJheWNhc3RlclNlcnZpY2VcclxuICApIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdPcmJpdENvbnRyb2xzQ29tcG9uZW50LmNvbnN0cnVjdG9yJyk7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICAvLyBJZiB0aGUgVEhSRUUuanMgT3JiaXRDb250cm9scyBhcmUgbm90IHNldCB1cCB5ZXQsIHdlIGRvIG5vdCBuZWVkIHRvIHVwZGF0ZVxyXG4gICAgLy8gYW55dGhpbmcgYXMgdGhleSB3aWxsIHBpY2sgdGhlIG5ldyB2YWx1ZXMgZnJvbSB0aGUgQElucHV0IHByb3BlcnRpZXMgYXV0b21hdGljYWxseVxyXG4gICAgLy8gdXBvbiBjcmVhdGlvbi5cclxuICAgIGlmICghdGhpcy5jb250cm9scykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNoYW5nZXNbJ2xpc3RlbmluZ0NvbnRyb2xFbGVtZW50J10pIHtcclxuICAgICAgLy8gVGhlIERPTSBlbGVtZW50IHRoZSBPcmJpdENvbnRyb2xzIGxpc3RlbiBvbiBjYW5ub3QgYmUgY2hhbmdlZCBvbmNlIGFuXHJcbiAgICAgIC8vIE9yYml0Q29udHJvbHMgb2JqZWN0IGlzIGNyZWF0ZWQuIFdlIHRodXMgbmVlZCB0byByZWNyZWF0ZSBpdC5cclxuICAgICAgdGhpcy5jb250cm9scy5kaXNwb3NlKCk7XHJcbiAgICAgIHRoaXMuc2V0VXBDb250cm9scygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICBpZiAodGhpcy5jb250cm9scykge1xyXG4gICAgICB0aGlzLmNvbnRyb2xzLmRpc3Bvc2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzZXRVcENvbnRyb2xzKCk7XHJcblxyXG5cclxuICBwcml2YXRlIGNvbmZpZ3VyZUxpc3RlbmVycygpIHtcclxuICAgIHRoaXMuY29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICB0aGlzLnJlbmRlcmVyU2VydmljZS5yZW5kZXIoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGRvbid0IHJheWNhc3QgZHVyaW5nIHJvdGF0aW9uL2RhbXBpbmcvcGFubmluZ1xyXG4gICAgaWYgKHRoaXMucmF5Y2FzdGVyU2VydmljZS5pc0VuYWJsZWQpIHtcclxuICAgICAgdGhpcy5jb250cm9scy5hZGRFdmVudExpc3RlbmVyKCdzdGFydCcsICgpID0+IHtcclxuICAgICAgICB0aGlzLnJheWNhc3RlclNlcnZpY2UucGF1c2UoKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuY29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcignZW5kJywgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMucmF5Y2FzdGVyU2VydmljZS5yZXN1bWUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnT3JiaXRDb250cm9sc0NvbXBvbmVudC5uZ0FmdGVyVmlld0luaXQnKTtcclxuICAgIGlmICh0aGlzLmNoaWxkQ2FtZXJhcyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuY2hpbGRDYW1lcmFzLmZpcnN0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW1lcmEgaXMgbm90IGZvdW5kJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXRoaXMud2ViR2xSZW5kZXJlcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dlYkdsUmVuZGVyZXIgaXMgbm90IGZvdW5kJyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmxpc3RlbmluZ0NvbnRyb2xFbGVtZW50ID0gdGhpcy53ZWJHbFJlbmRlcmVyLnJlbmRlclBhbmU7XHJcbiAgICB0aGlzLnNldFVwQ29udHJvbHMoKTtcclxuICAgIHRoaXMuY29uZmlndXJlTGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLnJlbmRlcmVyU2VydmljZS5yZW5kZXIoKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==