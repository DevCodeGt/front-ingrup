/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Injectable } from '@angular/core';
import { RendererService } from '../renderer/renderer.service';
/**
 * Animation service emits animate event, which should be used by animated components for animation logic.
 * NOTE: this service is for the performance optimization: requestAnimationFrame and render is called once.
 */
var AnimationService = /** @class */ (function () {
    function AnimationService(rendererService) {
        this.rendererService = rendererService;
        /**
         * Subscribe for animation frame creation (change position and etc.)
         * Avoid render() execution, it's called only once when all components updated animation frame.
         */
        this.animate = new EventEmitter();
        this.enabled = false;
        this.animationStep = this.animationStep.bind(this);
    }
    /**
     * Start the animation loop.
     */
    /**
     * Start the animation loop.
     * @return {?}
     */
    AnimationService.prototype.start = /**
     * Start the animation loop.
     * @return {?}
     */
    function () {
        if (!this.enabled) {
            this.enabled = true;
            this.animationStep();
        }
    };
    /**
     * Stop all animations.
     */
    /**
     * Stop all animations.
     * @return {?}
     */
    AnimationService.prototype.stop = /**
     * Stop all animations.
     * @return {?}
     */
    function () {
        if (this.enabled) {
            this.enabled = false;
        }
    };
    /**
     * @private
     * @return {?}
     */
    AnimationService.prototype.animationStep = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.enabled) {
            requestAnimationFrame(this.animationStep);
            if (this.animate.observers.length > 0) {
                this.animate.emit();
                /**
                 * When all components updated animation, render event is emitted.
                 * Main renderer subscribed to this event emitter.
                 */
                this.rendererService.render();
            }
        }
    };
    AnimationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AnimationService.ctorParameters = function () { return [
        { type: RendererService }
    ]; };
    return AnimationService;
}());
export { AnimationService };
if (false) {
    /**
     * Subscribe for animation frame creation (change position and etc.)
     * Avoid render() execution, it's called only once when all components updated animation frame.
     * @type {?}
     */
    AnimationService.prototype.animate;
    /**
     * @type {?}
     * @private
     */
    AnimationService.prototype.enabled;
    /**
     * @type {?}
     * @private
     */
    AnimationService.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL2FuaW1hdGlvbi9hbmltYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBRSxVQUFVLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQzs7Ozs7QUFPN0Q7SUFXRSwwQkFDVSxlQUFnQztRQUFoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7Ozs7O1FBTGpDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBRXBDLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFLdEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7O09BRUc7Ozs7O0lBQ0ksZ0NBQUs7Ozs7SUFBWjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN0QjtJQUNILENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSSwrQkFBSTs7OztJQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQzs7Ozs7SUFFTyx3Q0FBYTs7OztJQUFyQjtRQUNFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixxQkFBcUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDMUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNwQjs7O21CQUdHO2dCQUNILElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUM7YUFDL0I7U0FDRjtJQUNILENBQUM7O2dCQWhERixVQUFVOzs7O2dCQVBILGVBQWU7O0lBeUR2Qix1QkFBQztDQUFBLEFBbERELElBa0RDO1NBakRZLGdCQUFnQjs7Ozs7OztJQU0zQixtQ0FBNEM7Ozs7O0lBRTVDLG1DQUF3Qjs7Ozs7SUFHdEIsMkNBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudEVtaXR0ZXIsIEluamVjdGFibGUsIE9wdGlvbmFsLCBTa2lwU2VsZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7UmVuZGVyZXJTZXJ2aWNlfSBmcm9tICcuLi9yZW5kZXJlci9yZW5kZXJlci5zZXJ2aWNlJztcclxuXHJcblxyXG4vKipcclxuICogQW5pbWF0aW9uIHNlcnZpY2UgZW1pdHMgYW5pbWF0ZSBldmVudCwgd2hpY2ggc2hvdWxkIGJlIHVzZWQgYnkgYW5pbWF0ZWQgY29tcG9uZW50cyBmb3IgYW5pbWF0aW9uIGxvZ2ljLlxyXG4gKiBOT1RFOiB0aGlzIHNlcnZpY2UgaXMgZm9yIHRoZSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb246IHJlcXVlc3RBbmltYXRpb25GcmFtZSBhbmQgcmVuZGVyIGlzIGNhbGxlZCBvbmNlLlxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uU2VydmljZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIFN1YnNjcmliZSBmb3IgYW5pbWF0aW9uIGZyYW1lIGNyZWF0aW9uIChjaGFuZ2UgcG9zaXRpb24gYW5kIGV0Yy4pXHJcbiAgICogQXZvaWQgcmVuZGVyKCkgZXhlY3V0aW9uLCBpdCdzIGNhbGxlZCBvbmx5IG9uY2Ugd2hlbiBhbGwgY29tcG9uZW50cyB1cGRhdGVkIGFuaW1hdGlvbiBmcmFtZS5cclxuICAgKi9cclxuICByZWFkb25seSBhbmltYXRlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG5cclxuICBwcml2YXRlIGVuYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHJlbmRlcmVyU2VydmljZTogUmVuZGVyZXJTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICB0aGlzLmFuaW1hdGlvblN0ZXAgPSB0aGlzLmFuaW1hdGlvblN0ZXAuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0IHRoZSBhbmltYXRpb24gbG9vcC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhcnQoKSB7XHJcbiAgICBpZiAoIXRoaXMuZW5hYmxlZCkge1xyXG4gICAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICB0aGlzLmFuaW1hdGlvblN0ZXAoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0b3AgYWxsIGFuaW1hdGlvbnMuXHJcbiAgICovXHJcbiAgcHVibGljIHN0b3AoKSB7XHJcbiAgICBpZiAodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhbmltYXRpb25TdGVwKCkge1xyXG4gICAgaWYgKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25TdGVwKTtcclxuICAgICAgaWYgKHRoaXMuYW5pbWF0ZS5vYnNlcnZlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHRoaXMuYW5pbWF0ZS5lbWl0KCk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV2hlbiBhbGwgY29tcG9uZW50cyB1cGRhdGVkIGFuaW1hdGlvbiwgcmVuZGVyIGV2ZW50IGlzIGVtaXR0ZWQuXHJcbiAgICAgICAgICogTWFpbiByZW5kZXJlciBzdWJzY3JpYmVkIHRvIHRoaXMgZXZlbnQgZW1pdHRlci5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnJlbmRlcmVyU2VydmljZS5yZW5kZXIoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19