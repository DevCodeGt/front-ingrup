/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractObject3D } from '../abstract-object-3d';
import { AbstractLazyObject3D } from '../abstract-lazy-object-3d';
import { appliedMaterial } from '../../util';
import { fixCenter } from '../../util/fix-center';
import { RendererService } from '../../renderer/renderer.service';
var TextMeshComponent = /** @class */ (function (_super) {
    tslib_1.__extends(TextMeshComponent, _super);
    function TextMeshComponent(rendererService) {
        var _this = _super.call(this, rendererService) || this;
        _this.rendererService = rendererService;
        _this.material = 'basic';
        _this._materialColor = 0xDADADA;
        _this._text = 'Text';
        _this.size = 10;
        _this.height = 0.3;
        _this.curveSegments = 2;
        _this.bevelEnabled = false;
        _this.bevelThickness = 0.1;
        _this.bevelSize = 0.1;
        _this.bevelOffset = 0;
        _this.bevelSegments = 1;
        _this.fontUrl = './assets/font/helvetiker_regular.typeface.json';
        _this.castShadow = true;
        _this.receiveShadow = true;
        _this.depthWrite = true;
        _this.centered = true;
        return _this;
    }
    Object.defineProperty(TextMeshComponent.prototype, "materialColor", {
        get: /**
         * @return {?}
         */
        function () {
            return this._materialColor;
        },
        set: /**
         * @param {?} materialColor
         * @return {?}
         */
        function (materialColor) {
            // console.log('change color', materialColor);
            this._materialColor = materialColor;
            this.startLoading();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextMeshComponent.prototype, "text", {
        get: /**
         * @return {?}
         */
        function () {
            return this._text;
        },
        set: /**
         * @param {?} text
         * @return {?}
         */
        function (text) {
            this._text = text;
            this.startLoading();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TextMeshComponent.prototype.getMaterial = /**
     * @return {?}
     */
    function () {
        return appliedMaterial(this.materialColor, this.material, this.depthWrite);
    };
    /**
     * @protected
     * @return {?}
     */
    TextMeshComponent.prototype.loadLazyObject = /**
     * @protected
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                // console.log('TextMeshComponent.loadLazyObject');
                return [2 /*return*/, new Promise((/**
                     * @param {?} resolve
                     * @return {?}
                     */
                    function (resolve) {
                        /** @type {?} */
                        var loader = new THREE.FontLoader();
                        loader.load(_this.fontUrl, (/**
                         * @param {?} font
                         * @return {?}
                         */
                        function (font) {
                            /** @type {?} */
                            var geometry = new THREE.TextGeometry(_this.text, {
                                font: font,
                                size: _this.size,
                                height: _this.height,
                                curveSegments: _this.curveSegments,
                                bevelEnabled: _this.bevelEnabled,
                                bevelThickness: _this.bevelThickness,
                                bevelSize: _this.bevelSize,
                                bevelOffset: _this.bevelOffset,
                                bevelSegments: _this.bevelOffset
                            });
                            /** @type {?} */
                            var material = _this.getMaterial();
                            /** @type {?} */
                            var mesh = new THREE.Mesh(geometry, material);
                            mesh.castShadow = _this.castShadow;
                            mesh.receiveShadow = _this.receiveShadow;
                            if (_this.centered) {
                                fixCenter(mesh);
                            }
                            resolve(mesh);
                        }));
                    }))];
            });
        });
    };
    TextMeshComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-text-mesh',
                    providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return TextMeshComponent; })) }],
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    TextMeshComponent.ctorParameters = function () { return [
        { type: RendererService }
    ]; };
    TextMeshComponent.propDecorators = {
        material: [{ type: Input }],
        materialColor: [{ type: Input }],
        text: [{ type: Input }],
        size: [{ type: Input }],
        height: [{ type: Input }],
        curveSegments: [{ type: Input }],
        bevelEnabled: [{ type: Input }],
        bevelThickness: [{ type: Input }],
        bevelSize: [{ type: Input }],
        bevelOffset: [{ type: Input }],
        bevelSegments: [{ type: Input }],
        fontUrl: [{ type: Input }],
        castShadow: [{ type: Input }],
        receiveShadow: [{ type: Input }],
        depthWrite: [{ type: Input }],
        centered: [{ type: Input }]
    };
    return TextMeshComponent;
}(AbstractLazyObject3D));
export { TextMeshComponent };
if (false) {
    /** @type {?} */
    TextMeshComponent.prototype.material;
    /**
     * @type {?}
     * @private
     */
    TextMeshComponent.prototype._materialColor;
    /**
     * @type {?}
     * @private
     */
    TextMeshComponent.prototype._text;
    /** @type {?} */
    TextMeshComponent.prototype.size;
    /** @type {?} */
    TextMeshComponent.prototype.height;
    /** @type {?} */
    TextMeshComponent.prototype.curveSegments;
    /** @type {?} */
    TextMeshComponent.prototype.bevelEnabled;
    /** @type {?} */
    TextMeshComponent.prototype.bevelThickness;
    /** @type {?} */
    TextMeshComponent.prototype.bevelSize;
    /** @type {?} */
    TextMeshComponent.prototype.bevelOffset;
    /** @type {?} */
    TextMeshComponent.prototype.bevelSegments;
    /** @type {?} */
    TextMeshComponent.prototype.fontUrl;
    /** @type {?} */
    TextMeshComponent.prototype.castShadow;
    /** @type {?} */
    TextMeshComponent.prototype.receiveShadow;
    /** @type {?} */
    TextMeshComponent.prototype.depthWrite;
    /** @type {?} */
    TextMeshComponent.prototype.centered;
    /**
     * @type {?}
     * @protected
     */
    TextMeshComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1tZXNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2F0ZnQvIiwic291cmNlcyI6WyJsaWIvb2JqZWN0L3RleHQvdGV4dC1tZXNoLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUNoRSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFFaEU7SUFLdUMsNkNBQW9CO0lBbUV6RCwyQkFDWSxlQUFnQztRQUQ1QyxZQUdFLGtCQUFNLGVBQWUsQ0FBQyxTQUN2QjtRQUhXLHFCQUFlLEdBQWYsZUFBZSxDQUFpQjtRQWpFNUMsY0FBUSxHQUFHLE9BQU8sQ0FBQztRQUdYLG9CQUFjLEdBQUcsUUFBUSxDQUFDO1FBVzFCLFdBQUssR0FBRyxNQUFNLENBQUM7UUFZdkIsVUFBSSxHQUFHLEVBQUUsQ0FBQztRQUdWLFlBQU0sR0FBRyxHQUFHLENBQUM7UUFHYixtQkFBYSxHQUFHLENBQUMsQ0FBQztRQUdsQixrQkFBWSxHQUFHLEtBQUssQ0FBQztRQUdyQixvQkFBYyxHQUFHLEdBQUcsQ0FBQztRQUdyQixlQUFTLEdBQUcsR0FBRyxDQUFDO1FBR2hCLGlCQUFXLEdBQUcsQ0FBQyxDQUFDO1FBR2hCLG1CQUFhLEdBQUcsQ0FBQyxDQUFDO1FBR2xCLGFBQU8sR0FBRyxnREFBZ0QsQ0FBQztRQUczRCxnQkFBVSxHQUFHLElB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R0wsS0FBSztnQ0FHTCxLQUFLOzZCQUdMLEtBQUs7MkJBR0wsS0FBSzs7SUErQ1Isd0JBQUM7Q0FBQSxBQXBIRCxDQUt1QyxvQkFBb0IsR0ErRzFEO1NBL0dZLGlCQUFpQjs7O0lBRTVCLHFDQUNtQjs7Ozs7SUFHbkIsMkNBQWtDOzs7OztJQVdsQyxrQ0FBdUI7O0lBV3ZCLGlDQUNVOztJQUVWLG1DQUNhOztJQUViLDBDQUNrQjs7SUFFbEIseUNBQ3FCOztJQUVyQiwyQ0FDcUI7O0lBRXJCLHNDQUNnQjs7SUFFaEIsd0NBQ2dCOztJQUVoQiwwQ0FDa0I7O0lBRWxCLG9DQUMyRDs7SUFFM0QsdUNBQ2tCOztJQUVsQiwwQ0FDcUI7O0lBRXJCLHVDQUNrQjs7SUFFbEIscUNBQ2dCOzs7OztJQUdkLDRDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuaW1wb3J0IHtBYnN0cmFjdE9iamVjdDNEfSBmcm9tICcuLi9hYnN0cmFjdC1vYmplY3QtM2QnO1xyXG5pbXBvcnQge0Fic3RyYWN0TGF6eU9iamVjdDNEfSBmcm9tICcuLi9hYnN0cmFjdC1sYXp5LW9iamVjdC0zZCc7XHJcbmltcG9ydCB7YXBwbGllZE1hdGVyaWFsfSBmcm9tICcuLi8uLi91dGlsJztcclxuaW1wb3J0IHtmaXhDZW50ZXJ9IGZyb20gJy4uLy4uL3V0aWwvZml4LWNlbnRlcic7XHJcbmltcG9ydCB7UmVuZGVyZXJTZXJ2aWNlfSBmcm9tICcuLi8uLi9yZW5kZXJlci9yZW5kZXJlci5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXRmdC10ZXh0LW1lc2gnLFxyXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBBYnN0cmFjdE9iamVjdDNELCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUZXh0TWVzaENvbXBvbmVudCl9XSxcclxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUZXh0TWVzaENvbXBvbmVudCBleHRlbmRzIEFic3RyYWN0TGF6eU9iamVjdDNEIHtcclxuXHJcbiAgQElucHV0KClcclxuICBtYXRlcmlhbCA9ICdiYXNpYyc7XHJcblxyXG5cclxuICBwcml2YXRlIF9tYXRlcmlhbENvbG9yID0gMHhEQURBREE7XHJcbiAgQElucHV0KClcclxuICBzZXQgbWF0ZXJpYWxDb2xvcihtYXRlcmlhbENvbG9yOiBudW1iZXIpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdjaGFuZ2UgY29sb3InLCBtYXRlcmlhbENvbG9yKTtcclxuICAgIHRoaXMuX21hdGVyaWFsQ29sb3IgPSBtYXRlcmlhbENvbG9yO1xyXG4gICAgdGhpcy5zdGFydExvYWRpbmcoKTtcclxuICB9XHJcbiAgZ2V0IG1hdGVyaWFsQ29sb3IoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fbWF0ZXJpYWxDb2xvcjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3RleHQgPSAnVGV4dCc7XHJcbiAgQElucHV0KClcclxuICBzZXQgdGV4dCh0ZXh0OiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX3RleHQgPSB0ZXh0O1xyXG4gICAgdGhpcy5zdGFydExvYWRpbmcoKTtcclxuICB9XHJcbiAgZ2V0IHRleHQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fdGV4dDtcclxuICB9XHJcblxyXG5cclxuICBASW5wdXQoKVxyXG4gIHNpemUgPSAxMDtcclxuXHJcbiAgQElucHV0KClcclxuICBoZWlnaHQgPSAwLjM7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgY3VydmVTZWdtZW50cyA9IDI7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgYmV2ZWxFbmFibGVkID0gZmFsc2U7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgYmV2ZWxUaGlja25lc3MgPSAwLjE7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgYmV2ZWxTaXplID0gMC4xO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGJldmVsT2Zmc2V0ID0gMDtcclxuXHJcbiAgQElucHV0KClcclxuICBiZXZlbFNlZ21lbnRzID0gMTtcclxuXHJcbiAgQElucHV0KClcclxuICBmb250VXJsID0gJy4vYXNzZXRzL2ZvbnQvaGVsdmV0aWtlcl9yZWd1bGFyLnR5cGVmYWNlLmpzb24nO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGNhc3RTaGFkb3cgPSB0cnVlO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHJlY2VpdmVTaGFkb3cgPSB0cnVlO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGRlcHRoV3JpdGUgPSB0cnVlO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGNlbnRlcmVkID0gdHJ1ZTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0TWF0ZXJpYWwoKTogVEhSRUUuTWF0ZXJpYWwge1xyXG4gICAgcmV0dXJuIGFwcGxpZWRNYXRlcmlhbCh0aGlzLm1hdGVyaWFsQ29sb3IsIHRoaXMubWF0ZXJpYWwsIHRoaXMuZGVwdGhXcml0ZSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYXN5bmMgbG9hZExhenlPYmplY3QoKTogUHJvbWlzZTxUSFJFRS5PYmplY3QzRD4ge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ1RleHRNZXNoQ29tcG9uZW50LmxvYWRMYXp5T2JqZWN0Jyk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFRIUkVFLk9iamVjdDNEPihyZXNvbHZlID0+IHtcclxuICAgICAgY29uc3QgbG9hZGVyID0gbmV3IFRIUkVFLkZvbnRMb2FkZXIoKTtcclxuICAgICAgbG9hZGVyLmxvYWQodGhpcy5mb250VXJsLCBmb250ID0+IHtcclxuXHJcbiAgICAgICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuVGV4dEdlb21ldHJ5KHRoaXMudGV4dCwge1xyXG4gICAgICAgICAgZm9udDogZm9udCxcclxuICAgICAgICAgIHNpemU6IHRoaXMuc2l6ZSxcclxuICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXHJcbiAgICAgICAgICBjdXJ2ZVNlZ21lbnRzOiB0aGlzLmN1cnZlU2VnbWVudHMsXHJcbiAgICAgICAgICBiZXZlbEVuYWJsZWQ6IHRoaXMuYmV2ZWxFbmFibGVkLFxyXG4gICAgICAgICAgYmV2ZWxUaGlja25lc3M6IHRoaXMuYmV2ZWxUaGlja25lc3MsXHJcbiAgICAgICAgICBiZXZlbFNpemU6IHRoaXMuYmV2ZWxTaXplLFxyXG4gICAgICAgICAgYmV2ZWxPZmZzZXQ6IHRoaXMuYmV2ZWxPZmZzZXQsXHJcbiAgICAgICAgICBiZXZlbFNlZ21lbnRzOiB0aGlzLmJldmVsT2Zmc2V0XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgbWF0ZXJpYWwgPSB0aGlzLmdldE1hdGVyaWFsKCk7XHJcbiAgICAgICAgY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcbiAgICAgICAgbWVzaC5jYXN0U2hhZG93ID0gdGhpcy5jYXN0U2hhZG93O1xyXG4gICAgICAgIG1lc2gucmVjZWl2ZVNoYWRvdyA9IHRoaXMucmVjZWl2ZVNoYWRvdztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY2VudGVyZWQpIHtcclxuICAgICAgICAgIGZpeENlbnRlcihtZXNoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzb2x2ZShtZXNoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gIH1cclxuXHJcblxyXG59XHJcbiJdfQ==