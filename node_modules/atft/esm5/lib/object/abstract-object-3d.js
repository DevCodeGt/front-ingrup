/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChildren, EventEmitter, Input, Output, QueryList, ViewChildren } from '@angular/core';
/**
 * @abstract
 * @template T
 */
var AbstractObject3D = /** @class */ (function () {
    function AbstractObject3D(rendererService) {
        var _this = this;
        this.rendererService = rendererService;
        this.changed = new EventEmitter();
        // console.log('AbstractObject3D.constructor');
        this.changed.subscribe((/**
         * @return {?}
         */
        function () {
            _this.rendererService.render();
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    AbstractObject3D.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this.object) {
            return;
        }
        /** @type {?} */
        var modified = false;
        if (['rotateX', 'rotateY', 'rotateZ'].some((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) { return propName in changes; }))) {
            this.applyRotation();
            modified = true;
        }
        if (['translateX', 'translateY', 'translateZ'].some((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) { return propName in changes; }))) {
            this.applyTranslation();
            modified = true;
        }
        if (modified) {
            this.changed.emit();
        }
    };
    /**
     * @return {?}
     */
    AbstractObject3D.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // console.log('AbstractObject3D.OnDestroy');
        if (this.object && this.object.parent) {
            this.object.parent.remove(this.object);
        }
    };
    /**
     * @return {?}
     */
    AbstractObject3D.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // console.log('AbstractObject3D.ngAfterViewInit ' + this.name);
        this.object = this.newObject3DInstance();
        this.applyTranslation();
        this.applyRotation();
        this.collectChilds();
        this.afterInit();
    };
    /**
     * @return {?}
     */
    AbstractObject3D.prototype.collectChilds = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // console.log('Collect childs for', this.name);
        if (this.childNodes !== undefined && this.childNodes.length > 1) {
            this.childNodes.filter((/**
             * @param {?} i
             * @return {?}
             */
            function (i) { return i !== _this && i.getObject() !== undefined; })).forEach((/**
             * @param {?} i
             * @return {?}
             */
            function (i) {
                // console.log('Add childNodes for', this.name, i);
                _this.addChild(i.getObject());
            }));
        }
        else {
            // console.log("No child Object3D for: " + this.constructor.label);
        }
        if (this.viewChilds !== undefined && this.viewChilds.length > 0) {
            this.viewChilds.filter((/**
             * @param {?} i
             * @return {?}
             */
            function (i) { return i !== _this
                && i.getObject() !== undefined
                && !i.getObject().parent; } /* direct childs only */)).forEach((/**
             * @param {?} i
             * @return {?}
             */
            function (i) {
                // console.log('Add viewChilds for', this.name, i);
                _this.addChild(i.getObject());
            }));
        }
        else {
            // console.log("No child Object3D for: " + this.constructor.label);
        }
    };
    /**
     * @private
     * @return {?}
     */
    AbstractObject3D.prototype.applyRotation = /**
     * @private
     * @return {?}
     */
    function () {
        this.object.rotation.set(this.rotateX || 0, this.rotateY || 0, this.rotateZ || 0, 'XYZ');
    };
    /**
     * @private
     * @return {?}
     */
    AbstractObject3D.prototype.applyTranslation = /**
     * @private
     * @return {?}
     */
    function () {
        this.object.position.set(this.translateX || 0, this.translateY || 0, this.translateZ || 0);
    };
    /**
     * @param {?} object
     * @return {?}
     */
    AbstractObject3D.prototype.addChild = /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        this.object.add(object);
    };
    /**
     * @protected
     * @param {?} object
     * @return {?}
     */
    AbstractObject3D.prototype.removeChild = /**
     * @protected
     * @param {?} object
     * @return {?}
     */
    function (object) {
        this.object.remove(object);
    };
    /**
     * @return {?}
     */
    AbstractObject3D.prototype.getObject = /**
     * @return {?}
     */
    function () {
        return this.object;
    };
    /**
     * @protected
     * @return {?}
     */
    AbstractObject3D.prototype.afterInit = /**
     * @protected
     * @return {?}
     */
    function () {
        // this.changed.emit();
    };
    AbstractObject3D.propDecorators = {
        childNodes: [{ type: ContentChildren, args: [AbstractObject3D, { descendants: false },] }],
        viewChilds: [{ type: ViewChildren, args: [AbstractObject3D,] }],
        rotateX: [{ type: Input }],
        rotateY: [{ type: Input }],
        rotateZ: [{ type: Input }],
        translateX: [{ type: Input }],
        translateY: [{ type: Input }],
        translateZ: [{ type: Input }],
        name: [{ type: Input }],
        changed: [{ type: Output }]
    };
    return AbstractObject3D;
}());
export { AbstractObject3D };
if (false) {
    /** @type {?} */
    AbstractObject3D.prototype.childNodes;
    /** @type {?} */
    AbstractObject3D.prototype.viewChilds;
    /**
     * Rotation in Euler angles (radians) with order X, Y, Z.
     * @type {?}
     */
    AbstractObject3D.prototype.rotateX;
    /** @type {?} */
    AbstractObject3D.prototype.rotateY;
    /** @type {?} */
    AbstractObject3D.prototype.rotateZ;
    /**
     * Translate the geometry. This is typically done as a one time operation, and not during a loop.
     * @type {?}
     */
    AbstractObject3D.prototype.translateX;
    /** @type {?} */
    AbstractObject3D.prototype.translateY;
    /** @type {?} */
    AbstractObject3D.prototype.translateZ;
    /** @type {?} */
    AbstractObject3D.prototype.name;
    /** @type {?} */
    AbstractObject3D.prototype.changed;
    /**
     * @type {?}
     * @private
     */
    AbstractObject3D.prototype.object;
    /**
     * @type {?}
     * @protected
     */
    AbstractObject3D.prototype.rendererService;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    AbstractObject3D.prototype.newObject3DInstance = function () { };
}
//# sourceMappingURL=data:application/json;base64,