/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractObject3D } from '../abstract-object-3d';
import { appliedColor } from '../../util';
import { RendererService } from '../../renderer/renderer.service';
var PointLightComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PointLightComponent, _super);
    function PointLightComponent(rendererService) {
        var _this = _super.call(this, rendererService) || this;
        _this.rendererService = rendererService;
        _this.color = 0xffffff;
        _this.intensity = 1;
        _this.distance = 500;
        _this.castShadow = false;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    PointLightComponent.prototype.newObject3DInstance = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var light = new THREE.PointLight(appliedColor(this.color), this.intensity, this.distance);
        if (this.castShadow === true) {
            light.castShadow = this.castShadow;
            // TODO: props
            light.shadow.mapSize.width = 1024;
            light.shadow.mapSize.height = 1024;
            light.shadow.camera.near = 0.5;
            light.shadow.camera.far = 500;
            light.shadow.bias = -0.001;
            light.shadow.radius = 1;
        }
        return light;
    };
    PointLightComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-point-light',
                    providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PointLightComponent; })) }],
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    PointLightComponent.ctorParameters = function () { return [
        { type: RendererService }
    ]; };
    PointLightComponent.propDecorators = {
        color: [{ type: Input }],
        intensity: [{ type: Input }],
        distance: [{ type: Input }],
        castShadow: [{ type: Input }]
    };
    return PointLightComponent;
}(AbstractObject3D));
export { PointLightComponent };
if (false) {
    /** @type {?} */
    PointLightComponent.prototype.color;
    /** @type {?} */
    PointLightComponent.prototype.intensity;
    /** @type {?} */
    PointLightComponent.prototype.distance;
    /** @type {?} */
    PointLightComponent.prototype.castShadow;
    /**
     * @type {?}
     * @protected
     */
    PointLightComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnQtbGlnaHQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXRmdC8iLCJzb3VyY2VzIjpbImxpYi9vYmplY3QvbGlnaHQvcG9pbnQtbGlnaHQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDeEMsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBRWhFO0lBS3lDLCtDQUFrQztJQU96RSw2QkFDWSxlQUFnQztRQUQ1QyxZQUdFLGtCQUFNLGVBQWUsQ0FBQyxTQUN2QjtRQUhXLHFCQUFlLEdBQWYsZUFBZSxDQUFpQjtRQU5uQyxXQUFLLEdBQUcsUUFBUSxDQUFDO1FBQ2pCLGVBQVMsR0FBRyxDQUFDLENBQUM7UUFDZCxjQUFRLEdBQUcsR0FBRyxDQUFDO1FBQ2YsZ0JBQVUsR0FBRyxLQUFLLENBQUM7O0lBTTVCLENBQUM7Ozs7O0lBRVMsaURBQW1COzs7O0lBQTdCOztZQUNRLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFM0YsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLElBQUksRUFBRTtZQUM1QixLQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDbkMsY0FBYztZQUNkLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDbEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNuQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1lBQy9CLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7WUFDOUIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDM0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ3pCO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOztnQkFqQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxVQUFVOzs7NEJBQUMsY0FBTSxPQUFBLG1CQUFtQixFQUFuQixDQUFtQixFQUFDLEVBQUMsQ0FBQztvQkFDNUYsUUFBUSxFQUFFLDJCQUEyQjtpQkFDdEM7Ozs7Z0JBTk8sZUFBZTs7O3dCQVNwQixLQUFLOzRCQUNMLEtBQUs7MkJBQ0wsS0FBSzs2QkFDTCxLQUFLOztJQXlCUiwwQkFBQztDQUFBLEFBbkNELENBS3lDLGdCQUFnQixHQThCeEQ7U0E5QlksbUJBQW1COzs7SUFFOUIsb0NBQTBCOztJQUMxQix3Q0FBdUI7O0lBQ3ZCLHVDQUF3Qjs7SUFDeEIseUNBQTRCOzs7OztJQUcxQiw4Q0FBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCB7QWJzdHJhY3RPYmplY3QzRH0gZnJvbSAnLi4vYWJzdHJhY3Qtb2JqZWN0LTNkJztcclxuaW1wb3J0IHthcHBsaWVkQ29sb3J9IGZyb20gJy4uLy4uL3V0aWwnO1xyXG5pbXBvcnQge1JlbmRlcmVyU2VydmljZX0gZnJvbSAnLi4vLi4vcmVuZGVyZXIvcmVuZGVyZXIuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2F0ZnQtcG9pbnQtbGlnaHQnLFxyXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBBYnN0cmFjdE9iamVjdDNELCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBQb2ludExpZ2h0Q29tcG9uZW50KX1dLFxyXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PidcclxufSlcclxuZXhwb3J0IGNsYXNzIFBvaW50TGlnaHRDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdE9iamVjdDNEPFRIUkVFLlBvaW50TGlnaHQ+IHtcclxuXHJcbiAgQElucHV0KCkgY29sb3IgPSAweGZmZmZmZjtcclxuICBASW5wdXQoKSBpbnRlbnNpdHkgPSAxO1xyXG4gIEBJbnB1dCgpIGRpc3RhbmNlID0gNTAwO1xyXG4gIEBJbnB1dCgpIGNhc3RTaGFkb3cgPSBmYWxzZTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbmV3T2JqZWN0M0RJbnN0YW5jZSgpIHtcclxuICAgIGNvbnN0IGxpZ2h0ID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoYXBwbGllZENvbG9yKHRoaXMuY29sb3IpLCB0aGlzLmludGVuc2l0eSwgdGhpcy5kaXN0YW5jZSk7XHJcblxyXG4gICAgaWYgKHRoaXMuY2FzdFNoYWRvdyA9PT0gdHJ1ZSkge1xyXG4gICAgICBsaWdodC5jYXN0U2hhZG93ID0gdGhpcy5jYXN0U2hhZG93O1xyXG4gICAgICAvLyBUT0RPOiBwcm9wc1xyXG4gICAgICBsaWdodC5zaGFkb3cubWFwU2l6ZS53aWR0aCA9IDEwMjQ7XHJcbiAgICAgIGxpZ2h0LnNoYWRvdy5tYXBTaXplLmhlaWdodCA9IDEwMjQ7XHJcbiAgICAgIGxpZ2h0LnNoYWRvdy5jYW1lcmEubmVhciA9IDAuNTtcclxuICAgICAgbGlnaHQuc2hhZG93LmNhbWVyYS5mYXIgPSA1MDA7XHJcbiAgICAgIGxpZ2h0LnNoYWRvdy5iaWFzID0gLTAuMDAxO1xyXG4gICAgICBsaWdodC5zaGFkb3cucmFkaXVzID0gMTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbGlnaHQ7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=