/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractObject3D } from '../abstract-object-3d';
import { appliedColor } from '../../util/applied-color';
import { RendererService } from '../../renderer/renderer.service';
var DirectionalLightComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DirectionalLightComponent, _super);
    function DirectionalLightComponent(rendererService) {
        var _this = _super.call(this, rendererService) || this;
        _this.rendererService = rendererService;
        _this.color = 0xffffff;
        _this.intensity = 1;
        // by default, target is 0,0,0
        _this.target = new THREE.Object3D();
        _this.castShadow = true;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    DirectionalLightComponent.prototype.newObject3DInstance = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var light = new THREE.DirectionalLight(appliedColor(this.color), this.intensity);
        light.target = this.target;
        if (this.castShadow === true) {
            light.castShadow = this.castShadow;
            // TODO: props
            light.shadow.camera.top = 100;
            light.shadow.camera.bottom = -100;
            light.shadow.camera.left = -100;
            light.shadow.camera.right = 100;
            light.shadow.camera.near = 0.1;
            light.shadow.camera.far = 500;
            light.shadow.mapSize.set(1024, 1024);
            light.shadow.bias = -0.001;
        }
        return light;
    };
    DirectionalLightComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-directional-light',
                    providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return DirectionalLightComponent; })) }],
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    DirectionalLightComponent.ctorParameters = function () { return [
        { type: RendererService }
    ]; };
    DirectionalLightComponent.propDecorators = {
        color: [{ type: Input }],
        intensity: [{ type: Input }],
        target: [{ type: Input }],
        castShadow: [{ type: Input }]
    };
    return DirectionalLightComponent;
}(AbstractObject3D));
export { DirectionalLightComponent };
if (false) {
    /** @type {?} */
    DirectionalLightComponent.prototype.color;
    /** @type {?} */
    DirectionalLightComponent.prototype.intensity;
    /** @type {?} */
    DirectionalLightComponent.prototype.target;
    /** @type {?} */
    DirectionalLightComponent.prototype.castShadow;
    /**
     * @type {?}
     * @protected
     */
    DirectionalLightComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uYWwtbGlnaHQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXRmdC8iLCJzb3VyY2VzIjpbImxpYi9vYmplY3QvbGlnaHQvZGlyZWN0aW9uYWwtbGlnaHQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFFaEU7SUFLK0MscURBQXdDO0lBUXJGLG1DQUNZLGVBQWdDO1FBRDVDLFlBR0Usa0JBQU0sZUFBZSxDQUFDLFNBQ3ZCO1FBSFcscUJBQWUsR0FBZixlQUFlLENBQWlCO1FBUG5DLFdBQUssR0FBRyxRQUFRLENBQUM7UUFDakIsZUFBUyxHQUFHLENBQUMsQ0FBQzs7UUFFZCxZQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDOUIsZ0JBQVUsR0FBRyxJQUFJLENBQUM7O0lBTTNCLENBQUM7Ozs7O0lBRVMsdURBQW1COzs7O0lBQTdCOztZQUVRLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDdEMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFDeEIsSUFBSSxDQUFDLFNBQVMsQ0FDZjtRQUVELEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUUzQixJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxFQUFFO1lBQzVCLEtBQUssQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUNuQyxjQUFjO1lBQ2QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUM5QixLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUM7WUFDbEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ2hDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7WUFDaEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztZQUMvQixLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1lBQzlCLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDckMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUM7U0FFNUI7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUVmLENBQUM7O2dCQTNDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLFVBQVU7Ozs0QkFBQyxjQUFNLE9BQUEseUJBQXlCLEVBQXpCLENBQXlCLEVBQUMsRUFBQyxDQUFDO29CQUNsRyxRQUFRLEVBQUUsMkJBQTJCO2lCQUN0Qzs7OztnQkFOTyxlQUFlOzs7d0JBU3BCLEtBQUs7NEJBQ0wsS0FBSzt5QkFFTCxLQUFLOzZCQUNMLEtBQUs7O0lBa0NSLGdDQUFDO0NBQUEsQUE3Q0QsQ0FLK0MsZ0JBQWdCLEdBd0M5RDtTQXhDWSx5QkFBeUI7OztJQUVwQywwQ0FBMEI7O0lBQzFCLDhDQUF1Qjs7SUFFdkIsMkNBQXVDOztJQUN2QywrQ0FBMkI7Ozs7O0lBR3pCLG9EQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuaW1wb3J0IHtBYnN0cmFjdE9iamVjdDNEfSBmcm9tICcuLi9hYnN0cmFjdC1vYmplY3QtM2QnO1xyXG5pbXBvcnQge2FwcGxpZWRDb2xvcn0gZnJvbSAnLi4vLi4vdXRpbC9hcHBsaWVkLWNvbG9yJztcclxuaW1wb3J0IHtSZW5kZXJlclNlcnZpY2V9IGZyb20gJy4uLy4uL3JlbmRlcmVyL3JlbmRlcmVyLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhdGZ0LWRpcmVjdGlvbmFsLWxpZ2h0JyxcclxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogQWJzdHJhY3RPYmplY3QzRCwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRGlyZWN0aW9uYWxMaWdodENvbXBvbmVudCl9XSxcclxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEaXJlY3Rpb25hbExpZ2h0Q29tcG9uZW50IGV4dGVuZHMgQWJzdHJhY3RPYmplY3QzRDxUSFJFRS5EaXJlY3Rpb25hbExpZ2h0PiB7XHJcblxyXG4gIEBJbnB1dCgpIGNvbG9yID0gMHhmZmZmZmY7XHJcbiAgQElucHV0KCkgaW50ZW5zaXR5ID0gMTtcclxuICAvLyBieSBkZWZhdWx0LCB0YXJnZXQgaXMgMCwwLDBcclxuICBASW5wdXQoKSB0YXJnZXQgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICBASW5wdXQoKSBjYXN0U2hhZG93ID0gdHJ1ZTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbmV3T2JqZWN0M0RJbnN0YW5jZSgpIHtcclxuXHJcbiAgICBjb25zdCBsaWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KFxyXG4gICAgICBhcHBsaWVkQ29sb3IodGhpcy5jb2xvciksXHJcbiAgICAgIHRoaXMuaW50ZW5zaXR5XHJcbiAgICApO1xyXG5cclxuICAgIGxpZ2h0LnRhcmdldCA9IHRoaXMudGFyZ2V0O1xyXG5cclxuICAgIGlmICh0aGlzLmNhc3RTaGFkb3cgPT09IHRydWUpIHtcclxuICAgICAgbGlnaHQuY2FzdFNoYWRvdyA9IHRoaXMuY2FzdFNoYWRvdztcclxuICAgICAgLy8gVE9ETzogcHJvcHNcclxuICAgICAgbGlnaHQuc2hhZG93LmNhbWVyYS50b3AgPSAxMDA7XHJcbiAgICAgIGxpZ2h0LnNoYWRvdy5jYW1lcmEuYm90dG9tID0gLTEwMDtcclxuICAgICAgbGlnaHQuc2hhZG93LmNhbWVyYS5sZWZ0ID0gLTEwMDtcclxuICAgICAgbGlnaHQuc2hhZG93LmNhbWVyYS5yaWdodCA9IDEwMDtcclxuICAgICAgbGlnaHQuc2hhZG93LmNhbWVyYS5uZWFyID0gMC4xO1xyXG4gICAgICBsaWdodC5zaGFkb3cuY2FtZXJhLmZhciA9IDUwMDtcclxuICAgICAgbGlnaHQuc2hhZG93Lm1hcFNpemUuc2V0KDEwMjQsIDEwMjQpO1xyXG4gICAgICBsaWdodC5zaGFkb3cuYmlhcyA9IC0wLjAwMTtcclxuXHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGlnaHQ7XHJcblxyXG4gIH1cclxuXHJcbn1cclxuIl19