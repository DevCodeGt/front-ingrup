/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractObject3D } from '../abstract-object-3d';
import { AbstractConnector } from './abstract-connector';
import { appliedColor } from '../../util/applied-color';
import { RendererService } from '../../renderer/renderer.service';
var LineConnectorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LineConnectorComponent, _super);
    function LineConnectorComponent(rendererService) {
        var _this = _super.call(this, rendererService) || this;
        _this.rendererService = rendererService;
        _this.materialColor = 0xffff00;
        return _this;
    }
    /**
     * @return {?}
     */
    LineConnectorComponent.prototype.createConnectorObject = /**
     * @return {?}
     */
    function () {
        this.geometry = this.getLineGeometry();
        /** @type {?} */
        var material = new THREE.LineBasicMaterial({
            color: appliedColor(this.materialColor),
            /**
             * NOTE: linewidth=1: Due to limitations of the OpenGL Core Profile
             * with the WebGL renderer on most platforms linewidth will always be 1
             * regardless of the set value.
             */
            linewidth: 1
        });
        /** @type {?} */
        var line = new THREE.Line(this.geometry, material);
        return line;
    };
    /**
     * @return {?}
     */
    LineConnectorComponent.prototype.updateLineGeometry = /**
     * @return {?}
     */
    function () {
        this.geometry.verticesNeedUpdate = true;
        this.rendererService.render();
    };
    LineConnectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-line-connector',
                    providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return LineConnectorComponent; })) }],
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    LineConnectorComponent.ctorParameters = function () { return [
        { type: RendererService }
    ]; };
    LineConnectorComponent.propDecorators = {
        materialColor: [{ type: Input }]
    };
    return LineConnectorComponent;
}(AbstractConnector));
export { LineConnectorComponent };
if (false) {
    /** @type {?} */
    LineConnectorComponent.prototype.materialColor;
    /**
     * @type {?}
     * @private
     */
    LineConnectorComponent.prototype.geometry;
    /**
     * @type {?}
     * @protected
     */
    LineConnectorComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS1jb25uZWN0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXRmdC8iLCJzb3VyY2VzIjpbImxpYi9vYmplY3QvY29ubmVjdG9yL2xpbmUtY29ubmVjdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN2RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDdEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBRWhFO0lBSzRDLGtEQUE2QjtJQVF2RSxnQ0FBc0IsZUFBZ0M7UUFBdEQsWUFDRSxrQkFBTSxlQUFlLENBQUMsU0FDdkI7UUFGcUIscUJBQWUsR0FBZixlQUFlLENBQWlCO1FBTHRELG1CQUFhLEdBQUcsUUFBUSxDQUFDOztJQU96QixDQUFDOzs7O0lBRU0sc0RBQXFCOzs7SUFBNUI7UUFDRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQzs7WUFFakMsUUFBUSxHQUFHLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDO1lBQzNDLEtBQUssRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzs7Ozs7O1lBTXZDLFNBQVMsRUFBRSxDQUFDO1NBQ2IsQ0FBQzs7WUFFSSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO1FBRXBELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7OztJQUVELG1EQUFrQjs7O0lBQWxCO1FBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDeEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQyxDQUFDOztnQkF0Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxVQUFVOzs7NEJBQUMsY0FBTSxPQUFBLHNCQUFzQixFQUF0QixDQUFzQixFQUFDLEVBQUMsQ0FBQztvQkFDL0YsUUFBUSxFQUFFLDJCQUEyQjtpQkFDdEM7Ozs7Z0JBTk8sZUFBZTs7O2dDQVNwQixLQUFLOztJQWlDUiw2QkFBQztDQUFBLEFBeENELENBSzRDLGlCQUFpQixHQW1DNUQ7U0FuQ1ksc0JBQXNCOzs7SUFFakMsK0NBQ3lCOzs7OztJQUd6QiwwQ0FBaUM7Ozs7O0lBRXJCLGlEQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuaW1wb3J0IHtBYnN0cmFjdE9iamVjdDNEfSBmcm9tICcuLi9hYnN0cmFjdC1vYmplY3QtM2QnO1xyXG5pbXBvcnQge0Fic3RyYWN0Q29ubmVjdG9yfSBmcm9tICcuL2Fic3RyYWN0LWNvbm5lY3Rvcic7XHJcbmltcG9ydCB7YXBwbGllZENvbG9yfSBmcm9tICcuLi8uLi91dGlsL2FwcGxpZWQtY29sb3InO1xyXG5pbXBvcnQge1JlbmRlcmVyU2VydmljZX0gZnJvbSAnLi4vLi4vcmVuZGVyZXIvcmVuZGVyZXIuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2F0ZnQtbGluZS1jb25uZWN0b3InLFxyXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBBYnN0cmFjdE9iamVjdDNELCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMaW5lQ29ubmVjdG9yQ29tcG9uZW50KX1dLFxyXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PidcclxufSlcclxuZXhwb3J0IGNsYXNzIExpbmVDb25uZWN0b3JDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdENvbm5lY3RvcjxUSFJFRS5MaW5lPiB7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgbWF0ZXJpYWxDb2xvciA9IDB4ZmZmZjAwO1xyXG5cclxuICAvLyBUT0RPOiBtb3ZlIHRvIGFic3RyYWN0P1xyXG4gIHByaXZhdGUgZ2VvbWV0cnk6IFRIUkVFLkdlb21ldHJ5O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2UpIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlQ29ubmVjdG9yT2JqZWN0KCk6IFRIUkVFLkxpbmUge1xyXG4gICAgdGhpcy5nZW9tZXRyeSA9IHRoaXMuZ2V0TGluZUdlb21ldHJ5KCk7XHJcblxyXG4gICAgY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe1xyXG4gICAgICBjb2xvcjogYXBwbGllZENvbG9yKHRoaXMubWF0ZXJpYWxDb2xvciksXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBOT1RFOiBsaW5ld2lkdGg9MTogRHVlIHRvIGxpbWl0YXRpb25zIG9mIHRoZSBPcGVuR0wgQ29yZSBQcm9maWxlXHJcbiAgICAgICAqIHdpdGggdGhlIFdlYkdMIHJlbmRlcmVyIG9uIG1vc3QgcGxhdGZvcm1zIGxpbmV3aWR0aCB3aWxsIGFsd2F5cyBiZSAxXHJcbiAgICAgICAqIHJlZ2FyZGxlc3Mgb2YgdGhlIHNldCB2YWx1ZS5cclxuICAgICAgICovXHJcbiAgICAgIGxpbmV3aWR0aDogMVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbGluZSA9IG5ldyBUSFJFRS5MaW5lKHRoaXMuZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuXHJcbiAgICByZXR1cm4gbGluZTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUxpbmVHZW9tZXRyeSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcclxuICAgIHRoaXMucmVuZGVyZXJTZXJ2aWNlLnJlbmRlcigpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19