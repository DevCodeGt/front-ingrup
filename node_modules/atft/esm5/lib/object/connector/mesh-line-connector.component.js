/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractObject3D } from '../abstract-object-3d';
import { MeshLine, MeshLineMaterial } from 'three.meshline';
import { AbstractConnector } from './abstract-connector';
import { appliedColor } from '../../util/applied-color';
import { AnimationService } from '../../animation/animation.service';
import { RendererService } from '../../renderer/renderer.service';
var MeshLineConnectorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(MeshLineConnectorComponent, _super);
    function MeshLineConnectorComponent(animationService, rendererService) {
        var _this = _super.call(this, rendererService) || this;
        _this.animationService = animationService;
        _this.rendererService = rendererService;
        _this.materialColor = 0xffff00;
        _this.transparent = true;
        _this.opacity = 0.5;
        _this.lineWidth = 0.5;
        _this.depthWrite = true;
        _this.depthTest = true;
        _this.animated = false;
        _this.animationIncrement = 0.002;
        return _this;
    }
    /**
     * @return {?}
     */
    MeshLineConnectorComponent.prototype.createConnectorObject = /**
     * @return {?}
     */
    function () {
        this.geometry = this.getLineGeometry();
        this.line = new MeshLine();
        this.line.setGeometry(this.geometry);
        this.lineMaterial = (this.animated ?
            new MeshLineMaterial({
                color: appliedColor(this.materialColor),
                transparent: this.transparent,
                opacity: this.opacity,
                lineWidth: this.lineWidth,
                depthWrite: this.depthWrite,
                depthTest: this.depthTest,
                side: THREE.DoubleSide,
                blending: THREE.NormalBlending,
                // TODO: props
                dashArray: 0.05,
                dashOffset: 0.1,
                dashRatio: 0.1
            })
            : new MeshLineMaterial({
                color: appliedColor(this.materialColor),
                transparent: this.transparent,
                opacity: this.opacity,
                lineWidth: this.lineWidth,
                depthWrite: this.depthWrite,
                depthTest: this.depthTest,
                side: THREE.DoubleSide,
                blending: THREE.NormalBlending
            }));
        /** @type {?} */
        var mesh = new THREE.Mesh(this.line.geometry, this.lineMaterial);
        if (this.animated) {
            this.animate = this.animate.bind(this);
            this.animationService.animate.subscribe(this.animate);
        }
        return mesh;
    };
    /**
     * @private
     * @return {?}
     */
    MeshLineConnectorComponent.prototype.animate = /**
     * @private
     * @return {?}
     */
    function () {
        this.lineMaterial.uniforms.dashOffset.value += this.animationIncrement;
    };
    /**
     * @return {?}
     */
    MeshLineConnectorComponent.prototype.updateLineGeometry = /**
     * @return {?}
     */
    function () {
        // https://github.com/spite/THREE.MeshLine/issues/51#issuecomment-379579926
        this.line.setGeometry(this.geometry);
        this.rendererService.render();
    };
    MeshLineConnectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-mesh-line-connector',
                    providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return MeshLineConnectorComponent; })) }],
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    MeshLineConnectorComponent.ctorParameters = function () { return [
        { type: AnimationService },
        { type: RendererService }
    ]; };
    MeshLineConnectorComponent.propDecorators = {
        materialColor: [{ type: Input }],
        transparent: [{ type: Input }],
        opacity: [{ type: Input }],
        lineWidth: [{ type: Input }],
        depthWrite: [{ type: Input }],
        depthTest: [{ type: Input }],
        animated: [{ type: Input }],
        animationIncrement: [{ type: Input }]
    };
    return MeshLineConnectorComponent;
}(AbstractConnector));
export { MeshLineConnectorComponent };
if (false) {
    /** @type {?} */
    MeshLineConnectorComponent.prototype.materialColor;
    /** @type {?} */
    MeshLineConnectorComponent.prototype.transparent;
    /** @type {?} */
    MeshLineConnectorComponent.prototype.opacity;
    /** @type {?} */
    MeshLineConnectorComponent.prototype.lineWidth;
    /** @type {?} */
    MeshLineConnectorComponent.prototype.depthWrite;
    /** @type {?} */
    MeshLineConnectorComponent.prototype.depthTest;
    /** @type {?} */
    MeshLineConnectorComponent.prototype.animated;
    /** @type {?} */
    MeshLineConnectorComponent.prototype.animationIncrement;
    /**
     * @type {?}
     * @private
     */
    MeshLineConnectorComponent.prototype.geometry;
    /**
     * @type {?}
     * @private
     */
    MeshLineConnectorComponent.prototype.line;
    /**
     * @type {?}
     * @private
     */
    MeshLineConnectorComponent.prototype.lineMaterial;
    /**
     * @type {?}
     * @protected
     */
    MeshLineConnectorComponent.prototype.animationService;
    /**
     * @type {?}
     * @protected
     */
    MeshLineConnectorComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,