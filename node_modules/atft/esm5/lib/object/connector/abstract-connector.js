/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractObject3D } from '../abstract-object-3d';
/**
 * @abstract
 * @template T
 */
var AbstractConnector = /** @class */ (function (_super) {
    tslib_1.__extends(AbstractConnector, _super);
    function AbstractConnector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @return {?}
     */
    AbstractConnector.prototype.newObject3DInstance = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var mesh = this.createConnectorObject();
        this.watchObjects();
        return mesh;
    };
    /**
     * @private
     * @return {?}
     */
    AbstractConnector.prototype.watchObjects = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.source.changed.subscribe((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this.updateLineGeometry();
        }));
        this.target.changed.subscribe((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this.updateLineGeometry();
        }));
    };
    /**
     * @protected
     * @return {?}
     */
    AbstractConnector.prototype.getLineGeometry = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var geo = new THREE.Geometry();
        if (!this.source || !this.target) {
            throw new Error('AbstractConnector: source or target inputs are missing!');
        }
        geo.vertices.push(this.source.getObject().position);
        geo.vertices.push(this.target.getObject().position);
        return geo;
    };
    AbstractConnector.propDecorators = {
        source: [{ type: Input }],
        target: [{ type: Input }]
    };
    return AbstractConnector;
}(AbstractObject3D));
export { AbstractConnector };
if (false) {
    /** @type {?} */
    AbstractConnector.prototype.source;
    /** @type {?} */
    AbstractConnector.prototype.target;
    /**
     * Create line mesh
     * @abstract
     * @return {?}
     */
    AbstractConnector.prototype.createConnectorObject = function () { };
    /**
     * If at least one line end (source or target object)  changed, then line geoetry should be updated as well
     * // TODO: Calculate only when source/target positions were changed
     * @abstract
     * @return {?}
     */
    AbstractConnector.prototype.updateLineGeometry = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtY29ubmVjdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXRmdC8iLCJzb3VyY2VzIjpbImxpYi9vYmplY3QvY29ubmVjdG9yL2Fic3RyYWN0LWNvbm5lY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDcEMsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7Ozs7O0FBRXZEO0lBQTBFLDZDQUFtQjtJQUE3Rjs7SUE4Q0EsQ0FBQzs7Ozs7SUF0Q1csK0NBQW1COzs7O0lBQTdCOztZQUNRLElBQUksR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUU7UUFDekMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7SUFFTyx3Q0FBWTs7OztJQUFwQjtRQUFBLGlCQVFDO1FBUEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsSUFBSTtZQUNoQyxLQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUM1QixDQUFDLEVBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFBLElBQUk7WUFDaEMsS0FBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDNUIsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVTLDJDQUFlOzs7O0lBQXpCOztZQUNRLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7UUFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hDLE1BQU0sSUFBSSxLQUFLLENBQUMseURBQXlELENBQUMsQ0FBQztTQUM1RTtRQUNELEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEQsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7O3lCQTlCQSxLQUFLO3lCQUdMLEtBQUs7O0lBeUNSLHdCQUFDO0NBQUEsQUE5Q0QsQ0FBMEUsZ0JBQWdCLEdBOEN6RjtTQTlDcUIsaUJBQWlCOzs7SUFFckMsbUNBQ3lDOztJQUV6QyxtQ0FDeUM7Ozs7OztJQWdDekMsb0VBQW9DOzs7Ozs7O0lBTXBDLGlFQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCB7QWJzdHJhY3RPYmplY3QzRH0gZnJvbSAnLi4vYWJzdHJhY3Qtb2JqZWN0LTNkJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdENvbm5lY3RvcjxUIGV4dGVuZHMgVEhSRUUuT2JqZWN0M0Q+IGV4dGVuZHMgQWJzdHJhY3RPYmplY3QzRDxUPiB7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgc291cmNlOiBBYnN0cmFjdE9iamVjdDNEPFRIUkVFLk9iamVjdDNEPjtcclxuXHJcbiAgQElucHV0KClcclxuICB0YXJnZXQ6IEFic3RyYWN0T2JqZWN0M0Q8VEhSRUUuT2JqZWN0M0Q+O1xyXG5cclxuICBwcm90ZWN0ZWQgbmV3T2JqZWN0M0RJbnN0YW5jZSgpOiBUIHtcclxuICAgIGNvbnN0IG1lc2ggPSB0aGlzLmNyZWF0ZUNvbm5lY3Rvck9iamVjdCgpO1xyXG4gICAgdGhpcy53YXRjaE9iamVjdHMoKTtcclxuICAgIHJldHVybiBtZXNoO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB3YXRjaE9iamVjdHMoKSB7XHJcbiAgICB0aGlzLnNvdXJjZS5jaGFuZ2VkLnN1YnNjcmliZShpdGVtID0+IHtcclxuICAgICAgdGhpcy51cGRhdGVMaW5lR2VvbWV0cnkoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMudGFyZ2V0LmNoYW5nZWQuc3Vic2NyaWJlKGl0ZW0gPT4ge1xyXG4gICAgICB0aGlzLnVwZGF0ZUxpbmVHZW9tZXRyeSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZ2V0TGluZUdlb21ldHJ5KCk6IFRIUkVFLkdlb21ldHJ5IHtcclxuICAgIGNvbnN0IGdlbyA9IG5ldyBUSFJFRS5HZW9tZXRyeSgpO1xyXG4gICAgaWYgKCF0aGlzLnNvdXJjZSB8fCAhdGhpcy50YXJnZXQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBYnN0cmFjdENvbm5lY3Rvcjogc291cmNlIG9yIHRhcmdldCBpbnB1dHMgYXJlIG1pc3NpbmchJyk7XHJcbiAgICB9XHJcbiAgICBnZW8udmVydGljZXMucHVzaCh0aGlzLnNvdXJjZS5nZXRPYmplY3QoKS5wb3NpdGlvbik7XHJcbiAgICBnZW8udmVydGljZXMucHVzaCh0aGlzLnRhcmdldC5nZXRPYmplY3QoKS5wb3NpdGlvbik7XHJcbiAgICByZXR1cm4gZ2VvO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBsaW5lIG1lc2hcclxuICAgKi9cclxuICBhYnN0cmFjdCBjcmVhdGVDb25uZWN0b3JPYmplY3QoKTogVDtcclxuXHJcbiAgLyoqXHJcbiAgICogSWYgYXQgbGVhc3Qgb25lIGxpbmUgZW5kIChzb3VyY2Ugb3IgdGFyZ2V0IG9iamVjdCkgIGNoYW5nZWQsIHRoZW4gbGluZSBnZW9ldHJ5IHNob3VsZCBiZSB1cGRhdGVkIGFzIHdlbGxcclxuICAgKiAvLyBUT0RPOiBDYWxjdWxhdGUgb25seSB3aGVuIHNvdXJjZS90YXJnZXQgcG9zaXRpb25zIHdlcmUgY2hhbmdlZFxyXG4gICAqL1xyXG4gIGFic3RyYWN0IHVwZGF0ZUxpbmVHZW9tZXRyeSgpOiB2b2lkO1xyXG5cclxufVxyXG4iXX0=