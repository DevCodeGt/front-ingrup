/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import { AbstractObject3D } from '../abstract-object-3d';
import { AbstractModelLoader } from './abstract-model-loader';
import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';
import { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';
import { RendererService } from '../../renderer/renderer.service';
/**
 * Component for employing THREE.OBJLoader to load [Wavefront *.obj files][1].
 *
 * [1]: https://en.wikipedia.org/wiki/Wavefront_.obj_file
 */
var ObjLoaderComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ObjLoaderComponent, _super);
    function ObjLoaderComponent(rendererService) {
        var _this = _super.call(this, rendererService) || this;
        _this.rendererService = rendererService;
        _this.loader = new OBJLoader();
        _this.mtlLoader = new MTLLoader();
        return _this;
    }
    Object.defineProperty(ObjLoaderComponent.prototype, "texturePath", {
        /**
         * Path relative to which resources and textures within the loaded obj file are loaded.
         * @deprecated Rather use resourcePath
         */
        set: /**
         * Path relative to which resources and textures within the loaded obj file are loaded.
         * @deprecated Rather use resourcePath
         * @param {?} newTexturePath
         * @return {?}
         */
        function (newTexturePath) {
            this.resourcePath = newTexturePath;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @protected
     * @return {?}
     */
    ObjLoaderComponent.prototype.loadLazyObject = /**
     * @protected
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var preloadingStep;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                // Preloading step for the material
                preloadingStep = new Promise((/**
                 * @param {?} resolve
                 * @param {?} reject
                 * @return {?}
                 */
                function (resolve, reject) {
                    if (_this.material === undefined) {
                        // No preloading necessary
                        resolve();
                    }
                    else {
                        // TODO: If typings of mtlLoader are included in the Three.js NPM
                        // package, remove this 'any' cast.
                        ((/** @type {?} */ (_this.mtlLoader))).setResourcePath(_this.resourcePath);
                        _this.mtlLoader.load(_this.material, (/**
                         * @param {?} materialCreator
                         * @return {?}
                         */
                        function (materialCreator) {
                            materialCreator.preload();
                            _this.loader.setMaterials(materialCreator);
                            resolve();
                        }), undefined, reject);
                    }
                }));
                // Await preloading and load final model
                return [2 /*return*/, preloadingStep.then((/**
                     * @return {?}
                     */
                    function () {
                        return new Promise((/**
                         * @param {?} resolve
                         * @param {?} reject
                         * @return {?}
                         */
                        function (resolve, reject) {
                            _this.loader.load(_this.model, (/**
                             * @param {?} model
                             * @return {?}
                             */
                            function (model) {
                                resolve(model);
                            }), undefined, reject);
                        }));
                    }))];
            });
        });
    };
    ObjLoaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-obj-loader',
                    providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ObjLoaderComponent; })) }],
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    ObjLoaderComponent.ctorParameters = function () { return [
        { type: RendererService }
    ]; };
    ObjLoaderComponent.propDecorators = {
        material: [{ type: Input }],
        texturePath: [{ type: Input }],
        resourcePath: [{ type: Input }]
    };
    return ObjLoaderComponent;
}(AbstractModelLoader));
export { ObjLoaderComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ObjLoaderComponent.prototype.loader;
    /**
     * @type {?}
     * @private
     */
    ObjLoaderComponent.prototype.mtlLoader;
    /** @type {?} */
    ObjLoaderComponent.prototype.material;
    /**
     * Path relative to which resources and textures within the loaded obj file are loaded.
     * @type {?}
     */
    ObjLoaderComponent.prototype.resourcePath;
    /**
     * @type {?}
     * @protected
     */
    ObjLoaderComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqLWxvYWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL29iamVjdC9sb2FkZXIvb2JqLWxvYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFM0QsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDdkQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDNUQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQy9ELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUMvRCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0saUNBQWlDLENBQUM7Ozs7OztBQU9oRTtJQUt3Qyw4Q0FBbUI7SUF1QnpELDRCQUNZLGVBQWdDO1FBRDVDLFlBR0Usa0JBQU0sZUFBZSxDQUFDLFNBQ3ZCO1FBSFcscUJBQWUsR0FBZixlQUFlLENBQWlCO1FBdEJwQyxZQUFNLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUN6QixlQUFTLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQzs7SUF3QnBDLENBQUM7SUFmRCxzQkFDVywyQ0FBVztRQUx0Qjs7O1dBR0c7Ozs7Ozs7UUFDSCxVQUN1QixjQUFzQjtZQUMzQyxJQUFJLENBQUMsWUFBWSxHQUFHLGNBQWMsQ0FBQztRQUNyQyxDQUFDOzs7T0FBQTs7Ozs7SUFjZSwyQ0FBYzs7OztJQUE5Qjs7Ozs7O2dCQUVRLGNBQWMsR0FBRyxJQUFJLE9BQU87Ozs7O2dCQUFPLFVBQUMsT0FBTyxFQUFFLE1BQU07b0JBQ3ZELElBQUksS0FBSSxDQUFDLFFBQVEsS0FBSyxTQUFTLEVBQUU7d0JBQy9CLDBCQUEwQjt3QkFDMUIsT0FBTyxFQUFFLENBQUM7cUJBQ1g7eUJBQU07d0JBQ0wsaUVBQWlFO3dCQUNqRSxtQ0FBbUM7d0JBQ25DLENBQUMsbUJBQUEsS0FBSSxDQUFDLFNBQVMsRUFBTyxDQUFDLENBQUMsZUFBZSxDQUFDLEtBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzt3QkFFM0QsS0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFFBQVE7Ozs7d0JBQUUsVUFBQSxlQUFlOzRCQUNoRCxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7NEJBQzFCLEtBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDOzRCQUMxQyxPQUFPLEVBQUUsQ0FBQzt3QkFDWixDQUFDLEdBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO3FCQUN2QjtnQkFDSCxDQUFDLEVBQUM7Z0JBRUYsd0NBQXdDO2dCQUN4QyxzQkFBTyxjQUFjLENBQUMsSUFBSTs7O29CQUFDO3dCQUN6QixPQUFPLElBQUksT0FBTzs7Ozs7d0JBQWlCLFVBQUMsT0FBTyxFQUFFLE1BQU07NEJBQ2pELEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxLQUFLOzs7OzRCQUFFLFVBQUEsS0FBSztnQ0FDaEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDOzRCQUNqQixDQUFDLEdBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO3dCQUN4QixDQUFDLEVBQUMsQ0FBQztvQkFDTCxDQUFDLEVBQUMsRUFBQzs7O0tBQ0o7O2dCQTdERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLFVBQVU7Ozs0QkFBQyxjQUFNLE9BQUEsa0JBQWtCLEVBQWxCLENBQWtCLEVBQUMsRUFBRSxDQUFDO29CQUM3RixRQUFRLEVBQUUsMkJBQTJCO2lCQUN0Qzs7OztnQkFYTyxlQUFlOzs7MkJBaUJwQixLQUFLOzhCQU9MLEtBQUs7K0JBUUwsS0FBSzs7SUFxQ1IseUJBQUM7Q0FBQSxBQTlERCxDQUt3QyxtQkFBbUIsR0F5RDFEO1NBekRZLGtCQUFrQjs7Ozs7O0lBRTdCLG9DQUFpQzs7Ozs7SUFDakMsdUNBQW9DOztJQUVwQyxzQ0FDaUI7Ozs7O0lBY2pCLDBDQUNxQjs7Ozs7SUFHbkIsNkNBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5pbXBvcnQge0Fic3RyYWN0T2JqZWN0M0R9IGZyb20gJy4uL2Fic3RyYWN0LW9iamVjdC0zZCc7XHJcbmltcG9ydCB7QWJzdHJhY3RNb2RlbExvYWRlcn0gZnJvbSAnLi9hYnN0cmFjdC1tb2RlbC1sb2FkZXInO1xyXG5pbXBvcnQge09CSkxvYWRlcn0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL2xvYWRlcnMvT0JKTG9hZGVyJztcclxuaW1wb3J0IHtNVExMb2FkZXJ9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9sb2FkZXJzL01UTExvYWRlcic7XHJcbmltcG9ydCB7UmVuZGVyZXJTZXJ2aWNlfSBmcm9tICcuLi8uLi9yZW5kZXJlci9yZW5kZXJlci5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBDb21wb25lbnQgZm9yIGVtcGxveWluZyBUSFJFRS5PQkpMb2FkZXIgdG8gbG9hZCBbV2F2ZWZyb250ICoub2JqIGZpbGVzXVsxXS5cclxuICpcclxuICogWzFdOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9XYXZlZnJvbnRfLm9ial9maWxlXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2F0ZnQtb2JqLWxvYWRlcicsXHJcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBBYnN0cmFjdE9iamVjdDNELCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBPYmpMb2FkZXJDb21wb25lbnQpIH1dLFxyXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PidcclxufSlcclxuZXhwb3J0IGNsYXNzIE9iakxvYWRlckNvbXBvbmVudCBleHRlbmRzIEFic3RyYWN0TW9kZWxMb2FkZXIge1xyXG5cclxuICBwcml2YXRlIGxvYWRlciA9IG5ldyBPQkpMb2FkZXIoKTtcclxuICBwcml2YXRlIG10bExvYWRlciA9IG5ldyBNVExMb2FkZXIoKTtcclxuXHJcbiAgQElucHV0KClcclxuICBtYXRlcmlhbDogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBQYXRoIHJlbGF0aXZlIHRvIHdoaWNoIHJlc291cmNlcyBhbmQgdGV4dHVyZXMgd2l0aGluIHRoZSBsb2FkZWQgb2JqIGZpbGUgYXJlIGxvYWRlZC5cclxuICAgKiBAZGVwcmVjYXRlZCBSYXRoZXIgdXNlIHJlc291cmNlUGF0aFxyXG4gICAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHNldCB0ZXh0dXJlUGF0aChuZXdUZXh0dXJlUGF0aDogc3RyaW5nKSB7XHJcbiAgICB0aGlzLnJlc291cmNlUGF0aCA9IG5ld1RleHR1cmVQYXRoO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUGF0aCByZWxhdGl2ZSB0byB3aGljaCByZXNvdXJjZXMgYW5kIHRleHR1cmVzIHdpdGhpbiB0aGUgbG9hZGVkIG9iaiBmaWxlIGFyZSBsb2FkZWQuXHJcbiAgICovXHJcbiAgQElucHV0KClcclxuICByZXNvdXJjZVBhdGg6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYXN5bmMgbG9hZExhenlPYmplY3QoKSB7XHJcbiAgICAvLyBQcmVsb2FkaW5nIHN0ZXAgZm9yIHRoZSBtYXRlcmlhbFxyXG4gICAgY29uc3QgcHJlbG9hZGluZ1N0ZXAgPSBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLm1hdGVyaWFsID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAvLyBObyBwcmVsb2FkaW5nIG5lY2Vzc2FyeVxyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBUT0RPOiBJZiB0eXBpbmdzIG9mIG10bExvYWRlciBhcmUgaW5jbHVkZWQgaW4gdGhlIFRocmVlLmpzIE5QTVxyXG4gICAgICAgIC8vIHBhY2thZ2UsIHJlbW92ZSB0aGlzICdhbnknIGNhc3QuXHJcbiAgICAgICAgKHRoaXMubXRsTG9hZGVyIGFzIGFueSkuc2V0UmVzb3VyY2VQYXRoKHRoaXMucmVzb3VyY2VQYXRoKTtcclxuXHJcbiAgICAgICAgdGhpcy5tdGxMb2FkZXIubG9hZCh0aGlzLm1hdGVyaWFsLCBtYXRlcmlhbENyZWF0b3IgPT4ge1xyXG4gICAgICAgICAgbWF0ZXJpYWxDcmVhdG9yLnByZWxvYWQoKTtcclxuICAgICAgICAgIHRoaXMubG9hZGVyLnNldE1hdGVyaWFscyhtYXRlcmlhbENyZWF0b3IpO1xyXG4gICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0sIHVuZGVmaW5lZCwgcmVqZWN0KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQXdhaXQgcHJlbG9hZGluZyBhbmQgbG9hZCBmaW5hbCBtb2RlbFxyXG4gICAgcmV0dXJuIHByZWxvYWRpbmdTdGVwLnRoZW4oKCkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2U8VEhSRUUuT2JqZWN0M0Q+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRlci5sb2FkKHRoaXMubW9kZWwsIG1vZGVsID0+IHtcclxuICAgICAgICAgIHJlc29sdmUobW9kZWwpO1xyXG4gICAgICAgIH0sIHVuZGVmaW5lZCwgcmVqZWN0KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19