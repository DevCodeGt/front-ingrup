/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef } from '@angular/core';
import { AbstractObject3D } from '../abstract-object-3d';
import { AbstractModelLoader } from './abstract-model-loader';
import * as THREE from 'three';
import { RendererService } from '../../renderer/renderer.service';
var ObjectLoaderComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ObjectLoaderComponent, _super);
    function ObjectLoaderComponent(rendererService) {
        var _this = _super.call(this, rendererService) || this;
        _this.rendererService = rendererService;
        _this.loader = new THREE.ObjectLoader();
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    ObjectLoaderComponent.prototype.loadLazyObject = /**
     * @protected
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                // console.log('ObjectLoaderComponent.loadLazyObject');
                return [2 /*return*/, new Promise((/**
                     * @param {?} resolve
                     * @param {?} reject
                     * @return {?}
                     */
                    function (resolve, reject) {
                        _this.loader.load(_this.model, (/**
                         * @param {?} model
                         * @return {?}
                         */
                        function (model) {
                            // BUG #95: it seems that some textures loaded after last render (and model has black texture instead)
                            resolve(model);
                        }), undefined, reject);
                    }))];
            });
        });
    };
    ObjectLoaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-object-loader',
                    providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ObjectLoaderComponent; })) }],
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    ObjectLoaderComponent.ctorParameters = function () { return [
        { type: RendererService }
    ]; };
    return ObjectLoaderComponent;
}(AbstractModelLoader));
export { ObjectLoaderComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ObjectLoaderComponent.prototype.loader;
    /**
     * @type {?}
     * @protected
     */
    ObjectLoaderComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LWxvYWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL29iamVjdC9sb2FkZXIvb2JqZWN0LWxvYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUU1RCxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFFaEU7SUFLMkMsaURBQW1CO0lBRzVELCtCQUNZLGVBQWdDO1FBRDVDLFlBR0Usa0JBQU0sZUFBZSxDQUFDLFNBQ3ZCO1FBSFcscUJBQWUsR0FBZixlQUFlLENBQWlCO1FBSHBDLFlBQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7SUFNMUMsQ0FBQzs7Ozs7SUFFZSw4Q0FBYzs7OztJQUE5Qjs7OztnQkFDRSx1REFBdUQ7Z0JBQ3ZELHNCQUFPLElBQUksT0FBTzs7Ozs7b0JBQWlCLFVBQUMsT0FBTyxFQUFFLE1BQU07d0JBQ2pELEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxLQUFLOzs7O3dCQUFFLFVBQUEsS0FBSzs0QkFDOUIsc0dBQXNHOzRCQUN0RyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQ2pCLENBQUMsR0FDRCxTQUFTLEVBQ1QsTUFBTSxDQUNQLENBQUM7b0JBQ0osQ0FBQyxFQUFDLEVBQUM7OztLQUNKOztnQkF6QkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxVQUFVOzs7NEJBQUMsY0FBTSxPQUFBLHFCQUFxQixFQUFyQixDQUFxQixFQUFDLEVBQUUsQ0FBQztvQkFDaEcsUUFBUSxFQUFFLDJCQUEyQjtpQkFDdEM7Ozs7Z0JBTk8sZUFBZTs7SUE2QnZCLDRCQUFDO0NBQUEsQUEzQkQsQ0FLMkMsbUJBQW1CLEdBc0I3RDtTQXRCWSxxQkFBcUI7Ozs7OztJQUNoQyx1Q0FBMEM7Ozs7O0lBR3hDLGdEQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtBYnN0cmFjdE9iamVjdDNEfSBmcm9tICcuLi9hYnN0cmFjdC1vYmplY3QtM2QnO1xyXG5pbXBvcnQge0Fic3RyYWN0TW9kZWxMb2FkZXJ9IGZyb20gJy4vYWJzdHJhY3QtbW9kZWwtbG9hZGVyJztcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuaW1wb3J0IHtSZW5kZXJlclNlcnZpY2V9IGZyb20gJy4uLy4uL3JlbmRlcmVyL3JlbmRlcmVyLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhdGZ0LW9iamVjdC1sb2FkZXInLFxyXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogQWJzdHJhY3RPYmplY3QzRCwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gT2JqZWN0TG9hZGVyQ29tcG9uZW50KSB9XSxcclxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBPYmplY3RMb2FkZXJDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdE1vZGVsTG9hZGVyIHtcclxuICBwcml2YXRlIGxvYWRlciA9IG5ldyBUSFJFRS5PYmplY3RMb2FkZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYXN5bmMgbG9hZExhenlPYmplY3QoKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnT2JqZWN0TG9hZGVyQ29tcG9uZW50LmxvYWRMYXp5T2JqZWN0Jyk7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8VEhSRUUuT2JqZWN0M0Q+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdGhpcy5sb2FkZXIubG9hZCh0aGlzLm1vZGVsLCBtb2RlbCA9PiB7XHJcbiAgICAgICAgICAvLyBCVUcgIzk1OiBpdCBzZWVtcyB0aGF0IHNvbWUgdGV4dHVyZXMgbG9hZGVkIGFmdGVyIGxhc3QgcmVuZGVyIChhbmQgbW9kZWwgaGFzIGJsYWNrIHRleHR1cmUgaW5zdGVhZClcclxuICAgICAgICAgIHJlc29sdmUobW9kZWwpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgIHJlamVjdFxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=