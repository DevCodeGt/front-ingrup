/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { AbstractObject3D } from '../abstract-object-3d';
import { appliedMaterial } from '../../util';
/**
 * @abstract
 */
var AbstractMesh = /** @class */ (function (_super) {
    tslib_1.__extends(AbstractMesh, _super);
    function AbstractMesh() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.materialColor = 0x5DADE2;
        _this.castShadow = true;
        _this.receiveShadow = true;
        _this.depthWrite = true;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    AbstractMesh.prototype.getMaterial = /**
     * @protected
     * @return {?}
     */
    function () {
        return appliedMaterial(this.materialColor, this.material, this.depthWrite);
    };
    /**
     * @protected
     * @param {?} mesh
     * @return {?}
     */
    AbstractMesh.prototype.applyShadowProps = /**
     * @protected
     * @param {?} mesh
     * @return {?}
     */
    function (mesh) {
        mesh.castShadow = this.castShadow;
        mesh.receiveShadow = this.receiveShadow;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AbstractMesh.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        if (!this.getObject()) {
            return;
        }
        /** @type {?} */
        var mustRerender = false;
        if (['material', 'materialColor', 'depthWrite'].some((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) { return propName in changes; }))) {
            this.applyMaterial();
            mustRerender = true;
        }
        if (mustRerender) {
            this.rendererService.render();
        }
    };
    /**
     * @return {?}
     */
    AbstractMesh.prototype.applyMaterial = /**
     * @return {?}
     */
    function () {
        this.getObject().material = this.getMaterial();
    };
    AbstractMesh.propDecorators = {
        material: [{ type: Input }],
        materialColor: [{ type: Input }],
        castShadow: [{ type: Input }],
        receiveShadow: [{ type: Input }],
        depthWrite: [{ type: Input }]
    };
    return AbstractMesh;
}(AbstractObject3D));
export { AbstractMesh };
if (false) {
    /** @type {?} */
    AbstractMesh.prototype.material;
    /** @type {?} */
    AbstractMesh.prototype.materialColor;
    /** @type {?} */
    AbstractMesh.prototype.castShadow;
    /** @type {?} */
    AbstractMesh.prototype.receiveShadow;
    /** @type {?} */
    AbstractMesh.prototype.depthWrite;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtbWVzaC0zZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2F0ZnQvIiwic291cmNlcyI6WyJsaWIvb2JqZWN0L21lc2gvYWJzdHJhY3QtbWVzaC0zZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxLQUFLLEVBQTJCLE1BQU0sZUFBZSxDQUFDO0FBRTlELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxZQUFZLENBQUM7Ozs7QUFFM0M7SUFBMkMsd0NBQTRCO0lBQXZFO1FBQUEscUVBZ0RDO1FBMUNDLG1CQUFhLEdBQUcsUUFBUSxDQUFDO1FBR3pCLGdCQUFVLEdBQUcsSUFBSSxDQUFDO1FBR2xCLG1CQUFhLEdBQUcsSUFBSSxDQUFDO1FBR3JCLGdCQUFVLEdBQUcsSUFBSSxDQUFDOztJQWlDcEIsQ0FBQzs7Ozs7SUEvQlcsa0NBQVc7Ozs7SUFBckI7UUFDRSxPQUFPLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdFLENBQUM7Ozs7OztJQUVTLHVDQUFnQjs7Ozs7SUFBMUIsVUFBMkIsSUFBZ0I7UUFDekMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUMxQyxDQUFDOzs7OztJQUVNLGtDQUFXOzs7O0lBQWxCLFVBQW1CLE9BQXNCO1FBQ3ZDLGlCQUFNLFdBQVcsWUFBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ3JCLE9BQU87U0FDUjs7WUFFRyxZQUFZLEdBQUcsS0FBSztRQUN4QixJQUFJLENBQUMsVUFBVSxFQUFFLGVBQWUsRUFBRSxZQUFZLENBQUMsQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxRQUFRLElBQUksT0FBTyxFQUFuQixDQUFtQixFQUFDLEVBQUU7WUFDckYsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3JCLFlBQVksR0FBRyxJQUFJLENBQUM7U0FDckI7UUFFRCxJQUFJLFlBQVksRUFBRTtZQUNoQixJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQy9CO0lBQ0gsQ0FBQzs7OztJQUVNLG9DQUFhOzs7SUFBcEI7UUFDRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNqRCxDQUFDOzsyQkEzQ0EsS0FBSztnQ0FHTCxLQUFLOzZCQUdMLEtBQUs7Z0NBR0wsS0FBSzs2QkFHTCxLQUFLOztJQWtDUixtQkFBQztDQUFBLEFBaERELENBQTJDLGdCQUFnQixHQWdEMUQ7U0FoRHFCLFlBQVk7OztJQUVoQyxnQ0FDaUI7O0lBRWpCLHFDQUN5Qjs7SUFFekIsa0NBQ2tCOztJQUVsQixxQ0FDcUI7O0lBRXJCLGtDQUNrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlc30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuaW1wb3J0IHtBYnN0cmFjdE9iamVjdDNEfSBmcm9tICcuLi9hYnN0cmFjdC1vYmplY3QtM2QnO1xyXG5pbXBvcnQge2FwcGxpZWRNYXRlcmlhbH0gZnJvbSAnLi4vLi4vdXRpbCc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RNZXNoIGV4dGVuZHMgQWJzdHJhY3RPYmplY3QzRDxUSFJFRS5NZXNoPiBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgbWF0ZXJpYWw6IHN0cmluZztcclxuXHJcbiAgQElucHV0KClcclxuICBtYXRlcmlhbENvbG9yID0gMHg1REFERTI7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgY2FzdFNoYWRvdyA9IHRydWU7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcmVjZWl2ZVNoYWRvdyA9IHRydWU7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgZGVwdGhXcml0ZSA9IHRydWU7XHJcblxyXG4gIHByb3RlY3RlZCBnZXRNYXRlcmlhbCgpOiBUSFJFRS5NYXRlcmlhbCB7XHJcbiAgICByZXR1cm4gYXBwbGllZE1hdGVyaWFsKHRoaXMubWF0ZXJpYWxDb2xvciwgdGhpcy5tYXRlcmlhbCwgdGhpcy5kZXB0aFdyaXRlKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBhcHBseVNoYWRvd1Byb3BzKG1lc2g6IFRIUkVFLk1lc2gpIHtcclxuICAgIG1lc2guY2FzdFNoYWRvdyA9IHRoaXMuY2FzdFNoYWRvdztcclxuICAgIG1lc2gucmVjZWl2ZVNoYWRvdyA9IHRoaXMucmVjZWl2ZVNoYWRvdztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBzdXBlci5uZ09uQ2hhbmdlcyhjaGFuZ2VzKTtcclxuICAgIGlmICghdGhpcy5nZXRPYmplY3QoKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG11c3RSZXJlbmRlciA9IGZhbHNlO1xyXG4gICAgaWYgKFsnbWF0ZXJpYWwnLCAnbWF0ZXJpYWxDb2xvcicsICdkZXB0aFdyaXRlJ10uc29tZShwcm9wTmFtZSA9PiBwcm9wTmFtZSBpbiBjaGFuZ2VzKSkge1xyXG4gICAgICB0aGlzLmFwcGx5TWF0ZXJpYWwoKTtcclxuICAgICAgbXVzdFJlcmVuZGVyID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobXVzdFJlcmVuZGVyKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyZXJTZXJ2aWNlLnJlbmRlcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFwcGx5TWF0ZXJpYWwoKSB7XHJcbiAgICB0aGlzLmdldE9iamVjdCgpLm1hdGVyaWFsID0gdGhpcy5nZXRNYXRlcmlhbCgpO1xyXG4gIH1cclxuXHJcblxyXG59XHJcbiJdfQ==