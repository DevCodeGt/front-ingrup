/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractMesh } from './abstract-mesh-3d';
import { AbstractObject3D } from '../abstract-object-3d';
import { RendererService } from '../../renderer/renderer.service';
var TorusMeshComponent = /** @class */ (function (_super) {
    tslib_1.__extends(TorusMeshComponent, _super);
    function TorusMeshComponent(rendererService) {
        var _this = _super.call(this, rendererService) || this;
        _this.rendererService = rendererService;
        /**
         * Radius of the torus, from the center of the torus to the center of the tube
         */
        _this.radius = 0.4;
        _this.radialSegments = 8;
        _this.tubularSegments = 6;
        _this.arc = Math.PI * 2;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    TorusMeshComponent.prototype.newObject3DInstance = /**
     * @protected
     * @return {?}
     */
    function () {
        this.radius *= 1;
        this.tube *= 1;
        this.radialSegments *= 1;
        this.tubularSegments *= 1;
        /** @type {?} */
        var geometry = new THREE.TorusGeometry(this.radius, this.tube, this.radialSegments, this.tubularSegments);
        /** @type {?} */
        var material = this.getMaterial();
        /** @type {?} */
        var mesh = new THREE.Mesh(geometry, material);
        this.applyShadowProps(mesh);
        return mesh;
    };
    TorusMeshComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-torus-mesh',
                    providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return TorusMeshComponent; })) }],
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    TorusMeshComponent.ctorParameters = function () { return [
        { type: RendererService }
    ]; };
    TorusMeshComponent.propDecorators = {
        radius: [{ type: Input }],
        tube: [{ type: Input }],
        radialSegments: [{ type: Input }],
        tubularSegments: [{ type: Input }],
        arc: [{ type: Input }]
    };
    return TorusMeshComponent;
}(AbstractMesh));
export { TorusMeshComponent };
if (false) {
    /**
     * Radius of the torus, from the center of the torus to the center of the tube
     * @type {?}
     */
    TorusMeshComponent.prototype.radius;
    /**
     * Radius of the tube.
     * @type {?}
     */
    TorusMeshComponent.prototype.tube;
    /** @type {?} */
    TorusMeshComponent.prototype.radialSegments;
    /** @type {?} */
    TorusMeshComponent.prototype.tubularSegments;
    /** @type {?} */
    TorusMeshComponent.prototype.arc;
    /**
     * @type {?}
     * @protected
     */
    TorusMeshComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9ydXMtbWVzaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL29iamVjdC9tZXNoL3RvcnVzLW1lc2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFFaEU7SUFLd0MsOENBQVk7SUFzQmxELDRCQUNZLGVBQWdDO1FBRDVDLFlBR0Usa0JBQU0sZUFBZSxDQUFDLFNBQ3ZCO1FBSFcscUJBQWUsR0FBZixlQUFlLENBQWlCOzs7O1FBbEJuQyxZQUFNLEdBQUcsR0FBRyxDQUFDO1FBU3RCLG9CQUFjLEdBQUcsQ0FBQyxDQUFDO1FBR25CLHFCQUFlLEdBQUcsQ0FBQyxDQUFDO1FBR3BCLFNBQUcsR0FBVyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQzs7SUFNMUIsQ0FBQzs7Ozs7SUFFUyxnREFBbUI7Ozs7SUFBN0I7UUFDRSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxDQUFDOztZQUVwQixRQUFRLEdBQUcsSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksRUFDN0QsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDOztZQUN0QyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRTs7WUFDN0IsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO1FBQy9DLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7O2dCQTdDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLFVBQVU7Ozs0QkFBQyxjQUFNLE9BQUEsa0JBQWtCLEVBQWxCLENBQWtCLEVBQUMsRUFBRSxDQUFDO29CQUM3RixRQUFRLEVBQUUsMkJBQTJCO2lCQUN0Qzs7OztnQkFOTyxlQUFlOzs7eUJBWXBCLEtBQUs7dUJBS0wsS0FBSztpQ0FHTCxLQUFLO2tDQUdMLEtBQUs7c0JBR0wsS0FBSzs7SUF1QlIseUJBQUM7Q0FBQSxBQS9DRCxDQUt3QyxZQUFZLEdBMENuRDtTQTFDWSxrQkFBa0I7Ozs7OztJQUs3QixvQ0FBc0I7Ozs7O0lBS3RCLGtDQUNhOztJQUViLDRDQUNtQjs7SUFFbkIsNkNBQ29COztJQUVwQixpQ0FDMEI7Ozs7O0lBR3hCLDZDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuaW1wb3J0IHtBYnN0cmFjdE1lc2h9IGZyb20gJy4vYWJzdHJhY3QtbWVzaC0zZCc7XHJcbmltcG9ydCB7QWJzdHJhY3RPYmplY3QzRH0gZnJvbSAnLi4vYWJzdHJhY3Qtb2JqZWN0LTNkJztcclxuaW1wb3J0IHtSZW5kZXJlclNlcnZpY2V9IGZyb20gJy4uLy4uL3JlbmRlcmVyL3JlbmRlcmVyLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhdGZ0LXRvcnVzLW1lc2gnLFxyXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogQWJzdHJhY3RPYmplY3QzRCwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVG9ydXNNZXNoQ29tcG9uZW50KSB9XSxcclxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUb3J1c01lc2hDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdE1lc2gge1xyXG5cclxuICAvKipcclxuICAgKiBSYWRpdXMgb2YgdGhlIHRvcnVzLCBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIHRvcnVzIHRvIHRoZSBjZW50ZXIgb2YgdGhlIHR1YmVcclxuICAgKi9cclxuICBASW5wdXQoKSByYWRpdXMgPSAwLjQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIFJhZGl1cyBvZiB0aGUgdHViZS5cclxuICAgKi9cclxuICBASW5wdXQoKVxyXG4gIHR1YmU6IG51bWJlcjtcclxuXHJcbiAgQElucHV0KClcclxuICByYWRpYWxTZWdtZW50cyA9IDg7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgdHVidWxhclNlZ21lbnRzID0gNjtcclxuXHJcbiAgQElucHV0KClcclxuICBhcmM6IG51bWJlciA9IE1hdGguUEkgKiAyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCByZW5kZXJlclNlcnZpY2U6IFJlbmRlcmVyU2VydmljZVxyXG4gICkge1xyXG4gICAgc3VwZXIocmVuZGVyZXJTZXJ2aWNlKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBuZXdPYmplY3QzREluc3RhbmNlKCk6IFRIUkVFLk1lc2gge1xyXG4gICAgdGhpcy5yYWRpdXMgKj0gMTtcclxuICAgIHRoaXMudHViZSAqPSAxO1xyXG4gICAgdGhpcy5yYWRpYWxTZWdtZW50cyAqPSAxO1xyXG4gICAgdGhpcy50dWJ1bGFyU2VnbWVudHMgKj0gMTtcclxuXHJcbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5Ub3J1c0dlb21ldHJ5KHRoaXMucmFkaXVzLCB0aGlzLnR1YmUsXHJcbiAgICAgIHRoaXMucmFkaWFsU2VnbWVudHMsIHRoaXMudHVidWxhclNlZ21lbnRzKTtcclxuICAgIGNvbnN0IG1hdGVyaWFsID0gdGhpcy5nZXRNYXRlcmlhbCgpO1xyXG4gICAgY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcbiAgICB0aGlzLmFwcGx5U2hhZG93UHJvcHMobWVzaCk7XHJcbiAgICByZXR1cm4gbWVzaDtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==