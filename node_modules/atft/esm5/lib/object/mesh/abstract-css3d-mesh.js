/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractMesh } from './abstract-mesh-3d';
import { calculateSize } from '../../util';
/**
 * @abstract
 */
var AbstractCss3dMesh = /** @class */ (function (_super) {
    tslib_1.__extends(AbstractCss3dMesh, _super);
    function AbstractCss3dMesh() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.width = 1.0;
        _this.height = 1.0;
        // 1280 / 720 = 1.777777778
        _this.resolutionX = 1280;
        _this.resolutionY = 720;
        _this.widthSegments = 1;
        _this.heightSegments = 1;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    AbstractCss3dMesh.prototype.newObject3DInstance = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var geometry = new THREE.PlaneBufferGeometry(this.width, this.height, this.widthSegments, this.heightSegments);
        /** @type {?} */
        var material = this.getMaterial();
        /** @type {?} */
        var mesh = new THREE.Mesh(geometry, material);
        this.applyShadowProps(mesh);
        // Create and scale css3d object:
        /** @type {?} */
        var meshSize = calculateSize(mesh);
        /** @type {?} */
        var css3dObject = this.createCss3dObject();
        this.scaleCss3d(css3dObject, meshSize);
        // append to mesh:
        mesh.add(css3dObject);
        return mesh;
    };
    /**
     * @protected
     * @param {?} group
     * @param {?} max
     * @return {?}
     */
    AbstractCss3dMesh.prototype.scaleCss3d = /**
     * @protected
     * @param {?} group
     * @param {?} max
     * @return {?}
     */
    function (group, max) {
        /** @type {?} */
        var box = new THREE.Vector3(this.resolutionX, this.resolutionY, 0);
        /** @type {?} */
        var scaleX = max.x / box.x;
        /** @type {?} */
        var scaleY = max.y / box.y;
        /** @type {?} */
        var scaleZ = max.z / box.z;
        group.scale.set((scaleX < 1 ? scaleX : 1), (scaleY < 1 ? scaleY : 1), (scaleZ < 1 ? scaleZ : 1));
    };
    /**
     * @protected
     * @return {?}
     */
    AbstractCss3dMesh.prototype.getMaterial = /**
     * @protected
     * @return {?}
     */
    function () {
        // TODO: Renderer clear color
        /** @type {?} */
        var transparentMaterial = new THREE.MeshBasicMaterial({
            color: 0x000000,
            opacity: 0,
            side: THREE.DoubleSide
        });
        return transparentMaterial;
    };
    AbstractCss3dMesh.propDecorators = {
        width: [{ type: Input }],
        height: [{ type: Input }],
        resolutionX: [{ type: Input }],
        resolutionY: [{ type: Input }]
    };
    return AbstractCss3dMesh;
}(AbstractMesh));
export { AbstractCss3dMesh };
if (false) {
    /** @type {?} */
    AbstractCss3dMesh.prototype.width;
    /** @type {?} */
    AbstractCss3dMesh.prototype.height;
    /** @type {?} */
    AbstractCss3dMesh.prototype.resolutionX;
    /** @type {?} */
    AbstractCss3dMesh.prototype.resolutionY;
    /**
     * @type {?}
     * @private
     */
    AbstractCss3dMesh.prototype.widthSegments;
    /**
     * @type {?}
     * @private
     */
    AbstractCss3dMesh.prototype.heightSegments;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    AbstractCss3dMesh.prototype.createCss3dObject = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtY3NzM2QtbWVzaC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2F0ZnQvIiwic291cmNlcyI6WyJsaWIvb2JqZWN0L21lc2gvYWJzdHJhY3QtY3NzM2QtbWVzaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDcEMsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxZQUFZLENBQUM7Ozs7QUFHekM7SUFBZ0QsNkNBQVk7SUFBNUQ7UUFBQSxxRUF3REM7UUF0RFUsV0FBSyxHQUFHLEdBQUcsQ0FBQztRQUNaLFlBQU0sR0FBRyxHQUFHLENBQUM7O1FBR2IsaUJBQVcsR0FBRyxJQUFJLENBQUM7UUFDbkIsaUJBQVcsR0FBRyxHQUFHLENBQUM7UUFFbkIsbUJBQWEsR0FBRyxDQUFDLENBQUM7UUFDbEIsb0JBQWMsR0FBRyxDQUFDLENBQUM7O0lBOEM3QixDQUFDOzs7OztJQTVDVywrQ0FBbUI7Ozs7SUFBN0I7O1lBQ1EsUUFBUSxHQUFHLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUM7O1lBQzFHLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFOztZQUM3QixJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7UUFDL0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDOzs7WUFHdEIsUUFBUSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUM7O1lBQzlCLFdBQVcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7UUFDNUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFdkMsa0JBQWtCO1FBQ2xCLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7Ozs7O0lBR1Msc0NBQVU7Ozs7OztJQUFwQixVQUFxQixLQUFrQixFQUFFLEdBQWtCOztZQUNuRCxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7O1lBRTlELE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDOztZQUN0QixNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQzs7WUFDdEIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFFNUIsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQ2IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN6QixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3pCLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDMUIsQ0FBQztJQUVKLENBQUM7Ozs7O0lBRVMsdUNBQVc7Ozs7SUFBckI7OztZQUVRLG1CQUFtQixHQUFHLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDO1lBQ3RELEtBQUssRUFBRSxRQUFRO1lBQ2YsT0FBTyxFQUFFLENBQUM7WUFDVixJQUFJLEVBQUUsS0FBSyxDQUFDLFVBQVU7U0FDdkIsQ0FBQztRQUNGLE9BQU8sbUJBQW1CLENBQUM7SUFDN0IsQ0FBQzs7d0JBbERBLEtBQUs7eUJBQ0wsS0FBSzs4QkFHTCxLQUFLOzhCQUNMLEtBQUs7O0lBaURSLHdCQUFDO0NBQUEsQUF4REQsQ0FBZ0QsWUFBWSxHQXdEM0Q7U0F4RHFCLGlCQUFpQjs7O0lBRXJDLGtDQUFxQjs7SUFDckIsbUNBQXNCOztJQUd0Qix3Q0FBNEI7O0lBQzVCLHdDQUEyQjs7Ozs7SUFFM0IsMENBQTBCOzs7OztJQUMxQiwyQ0FBMkI7Ozs7OztJQTRDM0IsZ0VBQW9EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuaW1wb3J0IHtBYnN0cmFjdE1lc2h9IGZyb20gJy4vYWJzdHJhY3QtbWVzaC0zZCc7XHJcbmltcG9ydCB7Y2FsY3VsYXRlU2l6ZX0gZnJvbSAnLi4vLi4vdXRpbCc7XHJcbmltcG9ydCB7Q1NTM0RPYmplY3R9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9yZW5kZXJlcnMvQ1NTM0RSZW5kZXJlcic7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RDc3MzZE1lc2ggZXh0ZW5kcyBBYnN0cmFjdE1lc2gge1xyXG5cclxuICBASW5wdXQoKSB3aWR0aCA9IDEuMDtcclxuICBASW5wdXQoKSBoZWlnaHQgPSAxLjA7XHJcblxyXG4gIC8vIDEyODAgLyA3MjAgPSAxLjc3Nzc3Nzc3OFxyXG4gIEBJbnB1dCgpIHJlc29sdXRpb25YID0gMTI4MDtcclxuICBASW5wdXQoKSByZXNvbHV0aW9uWSA9IDcyMDtcclxuXHJcbiAgcHJpdmF0ZSB3aWR0aFNlZ21lbnRzID0gMTtcclxuICBwcml2YXRlIGhlaWdodFNlZ21lbnRzID0gMTtcclxuXHJcbiAgcHJvdGVjdGVkIG5ld09iamVjdDNESW5zdGFuY2UoKTogVEhSRUUuTWVzaCB7XHJcbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUJ1ZmZlckdlb21ldHJ5KHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLndpZHRoU2VnbWVudHMsIHRoaXMuaGVpZ2h0U2VnbWVudHMpO1xyXG4gICAgY29uc3QgbWF0ZXJpYWwgPSB0aGlzLmdldE1hdGVyaWFsKCk7XHJcbiAgICBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgIHRoaXMuYXBwbHlTaGFkb3dQcm9wcyhtZXNoKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYW5kIHNjYWxlIGNzczNkIG9iamVjdDpcclxuICAgIGNvbnN0IG1lc2hTaXplID0gY2FsY3VsYXRlU2l6ZShtZXNoKTtcclxuICAgIGNvbnN0IGNzczNkT2JqZWN0ID0gdGhpcy5jcmVhdGVDc3MzZE9iamVjdCgpO1xyXG4gICAgdGhpcy5zY2FsZUNzczNkKGNzczNkT2JqZWN0LCBtZXNoU2l6ZSk7XHJcblxyXG4gICAgLy8gYXBwZW5kIHRvIG1lc2g6XHJcbiAgICBtZXNoLmFkZChjc3MzZE9iamVjdCk7XHJcbiAgICByZXR1cm4gbWVzaDtcclxuICB9XHJcblxyXG5cclxuICBwcm90ZWN0ZWQgc2NhbGVDc3MzZChncm91cDogQ1NTM0RPYmplY3QsIG1heDogVEhSRUUuVmVjdG9yMykge1xyXG4gICAgY29uc3QgYm94ID0gbmV3IFRIUkVFLlZlY3RvcjModGhpcy5yZXNvbHV0aW9uWCwgdGhpcy5yZXNvbHV0aW9uWSwgMCk7XHJcblxyXG4gICAgY29uc3Qgc2NhbGVYID0gbWF4LnggLyBib3gueDtcclxuICAgIGNvbnN0IHNjYWxlWSA9IG1heC55IC8gYm94Lnk7XHJcbiAgICBjb25zdCBzY2FsZVogPSBtYXgueiAvIGJveC56O1xyXG5cclxuICAgIGdyb3VwLnNjYWxlLnNldChcclxuICAgICAgKHNjYWxlWCA8IDEgPyBzY2FsZVggOiAxKSxcclxuICAgICAgKHNjYWxlWSA8IDEgPyBzY2FsZVkgOiAxKSxcclxuICAgICAgKHNjYWxlWiA8IDEgPyBzY2FsZVogOiAxKVxyXG4gICAgKTtcclxuXHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZ2V0TWF0ZXJpYWwoKTogVEhSRUUuTWF0ZXJpYWwge1xyXG4gICAgLy8gVE9ETzogUmVuZGVyZXIgY2xlYXIgY29sb3JcclxuICAgIGNvbnN0IHRyYW5zcGFyZW50TWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xyXG4gICAgICBjb2xvcjogMHgwMDAwMDAsXHJcbiAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRyYW5zcGFyZW50TWF0ZXJpYWw7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgY3JlYXRlQ3NzM2RPYmplY3QoKTogQ1NTM0RPYmplY3Q7XHJcblxyXG59XHJcbiJdfQ==