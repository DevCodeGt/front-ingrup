/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import { AbstractObject3D } from '../abstract-object-3d';
import { CSS3DObject } from 'three/examples/jsm/renderers/CSS3DRenderer';
import { AbstractCss3dMesh } from './abstract-css3d-mesh';
import { RendererService } from '../../renderer/renderer.service';
var Css3dVideoMeshComponent = /** @class */ (function (_super) {
    tslib_1.__extends(Css3dVideoMeshComponent, _super);
    function Css3dVideoMeshComponent(rendererService) {
        var _this = _super.call(this, rendererService) || this;
        _this.rendererService = rendererService;
        _this.video = document.createElement('video');
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    Css3dVideoMeshComponent.prototype.createCss3dObject = /**
     * @protected
     * @return {?}
     */
    function () {
        // 1. Create DIV
        /** @type {?} */
        var div = document.createElement('div');
        div.style.width = this.resolutionX + 'px';
        div.style.height = this.resolutionY + 'px';
        div.style.backgroundColor = '#000000';
        div.id = 'myWrapper';
        // 2. Create Video Player with source
        this.video.autoplay = false;
        this.video.loop = true;
        this.video.muted = true;
        /** @type {?} */
        var source = document.createElement('source');
        source.src = this.videoSrc;
        source.type = 'video/mp4';
        this.video.appendChild(source);
        div.appendChild(this.video);
        // 3. Create CSS3DObject
        /** @type {?} */
        var object = new CSS3DObject(div);
        return object;
    };
    /**
     * @return {?}
     */
    Css3dVideoMeshComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngAfterViewInit.call(this);
        this.video.load();
        this.video.addEventListener('canplay', (/**
         * @return {?}
         */
        function () {
            console.log('EVENT');
            _this.video.play();
        }));
    };
    Css3dVideoMeshComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-css3d-video-mesh',
                    providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return Css3dVideoMeshComponent; })) }],
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    Css3dVideoMeshComponent.ctorParameters = function () { return [
        { type: RendererService }
    ]; };
    Css3dVideoMeshComponent.propDecorators = {
        videoSrc: [{ type: Input }]
    };
    return Css3dVideoMeshComponent;
}(AbstractCss3dMesh));
export { Css3dVideoMeshComponent };
if (false) {
    /** @type {?} */
    Css3dVideoMeshComponent.prototype.videoSrc;
    /** @type {?} */
    Css3dVideoMeshComponent.prototype.video;
    /**
     * @type {?}
     * @protected
     */
    Css3dVideoMeshComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3NzM2QtdmlkZW8tbWVzaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL29iamVjdC9tZXNoL2NzczNkLXZpZGVvLW1lc2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFnQixTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sNENBQTRDLENBQUM7QUFDdkUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBRWhFO0lBSzZDLG1EQUFpQjtJQU81RCxpQ0FDWSxlQUFnQztRQUQ1QyxZQUdFLGtCQUFNLGVBQWUsQ0FBQyxTQUN2QjtRQUhXLHFCQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUg1QyxXQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQzs7SUFNeEMsQ0FBQzs7Ozs7SUFFUyxtREFBaUI7Ozs7SUFBM0I7OztZQUVRLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUN6QyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUMxQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUMzQyxHQUFHLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7UUFDdEMsR0FBRyxDQUFDLEVBQUUsR0FBRyxXQUFXLENBQUM7UUFFckIscUNBQXFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDOztZQUNsQixNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDL0MsTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzNCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDO1FBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9CLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7WUFHdEIsTUFBTSxHQUFHLElBQUksV0FBVyxDQUFDLEdBQUcsQ0FBQztRQUNuQyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOzs7O0lBRUQsaURBQWU7OztJQUFmO1FBQUEsaUJBU0M7UUFSQyxpQkFBTSxlQUFlLFdBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsU0FBUzs7O1FBQUU7WUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNyQixLQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3BCLENBQUMsRUFBQyxDQUFDO0lBR0wsQ0FBQzs7Z0JBbERGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsdUJBQXVCO29CQUNqQyxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsVUFBVTs7OzRCQUFDLGNBQU0sT0FBQSx1QkFBdUIsRUFBdkIsQ0FBdUIsRUFBQyxFQUFDLENBQUM7b0JBQ2hHLFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3RDOzs7O2dCQU5PLGVBQWU7OzsyQkFTcEIsS0FBSzs7SUE2Q1IsOEJBQUM7Q0FBQSxBQXBERCxDQUs2QyxpQkFBaUIsR0ErQzdEO1NBL0NZLHVCQUF1Qjs7O0lBRWxDLDJDQUNTOztJQUVULHdDQUF3Qzs7Ozs7SUFHdEMsa0RBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtBYnN0cmFjdE9iamVjdDNEfSBmcm9tICcuLi9hYnN0cmFjdC1vYmplY3QtM2QnO1xyXG5pbXBvcnQge0NTUzNET2JqZWN0fSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vcmVuZGVyZXJzL0NTUzNEUmVuZGVyZXInO1xyXG5pbXBvcnQge0Fic3RyYWN0Q3NzM2RNZXNofSBmcm9tICcuL2Fic3RyYWN0LWNzczNkLW1lc2gnO1xyXG5pbXBvcnQge1JlbmRlcmVyU2VydmljZX0gZnJvbSAnLi4vLi4vcmVuZGVyZXIvcmVuZGVyZXIuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2F0ZnQtY3NzM2QtdmlkZW8tbWVzaCcsXHJcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IEFic3RyYWN0T2JqZWN0M0QsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IENzczNkVmlkZW9NZXNoQ29tcG9uZW50KX1dLFxyXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PidcclxufSlcclxuZXhwb3J0IGNsYXNzIENzczNkVmlkZW9NZXNoQ29tcG9uZW50IGV4dGVuZHMgQWJzdHJhY3RDc3MzZE1lc2ggaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgQElucHV0KClcclxuICB2aWRlb1NyYztcclxuXHJcbiAgdmlkZW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCByZW5kZXJlclNlcnZpY2U6IFJlbmRlcmVyU2VydmljZVxyXG4gICkge1xyXG4gICAgc3VwZXIocmVuZGVyZXJTZXJ2aWNlKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBjcmVhdGVDc3MzZE9iamVjdCgpOiBDU1MzRE9iamVjdCB7XHJcbiAgICAvLyAxLiBDcmVhdGUgRElWXHJcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGRpdi5zdHlsZS53aWR0aCA9IHRoaXMucmVzb2x1dGlvblggKyAncHgnO1xyXG4gICAgZGl2LnN0eWxlLmhlaWdodCA9IHRoaXMucmVzb2x1dGlvblkgKyAncHgnO1xyXG4gICAgZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjMDAwMDAwJztcclxuICAgIGRpdi5pZCA9ICdteVdyYXBwZXInO1xyXG5cclxuICAgIC8vIDIuIENyZWF0ZSBWaWRlbyBQbGF5ZXIgd2l0aCBzb3VyY2VcclxuICAgIHRoaXMudmlkZW8uYXV0b3BsYXkgPSBmYWxzZTtcclxuICAgIHRoaXMudmlkZW8ubG9vcCA9IHRydWU7XHJcbiAgICB0aGlzLnZpZGVvLm11dGVkID0gdHJ1ZTtcclxuICAgIGNvbnN0IHNvdXJjZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NvdXJjZScpO1xyXG4gICAgc291cmNlLnNyYyA9IHRoaXMudmlkZW9TcmM7XHJcbiAgICBzb3VyY2UudHlwZSA9ICd2aWRlby9tcDQnO1xyXG4gICAgdGhpcy52aWRlby5hcHBlbmRDaGlsZChzb3VyY2UpO1xyXG4gICAgZGl2LmFwcGVuZENoaWxkKHRoaXMudmlkZW8pO1xyXG5cclxuICAgIC8vIDMuIENyZWF0ZSBDU1MzRE9iamVjdFxyXG4gICAgY29uc3Qgb2JqZWN0ID0gbmV3IENTUzNET2JqZWN0KGRpdik7XHJcbiAgICByZXR1cm4gb2JqZWN0O1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgc3VwZXIubmdBZnRlclZpZXdJbml0KCk7XHJcbiAgICB0aGlzLnZpZGVvLmxvYWQoKTtcclxuICAgIHRoaXMudmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignY2FucGxheScsICgpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ0VWRU5UJyk7XHJcbiAgICAgIHRoaXMudmlkZW8ucGxheSgpO1xyXG4gICAgfSk7XHJcblxyXG5cclxuICB9XHJcblxyXG59XHJcbiJdfQ==