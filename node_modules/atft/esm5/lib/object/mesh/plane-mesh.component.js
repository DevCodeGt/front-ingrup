/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractMesh } from './abstract-mesh-3d';
import { AbstractObject3D } from '../abstract-object-3d';
import { RendererService } from '../../renderer/renderer.service';
var PlaneMeshComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PlaneMeshComponent, _super);
    function PlaneMeshComponent(rendererService) {
        var _this = _super.call(this, rendererService) || this;
        _this.rendererService = rendererService;
        /**
         * Width; that is, the length of the edges parallel to the X axis. Optional; defaults to 1.
         */
        _this.width = 1.0;
        /**
         * Height; that is, the length of the edges parallel to the Y axis. Optional; defaults to 1.
         */
        _this.height = 1.0;
        /**
         * Number of segmented rectangular faces along the width of the sides. Optional; defaults to 1.
         */
        _this.widthSegments = 1;
        /**
         * Number of segmented rectangular faces along the height of the sides. Optional; defaults to 1.
         */
        _this.heightSegments = 1;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    PlaneMeshComponent.prototype.newObject3DInstance = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var geometry = new THREE.PlaneBufferGeometry(this.width, this.height, this.widthSegments, this.heightSegments);
        /** @type {?} */
        var material = this.getMaterial();
        /** @type {?} */
        var mesh = new THREE.Mesh(geometry, material);
        this.applyShadowProps(mesh);
        return mesh;
    };
    PlaneMeshComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-plane-mesh',
                    providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PlaneMeshComponent; })) }],
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    PlaneMeshComponent.ctorParameters = function () { return [
        { type: RendererService }
    ]; };
    PlaneMeshComponent.propDecorators = {
        width: [{ type: Input }],
        height: [{ type: Input }],
        widthSegments: [{ type: Input }],
        heightSegments: [{ type: Input }]
    };
    return PlaneMeshComponent;
}(AbstractMesh));
export { PlaneMeshComponent };
if (false) {
    /**
     * Width; that is, the length of the edges parallel to the X axis. Optional; defaults to 1.
     * @type {?}
     */
    PlaneMeshComponent.prototype.width;
    /**
     * Height; that is, the length of the edges parallel to the Y axis. Optional; defaults to 1.
     * @type {?}
     */
    PlaneMeshComponent.prototype.height;
    /**
     * Number of segmented rectangular faces along the width of the sides. Optional; defaults to 1.
     * @type {?}
     */
    PlaneMeshComponent.prototype.widthSegments;
    /**
     * Number of segmented rectangular faces along the height of the sides. Optional; defaults to 1.
     * @type {?}
     */
    PlaneMeshComponent.prototype.heightSegments;
    /**
     * @type {?}
     * @protected
     */
    PlaneMeshComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhbmUtbWVzaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL29iamVjdC9tZXNoL3BsYW5lLW1lc2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUV2RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFFaEU7SUFLd0MsOENBQVk7SUEwQmxELDRCQUNZLGVBQWdDO1FBRDVDLFlBR0Usa0JBQU0sZUFBZSxDQUFDLFNBQ3ZCO1FBSFcscUJBQWUsR0FBZixlQUFlLENBQWlCOzs7O1FBckI1QyxXQUFLLEdBQUcsR0FBRyxDQUFDOzs7O1FBTVosWUFBTSxHQUFHLEdBQUcsQ0FBQzs7OztRQU1iLG1CQUFhLEdBQUcsQ0FBQyxDQUFDOzs7O1FBTWxCLG9CQUFjLEdBQUcsQ0FBQyxDQUFDOztJQU1uQixDQUFDOzs7OztJQUVTLGdEQUFtQjs7OztJQUE3Qjs7WUFDUSxRQUFRLEdBQUcsSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQzs7WUFDMUcsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUU7O1lBQzdCLElBQUksR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOztnQkEzQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxVQUFVOzs7NEJBQUMsY0FBTSxPQUFBLGtCQUFrQixFQUFsQixDQUFrQixFQUFDLEVBQUMsQ0FBQztvQkFDM0YsUUFBUSxFQUFFLDJCQUEyQjtpQkFDdEM7Ozs7Z0JBTk8sZUFBZTs7O3dCQVlwQixLQUFLO3lCQU1MLEtBQUs7Z0NBTUwsS0FBSztpQ0FNTCxLQUFLOztJQWlCUix5QkFBQztDQUFBLEFBN0NELENBS3dDLFlBQVksR0F3Q25EO1NBeENZLGtCQUFrQjs7Ozs7O0lBSzdCLG1DQUNZOzs7OztJQUtaLG9DQUNhOzs7OztJQUtiLDJDQUNrQjs7Ozs7SUFLbEIsNENBQ21COzs7OztJQUdqQiw2Q0FBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCB7QWJzdHJhY3RNZXNofSBmcm9tICcuL2Fic3RyYWN0LW1lc2gtM2QnO1xyXG5pbXBvcnQge0Fic3RyYWN0T2JqZWN0M0R9IGZyb20gJy4uL2Fic3RyYWN0LW9iamVjdC0zZCc7XHJcbmltcG9ydCB7YXBwbGllZENvbG9yfSBmcm9tICcuLi8uLi91dGlsL2FwcGxpZWQtY29sb3InO1xyXG5pbXBvcnQge1JlbmRlcmVyU2VydmljZX0gZnJvbSAnLi4vLi4vcmVuZGVyZXIvcmVuZGVyZXIuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2F0ZnQtcGxhbmUtbWVzaCcsXHJcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IEFic3RyYWN0T2JqZWN0M0QsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFBsYW5lTWVzaENvbXBvbmVudCl9XSxcclxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQbGFuZU1lc2hDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdE1lc2gge1xyXG5cclxuICAvKipcclxuICAgKiBXaWR0aDsgdGhhdCBpcywgdGhlIGxlbmd0aCBvZiB0aGUgZWRnZXMgcGFyYWxsZWwgdG8gdGhlIFggYXhpcy4gT3B0aW9uYWw7IGRlZmF1bHRzIHRvIDEuXHJcbiAgICovXHJcbiAgQElucHV0KClcclxuICB3aWR0aCA9IDEuMDtcclxuXHJcbiAgLyoqXHJcbiAgICogSGVpZ2h0OyB0aGF0IGlzLCB0aGUgbGVuZ3RoIG9mIHRoZSBlZGdlcyBwYXJhbGxlbCB0byB0aGUgWSBheGlzLiBPcHRpb25hbDsgZGVmYXVsdHMgdG8gMS5cclxuICAgKi9cclxuICBASW5wdXQoKVxyXG4gIGhlaWdodCA9IDEuMDtcclxuXHJcbiAgLyoqXHJcbiAgICogTnVtYmVyIG9mIHNlZ21lbnRlZCByZWN0YW5ndWxhciBmYWNlcyBhbG9uZyB0aGUgd2lkdGggb2YgdGhlIHNpZGVzLiBPcHRpb25hbDsgZGVmYXVsdHMgdG8gMS5cclxuICAgKi9cclxuICBASW5wdXQoKVxyXG4gIHdpZHRoU2VnbWVudHMgPSAxO1xyXG5cclxuICAvKipcclxuICAgKiBOdW1iZXIgb2Ygc2VnbWVudGVkIHJlY3Rhbmd1bGFyIGZhY2VzIGFsb25nIHRoZSBoZWlnaHQgb2YgdGhlIHNpZGVzLiBPcHRpb25hbDsgZGVmYXVsdHMgdG8gMS5cclxuICAgKi9cclxuICBASW5wdXQoKVxyXG4gIGhlaWdodFNlZ21lbnRzID0gMTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbmV3T2JqZWN0M0RJbnN0YW5jZSgpOiBUSFJFRS5NZXNoIHtcclxuICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lQnVmZmVyR2VvbWV0cnkodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMud2lkdGhTZWdtZW50cywgdGhpcy5oZWlnaHRTZWdtZW50cyk7XHJcbiAgICBjb25zdCBtYXRlcmlhbCA9IHRoaXMuZ2V0TWF0ZXJpYWwoKTtcclxuICAgIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgdGhpcy5hcHBseVNoYWRvd1Byb3BzKG1lc2gpO1xyXG4gICAgcmV0dXJuIG1lc2g7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=