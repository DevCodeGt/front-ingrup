/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractMesh } from './abstract-mesh-3d';
import { AbstractObject3D } from '../abstract-object-3d';
import { RendererService } from '../../renderer/renderer.service';
var SphereMeshComponent = /** @class */ (function (_super) {
    tslib_1.__extends(SphereMeshComponent, _super);
    function SphereMeshComponent(rendererService) {
        var _this = _super.call(this, rendererService) || this;
        _this.rendererService = rendererService;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    SphereMeshComponent.prototype.newObject3DInstance = /**
     * @protected
     * @return {?}
     */
    function () {
        // console.log('SphereMeshComponent.newObject3DInstance');
        /** @type {?} */
        var geometry = new THREE.SphereGeometry(this.radius, this.widthSegments, this.hightSegments);
        /** @type {?} */
        var material = this.getMaterial();
        /** @type {?} */
        var mesh = new THREE.Mesh(geometry, material);
        this.applyShadowProps(mesh);
        return mesh;
    };
    SphereMeshComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-sphere-mesh',
                    providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return SphereMeshComponent; })) }],
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    SphereMeshComponent.ctorParameters = function () { return [
        { type: RendererService }
    ]; };
    SphereMeshComponent.propDecorators = {
        radius: [{ type: Input }],
        widthSegments: [{ type: Input }],
        hightSegments: [{ type: Input }]
    };
    return SphereMeshComponent;
}(AbstractMesh));
export { SphereMeshComponent };
if (false) {
    /** @type {?} */
    SphereMeshComponent.prototype.radius;
    /** @type {?} */
    SphereMeshComponent.prototype.widthSegments;
    /** @type {?} */
    SphereMeshComponent.prototype.hightSegments;
    /**
     * @type {?}
     * @protected
     */
    SphereMeshComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BoZXJlLW1lc2guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXRmdC8iLCJzb3VyY2VzIjpbImxpYi9vYmplY3QvbWVzaC9zcGhlcmUtbWVzaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUVoRTtJQUt5QywrQ0FBWTtJQU1uRCw2QkFDWSxlQUFnQztRQUQ1QyxZQUdFLGtCQUFNLGVBQWUsQ0FBQyxTQUN2QjtRQUhXLHFCQUFlLEdBQWYsZUFBZSxDQUFpQjs7SUFHNUMsQ0FBQzs7Ozs7SUFFUyxpREFBbUI7Ozs7SUFBN0I7OztZQUVRLFFBQVEsR0FBRyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUM7O1lBQ3hGLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFOztZQUM3QixJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7UUFDL0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Z0JBeEJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1QixTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsVUFBVTs7OzRCQUFDLGNBQU0sT0FBQSxtQkFBbUIsRUFBbkIsQ0FBbUIsRUFBQyxFQUFDLENBQUM7b0JBQzVGLFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3RDOzs7O2dCQU5PLGVBQWU7Ozt5QkFTcEIsS0FBSztnQ0FDTCxLQUFLO2dDQUNMLEtBQUs7O0lBaUJSLDBCQUFDO0NBQUEsQUExQkQsQ0FLeUMsWUFBWSxHQXFCcEQ7U0FyQlksbUJBQW1COzs7SUFFOUIscUNBQXdCOztJQUN4Qiw0Q0FBK0I7O0lBQy9CLDRDQUErQjs7Ozs7SUFHN0IsOENBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5pbXBvcnQge0Fic3RyYWN0TWVzaH0gZnJvbSAnLi9hYnN0cmFjdC1tZXNoLTNkJztcclxuaW1wb3J0IHtBYnN0cmFjdE9iamVjdDNEfSBmcm9tICcuLi9hYnN0cmFjdC1vYmplY3QtM2QnO1xyXG5pbXBvcnQge1JlbmRlcmVyU2VydmljZX0gZnJvbSAnLi4vLi4vcmVuZGVyZXIvcmVuZGVyZXIuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2F0ZnQtc3BoZXJlLW1lc2gnLFxyXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBBYnN0cmFjdE9iamVjdDNELCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBTcGhlcmVNZXNoQ29tcG9uZW50KX1dLFxyXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PidcclxufSlcclxuZXhwb3J0IGNsYXNzIFNwaGVyZU1lc2hDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdE1lc2gge1xyXG5cclxuICBASW5wdXQoKSByYWRpdXM6IG51bWJlcjtcclxuICBASW5wdXQoKSB3aWR0aFNlZ21lbnRzOiBudW1iZXI7XHJcbiAgQElucHV0KCkgaGlnaHRTZWdtZW50czogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCByZW5kZXJlclNlcnZpY2U6IFJlbmRlcmVyU2VydmljZVxyXG4gICkge1xyXG4gICAgc3VwZXIocmVuZGVyZXJTZXJ2aWNlKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBuZXdPYmplY3QzREluc3RhbmNlKCk6IFRIUkVFLk1lc2gge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ1NwaGVyZU1lc2hDb21wb25lbnQubmV3T2JqZWN0M0RJbnN0YW5jZScpO1xyXG4gICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkodGhpcy5yYWRpdXMsIHRoaXMud2lkdGhTZWdtZW50cywgdGhpcy5oaWdodFNlZ21lbnRzKTtcclxuICAgIGNvbnN0IG1hdGVyaWFsID0gdGhpcy5nZXRNYXRlcmlhbCgpO1xyXG4gICAgY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcbiAgICB0aGlzLmFwcGx5U2hhZG93UHJvcHMobWVzaCk7XHJcbiAgICByZXR1cm4gbWVzaDtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==