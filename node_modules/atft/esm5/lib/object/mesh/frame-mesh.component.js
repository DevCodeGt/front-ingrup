/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import * as THREE from 'three';
import { AbstractMesh } from './abstract-mesh-3d';
import { AbstractObject3D } from '../abstract-object-3d';
import { RendererService } from '../../renderer/renderer.service';
var FrameMeshComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FrameMeshComponent, _super);
    function FrameMeshComponent(rendererService) {
        var _this = _super.call(this, rendererService) || this;
        _this.rendererService = rendererService;
        _this.thickness = 2;
        _this.sizeX = 20;
        _this.sizeY = 20;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    FrameMeshComponent.prototype.newObject3DInstance = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var halfX = this.sizeX / 2.0;
        /** @type {?} */
        var halfY = this.sizeY / 2.0;
        /** @type {?} */
        var t = this.thickness;
        /** @type {?} */
        var shape = new THREE.Shape();
        shape.moveTo(-halfX, halfY);
        shape.lineTo(-halfX - t, halfY + t);
        shape.lineTo(halfX + t, halfY + t);
        shape.lineTo(halfX + t, -halfY - t);
        shape.lineTo(-halfX - t, -halfY - t);
        shape.lineTo(-halfX - t, halfY + t);
        shape.lineTo(-halfX, halfY);
        shape.lineTo(-halfX, -halfY);
        shape.lineTo(halfX, -halfY);
        shape.lineTo(halfX, halfY);
        shape.lineTo(-halfX, halfY);
        /** @type {?} */
        var geometry = new THREE.ShapeBufferGeometry(shape);
        /** @type {?} */
        var material = this.getMaterial();
        /** @type {?} */
        var mesh = new THREE.Mesh(geometry, material);
        this.applyShadowProps(mesh);
        return mesh;
    };
    FrameMeshComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-frame-mesh',
                    providers: [{ provide: AbstractObject3D, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return FrameMeshComponent; })) }],
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    FrameMeshComponent.ctorParameters = function () { return [
        { type: RendererService }
    ]; };
    FrameMeshComponent.propDecorators = {
        thickness: [{ type: Input }],
        sizeX: [{ type: Input }],
        sizeY: [{ type: Input }]
    };
    return FrameMeshComponent;
}(AbstractMesh));
export { FrameMeshComponent };
if (false) {
    /** @type {?} */
    FrameMeshComponent.prototype.thickness;
    /** @type {?} */
    FrameMeshComponent.prototype.sizeX;
    /** @type {?} */
    FrameMeshComponent.prototype.sizeY;
    /**
     * @type {?}
     * @protected
     */
    FrameMeshComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWUtbWVzaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL29iamVjdC9tZXNoL2ZyYW1lLW1lc2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFFaEU7SUFLd0MsOENBQVk7SUFXbEQsNEJBQ1ksZUFBZ0M7UUFENUMsWUFHRSxrQkFBTSxlQUFlLENBQUMsU0FDdkI7UUFIVyxxQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFUNUMsZUFBUyxHQUFHLENBQUMsQ0FBQztRQUdkLFdBQUssR0FBRyxFQUFFLENBQUM7UUFHWCxXQUFLLEdBQUcsRUFBRSxDQUFDOztJQU1YLENBQUM7Ozs7O0lBRVMsZ0RBQW1COzs7O0lBQTdCOztZQUVRLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUc7O1lBQ3hCLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUc7O1lBQ3hCLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUzs7WUFFbEIsS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtRQUUvQixLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzVCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNwQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ25DLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNwQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFcEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM1QixLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QixLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzQixLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDOztZQUV0QixRQUFRLEdBQUcsSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDOztZQUMvQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRTs7WUFDN0IsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO1FBRS9DLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7O2dCQWpERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLFVBQVU7Ozs0QkFBQyxjQUFNLE9BQUEsa0JBQWtCLEVBQWxCLENBQWtCLEVBQUMsRUFBQyxDQUFDO29CQUMzRixRQUFRLEVBQUUsMkJBQTJCO2lCQUN0Qzs7OztnQkFOTyxlQUFlOzs7NEJBU3BCLEtBQUs7d0JBR0wsS0FBSzt3QkFHTCxLQUFLOztJQXNDUix5QkFBQztDQUFBLEFBbkRELENBS3dDLFlBQVksR0E4Q25EO1NBOUNZLGtCQUFrQjs7O0lBRTdCLHVDQUNjOztJQUVkLG1DQUNXOztJQUVYLG1DQUNXOzs7OztJQUdULDZDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuaW1wb3J0IHtBYnN0cmFjdE1lc2h9IGZyb20gJy4vYWJzdHJhY3QtbWVzaC0zZCc7XHJcbmltcG9ydCB7QWJzdHJhY3RPYmplY3QzRH0gZnJvbSAnLi4vYWJzdHJhY3Qtb2JqZWN0LTNkJztcclxuaW1wb3J0IHtSZW5kZXJlclNlcnZpY2V9IGZyb20gJy4uLy4uL3JlbmRlcmVyL3JlbmRlcmVyLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhdGZ0LWZyYW1lLW1lc2gnLFxyXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBBYnN0cmFjdE9iamVjdDNELCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBGcmFtZU1lc2hDb21wb25lbnQpfV0sXHJcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRnJhbWVNZXNoQ29tcG9uZW50IGV4dGVuZHMgQWJzdHJhY3RNZXNoIHtcclxuXHJcbiAgQElucHV0KClcclxuICB0aGlja25lc3MgPSAyO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHNpemVYID0gMjA7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgc2l6ZVkgPSAyMDtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbmV3T2JqZWN0M0RJbnN0YW5jZSgpOiBUSFJFRS5NZXNoIHtcclxuXHJcbiAgICBjb25zdCBoYWxmWCA9IHRoaXMuc2l6ZVggLyAyLjA7XHJcbiAgICBjb25zdCBoYWxmWSA9IHRoaXMuc2l6ZVkgLyAyLjA7XHJcbiAgICBjb25zdCB0ID0gdGhpcy50aGlja25lc3M7XHJcblxyXG4gICAgY29uc3Qgc2hhcGUgPSBuZXcgVEhSRUUuU2hhcGUoKTtcclxuXHJcbiAgICBzaGFwZS5tb3ZlVG8oLWhhbGZYLCBoYWxmWSk7XHJcbiAgICBzaGFwZS5saW5lVG8oLWhhbGZYIC0gdCwgaGFsZlkgKyB0KTtcclxuICAgIHNoYXBlLmxpbmVUbyhoYWxmWCArIHQsIGhhbGZZICsgdCk7XHJcbiAgICBzaGFwZS5saW5lVG8oaGFsZlggKyB0LCAtaGFsZlkgLSB0KTtcclxuICAgIHNoYXBlLmxpbmVUbygtaGFsZlggLSB0LCAtaGFsZlkgLSB0KTtcclxuICAgIHNoYXBlLmxpbmVUbygtaGFsZlggLSB0LCBoYWxmWSArIHQpO1xyXG5cclxuICAgIHNoYXBlLmxpbmVUbygtaGFsZlgsIGhhbGZZKTtcclxuICAgIHNoYXBlLmxpbmVUbygtaGFsZlgsIC1oYWxmWSk7XHJcbiAgICBzaGFwZS5saW5lVG8oaGFsZlgsIC1oYWxmWSk7XHJcbiAgICBzaGFwZS5saW5lVG8oaGFsZlgsIGhhbGZZKTtcclxuICAgIHNoYXBlLmxpbmVUbygtaGFsZlgsIGhhbGZZKTtcclxuXHJcbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5TaGFwZUJ1ZmZlckdlb21ldHJ5KHNoYXBlKTtcclxuICAgIGNvbnN0IG1hdGVyaWFsID0gdGhpcy5nZXRNYXRlcmlhbCgpO1xyXG4gICAgY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcblxyXG4gICAgdGhpcy5hcHBseVNoYWRvd1Byb3BzKG1lc2gpO1xyXG4gICAgcmV0dXJuIG1lc2g7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=