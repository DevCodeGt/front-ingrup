/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { AbstractObject3D } from './abstract-object-3d';
import * as THREE from 'three';
/**
 * @abstract
 */
var /**
 * @abstract
 */
AbstractLazyObject3D = /** @class */ (function (_super) {
    tslib_1.__extends(AbstractLazyObject3D, _super);
    function AbstractLazyObject3D() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Flag to signal whether the parent class instance AbstractObject3D called the
         * overwritten method {\@link AbstractModelLoader#afterInit} yet.
         *
         * Unless that method was called, no methods and properties of {\@link AbstractObject3D}
         * may be safely accessed, especially {\@link AbstractObject3D#addChild} and
         * {\@link AbstractObject3D.renderer}.
         */
        _this.parentInitialized = false;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    AbstractLazyObject3D.prototype.afterInit = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.afterInit.call(this);
        this.parentInitialized = true;
        this.startLoading();
    };
    /**
     * @protected
     * @return {?}
     */
    AbstractLazyObject3D.prototype.startLoading = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        // console.log('AbstractLazyObject3D.startLoading');
        // Trigger model acquisition now that the parent has been initialized.
        this.loadLazyObject().then((/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            // console.log('AbstractLazyObject3D loaded');
            // remove old if exists
            if (_this.lazyObject) {
                _super.prototype.removeChild.call(_this, _this.lazyObject);
            }
            // add lazy object to scene
            _this.lazyObject = obj;
            _super.prototype.addChild.call(_this, obj);
            _this.rendererService.render();
        })).catch((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.error(err);
        }));
    };
    /**
     * @return {?}
     */
    AbstractLazyObject3D.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.lazyObject) {
            _super.prototype.removeChild.call(this, this.lazyObject);
        }
    };
    /**
     * @protected
     * @return {?}
     */
    AbstractLazyObject3D.prototype.newObject3DInstance = /**
     * @protected
     * @return {?}
     */
    function () {
        // Just empty object (holder of lazy object)
        return new THREE.Object3D();
    };
    return AbstractLazyObject3D;
}(AbstractObject3D));
/**
 * @abstract
 */
export { AbstractLazyObject3D };
if (false) {
    /**
     * Flag to signal whether the parent class instance AbstractObject3D called the
     * overwritten method {\@link AbstractModelLoader#afterInit} yet.
     *
     * Unless that method was called, no methods and properties of {\@link AbstractObject3D}
     * may be safely accessed, especially {\@link AbstractObject3D#addChild} and
     * {\@link AbstractObject3D.renderer}.
     * @type {?}
     * @private
     */
    AbstractLazyObject3D.prototype.parentInitialized;
    /**
     * This is reference to lazy loaded Object3D (async after init)
     * @type {?}
     * @protected
     */
    AbstractLazyObject3D.prototype.lazyObject;
    /**
     * Abstract method for lazy loading
     *
     * @abstract
     * @protected
     * @return {?}
     */
    AbstractLazyObject3D.prototype.loadLazyObject = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtbGF6eS1vYmplY3QtM2QuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL29iamVjdC9hYnN0cmFjdC1sYXp5LW9iamVjdC0zZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRXRELE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDOzs7O0FBRS9COzs7O0lBQW1ELGdEQUFnQztJQUFuRjtRQUFBLHFFQTREQzs7Ozs7Ozs7O1FBbERTLHVCQUFpQixHQUFHLEtBQUssQ0FBQzs7SUFrRHBDLENBQUM7Ozs7O0lBckNXLHdDQUFTOzs7O0lBQW5CO1FBQ0UsaUJBQU0sU0FBUyxXQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztRQUM5QixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7Ozs7SUFFUywyQ0FBWTs7OztJQUF0QjtRQUFBLGlCQWtCQztRQWpCQyxvREFBb0Q7UUFDcEQsc0VBQXNFO1FBQ3RFLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQSxHQUFHO1lBQzVCLDhDQUE4QztZQUM5Qyx1QkFBdUI7WUFDdkIsSUFBSSxLQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNuQixpQkFBTSxXQUFXLGFBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3BDO1lBRUQsMkJBQTJCO1lBQzNCLEtBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO1lBQ3RCLGlCQUFNLFFBQVEsYUFBQyxHQUFHLENBQUMsQ0FBQztZQUVwQixLQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLENBQUMsRUFBQyxDQUFDLEtBQUs7Ozs7UUFBQyxVQUFBLEdBQUc7WUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELDBDQUFXOzs7SUFBWDtRQUNFLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixpQkFBTSxXQUFXLFlBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQzs7Ozs7SUFFUyxrREFBbUI7Ozs7SUFBN0I7UUFDRSw0Q0FBNEM7UUFDNUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRUgsMkJBQUM7QUFBRCxDQUFDLEFBNURELENBQW1ELGdCQUFnQixHQTREbEU7Ozs7Ozs7Ozs7Ozs7Ozs7SUFsREMsaURBQWtDOzs7Ozs7SUFLbEMsMENBQWlEOzs7Ozs7OztJQU1qRCxnRUFBbUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge09uRGVzdHJveX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQge0Fic3RyYWN0T2JqZWN0M0R9IGZyb20gJy4vYWJzdHJhY3Qtb2JqZWN0LTNkJztcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdExhenlPYmplY3QzRCBleHRlbmRzIEFic3RyYWN0T2JqZWN0M0Q8VEhSRUUuT2JqZWN0M0Q+IGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuXHJcbiAgLyoqXHJcbiAgICogRmxhZyB0byBzaWduYWwgd2hldGhlciB0aGUgcGFyZW50IGNsYXNzIGluc3RhbmNlIEFic3RyYWN0T2JqZWN0M0QgY2FsbGVkIHRoZVxyXG4gICAqIG92ZXJ3cml0dGVuIG1ldGhvZCB7QGxpbmsgQWJzdHJhY3RNb2RlbExvYWRlciNhZnRlckluaXR9IHlldC5cclxuICAgKlxyXG4gICAqIFVubGVzcyB0aGF0IG1ldGhvZCB3YXMgY2FsbGVkLCBubyBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIG9mIHtAbGluayBBYnN0cmFjdE9iamVjdDNEfVxyXG4gICAqIG1heSBiZSBzYWZlbHkgYWNjZXNzZWQsIGVzcGVjaWFsbHkge0BsaW5rIEFic3RyYWN0T2JqZWN0M0QjYWRkQ2hpbGR9IGFuZFxyXG4gICAqIHtAbGluayBBYnN0cmFjdE9iamVjdDNELnJlbmRlcmVyfS5cclxuICAgKi9cclxuICBwcml2YXRlIHBhcmVudEluaXRpYWxpemVkID0gZmFsc2U7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgaXMgcmVmZXJlbmNlIHRvIGxhenkgbG9hZGVkIE9iamVjdDNEIChhc3luYyBhZnRlciBpbml0KVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBsYXp5T2JqZWN0OiBUSFJFRS5PYmplY3QzRCB8IHVuZGVmaW5lZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQWJzdHJhY3QgbWV0aG9kIGZvciBsYXp5IGxvYWRpbmdcclxuICAgKlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBhc3luYyBsb2FkTGF6eU9iamVjdCgpOiBQcm9taXNlPFRIUkVFLk9iamVjdDNEPjtcclxuXHJcbiAgcHJvdGVjdGVkIGFmdGVySW5pdCgpIHtcclxuICAgIHN1cGVyLmFmdGVySW5pdCgpO1xyXG4gICAgdGhpcy5wYXJlbnRJbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICB0aGlzLnN0YXJ0TG9hZGluZygpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHN0YXJ0TG9hZGluZygpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdBYnN0cmFjdExhenlPYmplY3QzRC5zdGFydExvYWRpbmcnKTtcclxuICAgIC8vIFRyaWdnZXIgbW9kZWwgYWNxdWlzaXRpb24gbm93IHRoYXQgdGhlIHBhcmVudCBoYXMgYmVlbiBpbml0aWFsaXplZC5cclxuICAgIHRoaXMubG9hZExhenlPYmplY3QoKS50aGVuKG9iaiA9PiB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdBYnN0cmFjdExhenlPYmplY3QzRCBsb2FkZWQnKTtcclxuICAgICAgLy8gcmVtb3ZlIG9sZCBpZiBleGlzdHNcclxuICAgICAgaWYgKHRoaXMubGF6eU9iamVjdCkge1xyXG4gICAgICAgIHN1cGVyLnJlbW92ZUNoaWxkKHRoaXMubGF6eU9iamVjdCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGFkZCBsYXp5IG9iamVjdCB0byBzY2VuZVxyXG4gICAgICB0aGlzLmxhenlPYmplY3QgPSBvYmo7XHJcbiAgICAgIHN1cGVyLmFkZENoaWxkKG9iaik7XHJcblxyXG4gICAgICB0aGlzLnJlbmRlcmVyU2VydmljZS5yZW5kZXIoKTtcclxuICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5sYXp5T2JqZWN0KSB7XHJcbiAgICAgIHN1cGVyLnJlbW92ZUNoaWxkKHRoaXMubGF6eU9iamVjdCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbmV3T2JqZWN0M0RJbnN0YW5jZSgpOiBUSFJFRS5PYmplY3QzRCB7XHJcbiAgICAvLyBKdXN0IGVtcHR5IG9iamVjdCAoaG9sZGVyIG9mIGxhenkgb2JqZWN0KVxyXG4gICAgcmV0dXJuIG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19