/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { MapControls } from 'three/examples/jsm/controls/OrbitControls';
import { RendererService } from '../renderer/renderer.service';
import { AnimationService } from '../animation/animation.service';
import { RaycasterService } from '../raycaster/raycaster.service';
import { AbstractOrbitControls } from './abstract-orbit-controls';
var MapControlsComponent = /** @class */ (function (_super) {
    tslib_1.__extends(MapControlsComponent, _super);
    function MapControlsComponent(rendererService, raycasterService, animationService) {
        var _this = _super.call(this, rendererService, raycasterService) || this;
        _this.rendererService = rendererService;
        _this.raycasterService = raycasterService;
        _this.animationService = animationService;
        _this.rotateSpeed = 1.0;
        _this.zoomSpeed = 1.2;
        _this.autoRotate = false;
        _this.autoRotateSpeed = 0.5;
        _this.enableDamping = false;
        _this.dampingFactor = 0.1;
        _this.screenSpacePanning = false;
        _this.minDistance = 20;
        _this.maxDistance = 200;
        _this.maxPolarAngle = Math.PI / 2 - 0.1;
        _this.panSpeed = 1.2;
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    MapControlsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this.controls) {
            return;
        }
        _super.prototype.ngOnChanges.call(this, changes);
        if (changes['rotateSpeed']) {
            this.controls.rotateSpeed = this.rotateSpeed;
        }
        if (changes['zoomSpeed']) {
            this.controls.zoomSpeed = this.zoomSpeed;
        }
        // TODO: add others
    };
    /**
     * @protected
     * @return {?}
     */
    MapControlsComponent.prototype.setUpControls = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        this.controls = new MapControls(this.childCameras.first.camera, this.listeningControlElement && this.listeningControlElement.nativeElement);
        this.controls.rotateSpeed = this.rotateSpeed;
        this.controls.zoomSpeed = this.zoomSpeed;
        this.controls.panSpeed = this.panSpeed;
        this.controls.autoRotate = this.autoRotate;
        this.controls.autoRotateSpeed = this.autoRotateSpeed;
        this.controls.enableDamping = this.enableDamping; // an animation loop is required when either damping or auto-rotation are enabled
        this.controls.dampingFactor = this.dampingFactor;
        this.controls.screenSpacePanning = this.screenSpacePanning;
        this.controls.minDistance = this.minDistance;
        this.controls.maxDistance = this.maxDistance;
        this.controls.maxPolarAngle = this.maxPolarAngle;
        this.controls.update();
        // Advanced animation:
        if (this.autoRotate || this.enableDamping) {
            this.animationService.animate.subscribe((/**
             * @return {?}
             */
            function () {
                _this.controls.update();
            }));
            this.controls.addEventListener('change', (/**
             * @return {?}
             */
            function () {
                _this.rendererService.render();
            }));
            this.animationService.start();
        }
        this.rendererService.render();
    };
    MapControlsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-map-controls',
                    template: "\n      <ng-content></ng-content>",
                    styles: [":host{display:flex;flex:1}"]
                }] }
    ];
    /** @nocollapse */
    MapControlsComponent.ctorParameters = function () { return [
        { type: RendererService },
        { type: RaycasterService },
        { type: AnimationService }
    ]; };
    MapControlsComponent.propDecorators = {
        rotateSpeed: [{ type: Input }],
        zoomSpeed: [{ type: Input }],
        autoRotate: [{ type: Input }],
        autoRotateSpeed: [{ type: Input }],
        enableDamping: [{ type: Input }],
        dampingFactor: [{ type: Input }],
        screenSpacePanning: [{ type: Input }],
        minDistance: [{ type: Input }],
        maxDistance: [{ type: Input }],
        maxPolarAngle: [{ type: Input }],
        panSpeed: [{ type: Input }]
    };
    return MapControlsComponent;
}(AbstractOrbitControls));
export { MapControlsComponent };
if (false) {
    /** @type {?} */
    MapControlsComponent.prototype.rotateSpeed;
    /** @type {?} */
    MapControlsComponent.prototype.zoomSpeed;
    /** @type {?} */
    MapControlsComponent.prototype.autoRotate;
    /** @type {?} */
    MapControlsComponent.prototype.autoRotateSpeed;
    /** @type {?} */
    MapControlsComponent.prototype.enableDamping;
    /** @type {?} */
    MapControlsComponent.prototype.dampingFactor;
    /** @type {?} */
    MapControlsComponent.prototype.screenSpacePanning;
    /** @type {?} */
    MapControlsComponent.prototype.minDistance;
    /** @type {?} */
    MapControlsComponent.prototype.maxDistance;
    /** @type {?} */
    MapControlsComponent.prototype.maxPolarAngle;
    /** @type {?} */
    MapControlsComponent.prototype.panSpeed;
    /**
     * @type {?}
     * @protected
     */
    MapControlsComponent.prototype.rendererService;
    /**
     * @type {?}
     * @protected
     */
    MapControlsComponent.prototype.raycasterService;
    /**
     * @type {?}
     * @protected
     */
    MapControlsComponent.prototype.animationService;
}
//# sourceMappingURL=data:application/json;base64,