/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { RendererService } from '../renderer/renderer.service';
import { RaycasterService } from '../raycaster/raycaster.service';
import { AbstractOrbitControls } from './abstract-orbit-controls';
var OrbitControlsComponent = /** @class */ (function (_super) {
    tslib_1.__extends(OrbitControlsComponent, _super);
    function OrbitControlsComponent(rendererService, raycasterService) {
        var _this = _super.call(this, rendererService, raycasterService) || this;
        _this.rendererService = rendererService;
        _this.raycasterService = raycasterService;
        _this.rotateSpeed = 1.0;
        _this.zoomSpeed = 1.2;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    OrbitControlsComponent.prototype.setUpControls = /**
     * @protected
     * @return {?}
     */
    function () {
        this.controls = new OrbitControls(this.childCameras.first.camera, this.listeningControlElement && this.listeningControlElement.nativeElement);
        this.controls.rotateSpeed = this.rotateSpeed;
        this.controls.zoomSpeed = this.zoomSpeed;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    OrbitControlsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this.controls) {
            return;
        }
        _super.prototype.ngOnChanges.call(this, changes);
        if (changes['rotateSpeed']) {
            this.controls.rotateSpeed = this.rotateSpeed;
        }
        if (changes['zoomSpeed']) {
            this.controls.zoomSpeed = this.zoomSpeed;
        }
    };
    OrbitControlsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-orbit-controls',
                    template: "\n      <ng-content></ng-content>",
                    styles: [":host{display:flex;flex:1}"]
                }] }
    ];
    /** @nocollapse */
    OrbitControlsComponent.ctorParameters = function () { return [
        { type: RendererService },
        { type: RaycasterService }
    ]; };
    OrbitControlsComponent.propDecorators = {
        rotateSpeed: [{ type: Input }],
        zoomSpeed: [{ type: Input }]
    };
    return OrbitControlsComponent;
}(AbstractOrbitControls));
export { OrbitControlsComponent };
if (false) {
    /** @type {?} */
    OrbitControlsComponent.prototype.rotateSpeed;
    /** @type {?} */
    OrbitControlsComponent.prototype.zoomSpeed;
    /**
     * @type {?}
     * @protected
     */
    OrbitControlsComponent.prototype.rendererService;
    /**
     * @type {?}
     * @protected
     */
    OrbitControlsComponent.prototype.raycasterService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JiaXQtY29udHJvbHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXRmdC8iLCJzb3VyY2VzIjpbImxpYi9jb250cm9sL29yYml0LWNvbnRyb2xzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUEyQixNQUFNLGVBQWUsQ0FBQztBQUN6RSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sMkNBQTJDLENBQUM7QUFDeEUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQzdELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ2hFLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBRWhFO0lBTTRDLGtEQUFvQztJQUs5RSxnQ0FDWSxlQUFnQyxFQUNoQyxnQkFBa0M7UUFGOUMsWUFJRSxrQkFBTSxlQUFlLEVBQUUsZ0JBQWdCLENBQUMsU0FDekM7UUFKVyxxQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsc0JBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUxyQyxpQkFBVyxHQUFHLEdBQUcsQ0FBQztRQUNsQixlQUFTLEdBQUcsR0FBRyxDQUFDOztJQU96QixDQUFDOzs7OztJQUVTLDhDQUFhOzs7O0lBQXZCO1FBQ0UsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGFBQWEsQ0FDL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUM5QixJQUFJLENBQUMsdUJBQXVCLElBQUksSUFBSSxDQUFDLHVCQUF1QixDQUFDLGFBQWEsQ0FDM0UsQ0FBQztRQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMzQyxDQUFDOzs7OztJQUVELDRDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixPQUFPO1NBQ1I7UUFDRCxpQkFBTSxXQUFXLFlBQUMsT0FBTyxDQUFDLENBQUM7UUFFM0IsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUM5QztRQUNELElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDMUM7SUFDSCxDQUFDOztnQkF2Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFFBQVEsRUFBRSxtQ0FDb0I7O2lCQUUvQjs7OztnQkFUTyxlQUFlO2dCQUNmLGdCQUFnQjs7OzhCQVdyQixLQUFLOzRCQUNMLEtBQUs7O0lBaUNSLDZCQUFDO0NBQUEsQUExQ0QsQ0FNNEMscUJBQXFCLEdBb0NoRTtTQXBDWSxzQkFBc0I7OztJQUVqQyw2Q0FBMkI7O0lBQzNCLDJDQUF5Qjs7Ozs7SUFHdkIsaURBQTBDOzs7OztJQUMxQyxrREFBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlc30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7T3JiaXRDb250cm9sc30gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL2NvbnRyb2xzL09yYml0Q29udHJvbHMnO1xyXG5pbXBvcnQge1JlbmRlcmVyU2VydmljZX0gZnJvbSAnLi4vcmVuZGVyZXIvcmVuZGVyZXIuc2VydmljZSc7XHJcbmltcG9ydCB7UmF5Y2FzdGVyU2VydmljZX0gZnJvbSAnLi4vcmF5Y2FzdGVyL3JheWNhc3Rlci5zZXJ2aWNlJztcclxuaW1wb3J0IHtBYnN0cmFjdE9yYml0Q29udHJvbHN9IGZyb20gJy4vYWJzdHJhY3Qtb3JiaXQtY29udHJvbHMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhdGZ0LW9yYml0LWNvbnRyb2xzJyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcclxuICBzdHlsZVVybHM6IFsnY29udHJvbHMuY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgT3JiaXRDb250cm9sc0NvbXBvbmVudCBleHRlbmRzIEFic3RyYWN0T3JiaXRDb250cm9sczxPcmJpdENvbnRyb2xzPiBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcblxyXG4gIEBJbnB1dCgpIHJvdGF0ZVNwZWVkID0gMS4wO1xyXG4gIEBJbnB1dCgpIHpvb21TcGVlZCA9IDEuMjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2UsXHJcbiAgICBwcm90ZWN0ZWQgcmF5Y2FzdGVyU2VydmljZTogUmF5Y2FzdGVyU2VydmljZVxyXG4gICkge1xyXG4gICAgc3VwZXIocmVuZGVyZXJTZXJ2aWNlLCByYXljYXN0ZXJTZXJ2aWNlKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBzZXRVcENvbnRyb2xzKCkge1xyXG4gICAgdGhpcy5jb250cm9scyA9IG5ldyBPcmJpdENvbnRyb2xzKFxyXG4gICAgICB0aGlzLmNoaWxkQ2FtZXJhcy5maXJzdC5jYW1lcmEsXHJcbiAgICAgIHRoaXMubGlzdGVuaW5nQ29udHJvbEVsZW1lbnQgJiYgdGhpcy5saXN0ZW5pbmdDb250cm9sRWxlbWVudC5uYXRpdmVFbGVtZW50XHJcbiAgICApO1xyXG4gICAgdGhpcy5jb250cm9scy5yb3RhdGVTcGVlZCA9IHRoaXMucm90YXRlU3BlZWQ7XHJcbiAgICB0aGlzLmNvbnRyb2xzLnpvb21TcGVlZCA9IHRoaXMuem9vbVNwZWVkO1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKCF0aGlzLmNvbnRyb2xzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHN1cGVyLm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xyXG5cclxuICAgIGlmIChjaGFuZ2VzWydyb3RhdGVTcGVlZCddKSB7XHJcbiAgICAgIHRoaXMuY29udHJvbHMucm90YXRlU3BlZWQgPSB0aGlzLnJvdGF0ZVNwZWVkO1xyXG4gICAgfVxyXG4gICAgaWYgKGNoYW5nZXNbJ3pvb21TcGVlZCddKSB7XHJcbiAgICAgIHRoaXMuY29udHJvbHMuem9vbVNwZWVkID0gdGhpcy56b29tU3BlZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbn1cclxuIl19