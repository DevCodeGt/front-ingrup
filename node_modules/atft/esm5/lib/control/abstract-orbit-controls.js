/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChild, ContentChildren, QueryList } from '@angular/core';
import { AbstractCamera } from '../camera/abstract-camera';
import { RendererCanvasComponent } from '../renderer/renderer-canvas.component';
/**
 * @abstract
 * @template T
 */
var AbstractOrbitControls = /** @class */ (function () {
    function AbstractOrbitControls(rendererService, raycasterService) {
        this.rendererService = rendererService;
        this.raycasterService = raycasterService;
        // console.log('OrbitControlsComponent.constructor');
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    AbstractOrbitControls.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // If the THREE.js OrbitControls are not set up yet, we do not need to update
        // anything as they will pick the new values from the @Input properties automatically
        // upon creation.
        if (!this.controls) {
            return;
        }
        if (changes['listeningControlElement']) {
            // The DOM element the OrbitControls listen on cannot be changed once an
            // OrbitControls object is created. We thus need to recreate it.
            this.controls.dispose();
            this.setUpControls();
        }
    };
    /**
     * @return {?}
     */
    AbstractOrbitControls.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.controls) {
            this.controls.dispose();
        }
    };
    /**
     * @private
     * @return {?}
     */
    AbstractOrbitControls.prototype.configureListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.controls.addEventListener('change', (/**
         * @return {?}
         */
        function () {
            _this.rendererService.render();
        }));
        // don't raycast during rotation/damping/panning
        if (this.raycasterService.isEnabled) {
            this.controls.addEventListener('start', (/**
             * @return {?}
             */
            function () {
                _this.raycasterService.pause();
            }));
            this.controls.addEventListener('end', (/**
             * @return {?}
             */
            function () {
                _this.raycasterService.resume();
            }));
        }
    };
    /**
     * @return {?}
     */
    AbstractOrbitControls.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // console.log('OrbitControlsComponent.ngAfterViewInit');
        if (this.childCameras === undefined || this.childCameras.first === undefined) {
            throw new Error('Camera is not found');
        }
        if (!this.webGlRenderer) {
            throw new Error('webGlRenderer is not found');
        }
        this.listeningControlElement = this.webGlRenderer.renderPane;
        this.setUpControls();
        this.configureListeners();
        this.rendererService.render();
    };
    AbstractOrbitControls.propDecorators = {
        childCameras: [{ type: ContentChildren, args: [AbstractCamera, { descendants: true },] }],
        webGlRenderer: [{ type: ContentChild, args: [RendererCanvasComponent, { static: false },] }]
    };
    return AbstractOrbitControls;
}());
export { AbstractOrbitControls };
if (false) {
    /** @type {?} */
    AbstractOrbitControls.prototype.childCameras;
    /** @type {?} */
    AbstractOrbitControls.prototype.webGlRenderer;
    /**
     * The element on whose native element the orbit control will listen for mouse events.
     *
     * Note that keyboard events are still listened for on the global window object, this is
     * a known issue from Three.js: https://github.com/mrdoob/three.js/pull/10315
     * @type {?}
     * @protected
     */
    AbstractOrbitControls.prototype.listeningControlElement;
    /**
     * @type {?}
     * @protected
     */
    AbstractOrbitControls.prototype.controls;
    /**
     * @type {?}
     * @protected
     */
    AbstractOrbitControls.prototype.rendererService;
    /**
     * @type {?}
     * @protected
     */
    AbstractOrbitControls.prototype.raycasterService;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    AbstractOrbitControls.prototype.setUpControls = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3Qtb3JiaXQtY29udHJvbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hdGZ0LyIsInNvdXJjZXMiOlsibGliL2NvbnRyb2wvYWJzdHJhY3Qtb3JiaXQtY29udHJvbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBZ0IsWUFBWSxFQUFFLGVBQWUsRUFBb0MsU0FBUyxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUd2SSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFHekQsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sdUNBQXVDLENBQUM7Ozs7O0FBRzlFO0lBY0UsK0JBQ1ksZUFBZ0MsRUFDaEMsZ0JBQWtDO1FBRGxDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUNoQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBRTVDLHFEQUFxRDtJQUN2RCxDQUFDOzs7OztJQUVELDJDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUNoQyw2RUFBNkU7UUFDN0UscUZBQXFGO1FBQ3JGLGlCQUFpQjtRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixPQUFPO1NBQ1I7UUFFRCxJQUFJLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFO1lBQ3RDLHdFQUF3RTtZQUN4RSxnRUFBZ0U7WUFDaEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN4QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdEI7SUFDSCxDQUFDOzs7O0lBRUQsMkNBQVc7OztJQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDekI7SUFDSCxDQUFDOzs7OztJQUtPLGtEQUFrQjs7OztJQUExQjtRQUFBLGlCQWNDO1FBYkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFROzs7UUFBRTtZQUN2QyxLQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLENBQUMsRUFBQyxDQUFDO1FBRUgsZ0RBQWdEO1FBQ2hELElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRTtZQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU87OztZQUFFO2dCQUN0QyxLQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDaEMsQ0FBQyxFQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEtBQUs7OztZQUFFO2dCQUNwQyxLQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDakMsQ0FBQyxFQUFDLENBQUM7U0FDSjtJQUNILENBQUM7Ozs7SUFFRCwrQ0FBZTs7O0lBQWY7UUFDRSx5REFBeUQ7UUFDekQsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDNUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDO1FBQzdELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hDLENBQUM7OytCQXhFQSxlQUFlLFNBQUMsY0FBYyxFQUFFLEVBQUMsV0FBVyxFQUFFLElBQUksRUFBQztnQ0FDbkQsWUFBWSxTQUFDLHVCQUF1QixFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQzs7SUF5RXhELDRCQUFDO0NBQUEsQUE1RUQsSUE0RUM7U0E1RXFCLHFCQUFxQjs7O0lBRXpDLDZDQUE0Rzs7SUFDNUcsOENBQStGOzs7Ozs7Ozs7SUFPL0Ysd0RBQThDOzs7OztJQUU5Qyx5Q0FBc0I7Ozs7O0lBR3BCLGdEQUEwQzs7Ozs7SUFDMUMsaURBQTRDOzs7Ozs7SUEyQjlDLGdFQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJWaWV3SW5pdCwgQ29udGVudENoaWxkLCBDb250ZW50Q2hpbGRyZW4sIEVsZW1lbnRSZWYsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBRdWVyeUxpc3QsIFNpbXBsZUNoYW5nZXN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCB7T3JiaXRDb250cm9sc30gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL2NvbnRyb2xzL09yYml0Q29udHJvbHMnO1xyXG5pbXBvcnQge0Fic3RyYWN0Q2FtZXJhfSBmcm9tICcuLi9jYW1lcmEvYWJzdHJhY3QtY2FtZXJhJztcclxuaW1wb3J0IHtSZW5kZXJlclNlcnZpY2V9IGZyb20gJy4uL3JlbmRlcmVyL3JlbmRlcmVyLnNlcnZpY2UnO1xyXG5pbXBvcnQge1JheWNhc3RlclNlcnZpY2V9IGZyb20gJy4uL3JheWNhc3Rlci9yYXljYXN0ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7UmVuZGVyZXJDYW52YXNDb21wb25lbnR9IGZyb20gJy4uL3JlbmRlcmVyL3JlbmRlcmVyLWNhbnZhcy5jb21wb25lbnQnO1xyXG5cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdE9yYml0Q29udHJvbHM8VCBleHRlbmRzIE9yYml0Q29udHJvbHM+IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG5cclxuICBAQ29udGVudENoaWxkcmVuKEFic3RyYWN0Q2FtZXJhLCB7ZGVzY2VuZGFudHM6IHRydWV9KSBjaGlsZENhbWVyYXM6IFF1ZXJ5TGlzdDxBYnN0cmFjdENhbWVyYTxUSFJFRS5DYW1lcmE+PjtcclxuICBAQ29udGVudENoaWxkKFJlbmRlcmVyQ2FudmFzQ29tcG9uZW50LCB7c3RhdGljOiBmYWxzZX0pIHdlYkdsUmVuZGVyZXI6IFJlbmRlcmVyQ2FudmFzQ29tcG9uZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoZSBlbGVtZW50IG9uIHdob3NlIG5hdGl2ZSBlbGVtZW50IHRoZSBvcmJpdCBjb250cm9sIHdpbGwgbGlzdGVuIGZvciBtb3VzZSBldmVudHMuXHJcbiAgICpcclxuICAgKiBOb3RlIHRoYXQga2V5Ym9hcmQgZXZlbnRzIGFyZSBzdGlsbCBsaXN0ZW5lZCBmb3Igb24gdGhlIGdsb2JhbCB3aW5kb3cgb2JqZWN0LCB0aGlzIGlzXHJcbiAgICogYSBrbm93biBpc3N1ZSBmcm9tIFRocmVlLmpzOiBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL3B1bGwvMTAzMTVcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgbGlzdGVuaW5nQ29udHJvbEVsZW1lbnQ6IEVsZW1lbnRSZWY7XHJcblxyXG4gIHByb3RlY3RlZCBjb250cm9sczogVDtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJTZXJ2aWNlOiBSZW5kZXJlclNlcnZpY2UsXHJcbiAgICBwcm90ZWN0ZWQgcmF5Y2FzdGVyU2VydmljZTogUmF5Y2FzdGVyU2VydmljZVxyXG4gICkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ09yYml0Q29udHJvbHNDb21wb25lbnQuY29uc3RydWN0b3InKTtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgIC8vIElmIHRoZSBUSFJFRS5qcyBPcmJpdENvbnRyb2xzIGFyZSBub3Qgc2V0IHVwIHlldCwgd2UgZG8gbm90IG5lZWQgdG8gdXBkYXRlXHJcbiAgICAvLyBhbnl0aGluZyBhcyB0aGV5IHdpbGwgcGljayB0aGUgbmV3IHZhbHVlcyBmcm9tIHRoZSBASW5wdXQgcHJvcGVydGllcyBhdXRvbWF0aWNhbGx5XHJcbiAgICAvLyB1cG9uIGNyZWF0aW9uLlxyXG4gICAgaWYgKCF0aGlzLmNvbnRyb2xzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY2hhbmdlc1snbGlzdGVuaW5nQ29udHJvbEVsZW1lbnQnXSkge1xyXG4gICAgICAvLyBUaGUgRE9NIGVsZW1lbnQgdGhlIE9yYml0Q29udHJvbHMgbGlzdGVuIG9uIGNhbm5vdCBiZSBjaGFuZ2VkIG9uY2UgYW5cclxuICAgICAgLy8gT3JiaXRDb250cm9scyBvYmplY3QgaXMgY3JlYXRlZC4gV2UgdGh1cyBuZWVkIHRvIHJlY3JlYXRlIGl0LlxyXG4gICAgICB0aGlzLmNvbnRyb2xzLmRpc3Bvc2UoKTtcclxuICAgICAgdGhpcy5zZXRVcENvbnRyb2xzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIGlmICh0aGlzLmNvbnRyb2xzKSB7XHJcbiAgICAgIHRoaXMuY29udHJvbHMuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHNldFVwQ29udHJvbHMoKTtcclxuXHJcblxyXG4gIHByaXZhdGUgY29uZmlndXJlTGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5jb250cm9scy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMucmVuZGVyZXJTZXJ2aWNlLnJlbmRlcigpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gZG9uJ3QgcmF5Y2FzdCBkdXJpbmcgcm90YXRpb24vZGFtcGluZy9wYW5uaW5nXHJcbiAgICBpZiAodGhpcy5yYXljYXN0ZXJTZXJ2aWNlLmlzRW5hYmxlZCkge1xyXG4gICAgICB0aGlzLmNvbnRyb2xzLmFkZEV2ZW50TGlzdGVuZXIoJ3N0YXJ0JywgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMucmF5Y2FzdGVyU2VydmljZS5wYXVzZSgpO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5jb250cm9scy5hZGRFdmVudExpc3RlbmVyKCdlbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5yYXljYXN0ZXJTZXJ2aWNlLnJlc3VtZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdPcmJpdENvbnRyb2xzQ29tcG9uZW50Lm5nQWZ0ZXJWaWV3SW5pdCcpO1xyXG4gICAgaWYgKHRoaXMuY2hpbGRDYW1lcmFzID09PSB1bmRlZmluZWQgfHwgdGhpcy5jaGlsZENhbWVyYXMuZmlyc3QgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbWVyYSBpcyBub3QgZm91bmQnKTtcclxuICAgIH1cclxuICAgIGlmICghdGhpcy53ZWJHbFJlbmRlcmVyKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignd2ViR2xSZW5kZXJlciBpcyBub3QgZm91bmQnKTtcclxuICAgIH1cclxuICAgIHRoaXMubGlzdGVuaW5nQ29udHJvbEVsZW1lbnQgPSB0aGlzLndlYkdsUmVuZGVyZXIucmVuZGVyUGFuZTtcclxuICAgIHRoaXMuc2V0VXBDb250cm9scygpO1xyXG4gICAgdGhpcy5jb25maWd1cmVMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMucmVuZGVyZXJTZXJ2aWNlLnJlbmRlcigpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19