/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as THREE from 'three';
var RaycasterService = /** @class */ (function () {
    function RaycasterService() {
        this.raycaster = new THREE.Raycaster();
        this.enabled = false;
        this.groups = [];
        this.paused = false;
        this.onMouseMove = this.onMouseMove.bind(this);
        this.onMouseDown = this.onMouseDown.bind(this);
        this.onTouchStart = this.onTouchStart.bind(this);
        this.subscribe();
    }
    /**
     * @return {?}
     */
    RaycasterService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.disable();
        this.unsubscribe();
    };
    /**
     * @private
     * @return {?}
     */
    RaycasterService.prototype.subscribe = /**
     * @private
     * @return {?}
     */
    function () {
        window.addEventListener('mousemove', this.onMouseMove);
        window.addEventListener('mousedown', this.onMouseDown);
        window.addEventListener('touchstart', this.onTouchStart);
    };
    /**
     * @private
     * @return {?}
     */
    RaycasterService.prototype.unsubscribe = /**
     * @private
     * @return {?}
     */
    function () {
        // console.log('unsubscribe raycaster');
        window.removeEventListener('mousemove', this.onMouseMove);
        window.removeEventListener('mousedown', this.onMouseDown);
        window.removeEventListener('touchstart', this.onTouchStart);
    };
    /**
     * @return {?}
     */
    RaycasterService.prototype.enable = /**
     * @return {?}
     */
    function () {
        this.enabled = true;
    };
    /**
     * @return {?}
     */
    RaycasterService.prototype.disable = /**
     * @return {?}
     */
    function () {
        this.enabled = false;
    };
    /**
     * @return {?}
     */
    RaycasterService.prototype.pause = /**
     * @return {?}
     */
    function () {
        this.paused = true;
    };
    /**
     * @return {?}
     */
    RaycasterService.prototype.resume = /**
     * @return {?}
     */
    function () {
        this.paused = false;
    };
    Object.defineProperty(RaycasterService.prototype, "isEnabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.enabled;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} camera
     * @return {?}
     */
    RaycasterService.prototype.setCamera = /**
     * @param {?} camera
     * @return {?}
     */
    function (camera) {
        // console.log('Add camera to raycaster', camera);
        this.camera = camera;
    };
    /**
     * @param {?} group
     * @return {?}
     */
    RaycasterService.prototype.addGroup = /**
     * @param {?} group
     * @return {?}
     */
    function (group) {
        // console.log('RaycasterService.addGroup', group.name, group);
        this.groups.push(group);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RaycasterService.prototype.onMouseMove = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.isReady()) {
            return;
        }
        event.preventDefault();
        /** @type {?} */
        var i = this.getFirstIntersectedGroup(event.layerX, event.layerY);
        if (!this.selected || this.selected !== i) {
            if (this.selected) {
                this.selected.dispatchEvent({ type: 'mouseExit' });
                this.selected = null;
            }
            if (i) {
                this.selected = i;
                // console.log('RaycasterService.mouseEnter', i);
                this.selected.dispatchEvent({ type: 'mouseEnter' });
            }
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RaycasterService.prototype.onMouseDown = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.isReady(true)) {
            return;
        }
        event.preventDefault();
        /** @type {?} */
        var i = this.getFirstIntersectedGroup(event.layerX, event.layerY);
        if (i) {
            i.dispatchEvent({ type: 'mouseDown' });
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RaycasterService.prototype.onTouchStart = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // console.log(event);
        if (!this.isReady()) {
            return;
        }
        event.preventDefault();
        /** @type {?} */
        var i = this.getFirstIntersectedGroup(event.touches[0].clientX, event.touches[0].clientY);
        if (i) {
            i.dispatchEvent({ type: 'mouseDown' });
        }
    };
    /**
     * @private
     * @param {?=} ignorePaused
     * @return {?}
     */
    RaycasterService.prototype.isReady = /**
     * @private
     * @param {?=} ignorePaused
     * @return {?}
     */
    function (ignorePaused) {
        return this.enabled
            && (ignorePaused || !this.paused)
            && this.camera
            && this.camera.camera
            && this.groups
            && this.groups.length > 0;
    };
    /**
     * @private
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    RaycasterService.prototype.getFirstIntersectedGroup = /**
     * @private
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    function (x, y) {
        x = (x / window.innerWidth) * 2 - 1;
        y = -(y / window.innerHeight) * 2 + 1;
        /** @type {?} */
        var mouseVector = new THREE.Vector3(x, y, 0.5);
        this.raycaster.setFromCamera(mouseVector, this.camera.camera);
        // loop across all groups. Try to find the group with nearest distance.
        /** @type {?} */
        var nearestIntersection;
        /** @type {?} */
        var nearestGroup;
        for (var k = 0; k < this.groups.length; k++) {
            /** @type {?} */
            var i = this.groups[k].getObject();
            /** @type {?} */
            var intersection = this.raycaster.intersectObject(i, true);
            if (intersection.length > 0 && (!nearestIntersection || nearestIntersection.distance > intersection[0].distance)) {
                nearestIntersection = intersection[0];
                nearestGroup = i;
            }
        }
        // return the group with nearest distance
        if (nearestGroup) {
            return nearestGroup;
        }
        else {
            return;
        }
    };
    RaycasterService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RaycasterService.ctorParameters = function () { return []; };
    return RaycasterService;
}());
export { RaycasterService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RaycasterService.prototype.raycaster;
    /**
     * @type {?}
     * @private
     */
    RaycasterService.prototype.selected;
    /**
     * @type {?}
     * @private
     */
    RaycasterService.prototype.enabled;
    /**
     * @type {?}
     * @private
     */
    RaycasterService.prototype.camera;
    /**
     * @type {?}
     * @private
     */
    RaycasterService.prototype.groups;
    /**
     * @type {?}
     * @private
     */
    RaycasterService.prototype.paused;
}
//# sourceMappingURL=data:application/json;base64,