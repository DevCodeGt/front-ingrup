/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, Output } from '@angular/core';
import { AbstractObject3D } from '../object/abstract-object-3d';
import { RaycasterService } from './raycaster.service';
/**
 * Only components marked as atft-raycaster-group emit raycaster events.
 * NOTE: All childs are also considered by raycaster (very usefull, for composite components).
 */
var RaycasterGroupDirective = /** @class */ (function () {
    function RaycasterGroupDirective(host, raycasterService) {
        this.host = host;
        this.raycasterService = raycasterService;
        this.mouseEnter = new EventEmitter();
        this.mouseExit = new EventEmitter();
        this.mouseDown = new EventEmitter();
        this.onMouseEnter = this.onMouseEnter.bind(this);
        this.onMouseExit = this.onMouseExit.bind(this);
        this.onMouseDown = this.onMouseDown.bind(this);
    }
    /**
     * @return {?}
     */
    RaycasterGroupDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.raycasterService.addGroup(this.host);
        this.subscribeEvents();
    };
    /**
     * @private
     * @return {?}
     */
    RaycasterGroupDirective.prototype.subscribeEvents = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = this.host.getObject();
        obj.addEventListener('mouseEnter', this.onMouseEnter);
        obj.addEventListener('mouseExit', this.onMouseExit);
        obj.addEventListener('mouseDown', this.onMouseDown);
    };
    /**
     * @private
     * @return {?}
     */
    RaycasterGroupDirective.prototype.unSubscribeEvents = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = this.host.getObject();
        obj.removeEventListener('mouseEnter', this.onMouseEnter);
        obj.removeEventListener('mouseExit', this.onMouseExit);
        obj.removeEventListener('mouseDown', this.onMouseDown);
    };
    /**
     * @private
     * @return {?}
     */
    RaycasterGroupDirective.prototype.onMouseExit = /**
     * @private
     * @return {?}
     */
    function () {
        this.mouseExit.emit();
    };
    /**
     * @private
     * @return {?}
     */
    RaycasterGroupDirective.prototype.onMouseEnter = /**
     * @private
     * @return {?}
     */
    function () {
        this.mouseEnter.emit();
    };
    /**
     * @private
     * @return {?}
     */
    RaycasterGroupDirective.prototype.onMouseDown = /**
     * @private
     * @return {?}
     */
    function () {
        this.mouseDown.emit();
    };
    /**
     * @return {?}
     */
    RaycasterGroupDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unSubscribeEvents();
    };
    RaycasterGroupDirective.decorators = [
        { type: Directive, args: [{ selector: '[atft-raycaster-group]' },] }
    ];
    /** @nocollapse */
    RaycasterGroupDirective.ctorParameters = function () { return [
        { type: AbstractObject3D },
        { type: RaycasterService }
    ]; };
    RaycasterGroupDirective.propDecorators = {
        mouseEnter: [{ type: Output }],
        mouseExit: [{ type: Output }],
        mouseDown: [{ type: Output }]
    };
    return RaycasterGroupDirective;
}());
export { RaycasterGroupDirective };
if (false) {
    /** @type {?} */
    RaycasterGroupDirective.prototype.mouseEnter;
    /** @type {?} */
    RaycasterGroupDirective.prototype.mouseExit;
    /** @type {?} */
    RaycasterGroupDirective.prototype.mouseDown;
    /**
     * @type {?}
     * @private
     */
    RaycasterGroupDirective.prototype.host;
    /**
     * @type {?}
     * @private
     */
    RaycasterGroupDirective.prototype.raycasterService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF5Y2FzdGVyLWdyb3VwLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2F0ZnQvIiwic291cmNlcyI6WyJsaWIvcmF5Y2FzdGVyL3JheWNhc3Rlci1ncm91cC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBZ0IsU0FBUyxFQUFFLFlBQVksRUFBYSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDOUQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0scUJBQXFCLENBQUM7Ozs7O0FBTXJEO0lBT0UsaUNBQ1UsSUFBMkIsRUFDM0IsZ0JBQWtDO1FBRGxDLFNBQUksR0FBSixJQUFJLENBQXVCO1FBQzNCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFObEMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFDdEMsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFDckMsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFNN0MsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQzs7OztJQUVELGlEQUFlOzs7SUFBZjtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7OztJQUVPLGlEQUFlOzs7O0lBQXZCOztZQUNRLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNqQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN0RCxHQUFHLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNwRCxHQUFHLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0RCxDQUFDOzs7OztJQUVPLG1EQUFpQjs7OztJQUF6Qjs7WUFDUSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDakMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDekQsR0FBRyxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkQsR0FBRyxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDekQsQ0FBQzs7Ozs7SUFFTyw2Q0FBVzs7OztJQUFuQjtRQUNFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFFTyw4Q0FBWTs7OztJQUFwQjtRQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekIsQ0FBQzs7Ozs7SUFFTyw2Q0FBVzs7OztJQUFuQjtRQUNFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7OztJQUVELDZDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7O2dCQWpERixTQUFTLFNBQUMsRUFBQyxRQUFRLEVBQUUsd0JBQXdCLEVBQUM7Ozs7Z0JBUHZDLGdCQUFnQjtnQkFDaEIsZ0JBQWdCOzs7NkJBU3JCLE1BQU07NEJBQ04sTUFBTTs0QkFDTixNQUFNOztJQThDVCw4QkFBQztDQUFBLEFBbkRELElBbURDO1NBbERZLHVCQUF1Qjs7O0lBRWxDLDZDQUFnRDs7SUFDaEQsNENBQStDOztJQUMvQyw0Q0FBK0M7Ozs7O0lBRzdDLHVDQUFtQzs7Ozs7SUFDbkMsbURBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0Fic3RyYWN0T2JqZWN0M0R9IGZyb20gJy4uL29iamVjdC9hYnN0cmFjdC1vYmplY3QtM2QnO1xyXG5pbXBvcnQge1JheWNhc3RlclNlcnZpY2V9IGZyb20gJy4vcmF5Y2FzdGVyLnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIE9ubHkgY29tcG9uZW50cyBtYXJrZWQgYXMgYXRmdC1yYXljYXN0ZXItZ3JvdXAgZW1pdCByYXljYXN0ZXIgZXZlbnRzLlxyXG4gKiBOT1RFOiBBbGwgY2hpbGRzIGFyZSBhbHNvIGNvbnNpZGVyZWQgYnkgcmF5Y2FzdGVyICh2ZXJ5IHVzZWZ1bGwsIGZvciBjb21wb3NpdGUgY29tcG9uZW50cykuXHJcbiAqL1xyXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ1thdGZ0LXJheWNhc3Rlci1ncm91cF0nfSlcclxuZXhwb3J0IGNsYXNzIFJheWNhc3Rlckdyb3VwRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgQE91dHB1dCgpIG1vdXNlRW50ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcbiAgQE91dHB1dCgpIG1vdXNlRXhpdCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuICBAT3V0cHV0KCkgbW91c2VEb3duID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaG9zdDogQWJzdHJhY3RPYmplY3QzRDxhbnk+LFxyXG4gICAgcHJpdmF0ZSByYXljYXN0ZXJTZXJ2aWNlOiBSYXljYXN0ZXJTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICB0aGlzLm9uTW91c2VFbnRlciA9IHRoaXMub25Nb3VzZUVudGVyLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLm9uTW91c2VFeGl0ID0gdGhpcy5vbk1vdXNlRXhpdC5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5vbk1vdXNlRG93biA9IHRoaXMub25Nb3VzZURvd24uYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMucmF5Y2FzdGVyU2VydmljZS5hZGRHcm91cCh0aGlzLmhvc3QpO1xyXG4gICAgdGhpcy5zdWJzY3JpYmVFdmVudHMoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3Vic2NyaWJlRXZlbnRzKCkge1xyXG4gICAgY29uc3Qgb2JqID0gdGhpcy5ob3N0LmdldE9iamVjdCgpO1xyXG4gICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlRW50ZXInLCB0aGlzLm9uTW91c2VFbnRlcik7XHJcbiAgICBvYmouYWRkRXZlbnRMaXN0ZW5lcignbW91c2VFeGl0JywgdGhpcy5vbk1vdXNlRXhpdCk7XHJcbiAgICBvYmouYWRkRXZlbnRMaXN0ZW5lcignbW91c2VEb3duJywgdGhpcy5vbk1vdXNlRG93bik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVuU3Vic2NyaWJlRXZlbnRzKCkge1xyXG4gICAgY29uc3Qgb2JqID0gdGhpcy5ob3N0LmdldE9iamVjdCgpO1xyXG4gICAgb2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlRW50ZXInLCB0aGlzLm9uTW91c2VFbnRlcik7XHJcbiAgICBvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VFeGl0JywgdGhpcy5vbk1vdXNlRXhpdCk7XHJcbiAgICBvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VEb3duJywgdGhpcy5vbk1vdXNlRG93bik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9uTW91c2VFeGl0KCkge1xyXG4gICAgdGhpcy5tb3VzZUV4aXQuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBvbk1vdXNlRW50ZXIoKSB7XHJcbiAgICB0aGlzLm1vdXNlRW50ZXIuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBvbk1vdXNlRG93bigpIHtcclxuICAgIHRoaXMubW91c2VEb3duLmVtaXQoKTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy51blN1YnNjcmliZUV2ZW50cygpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19