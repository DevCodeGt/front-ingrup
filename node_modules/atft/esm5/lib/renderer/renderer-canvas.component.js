/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, HostListener, ViewChild } from '@angular/core';
import { RendererService } from './renderer.service';
var RendererCanvasComponent = /** @class */ (function () {
    function RendererCanvasComponent(rendererService) {
        this.rendererService = rendererService;
        // console.log('RendererComponent.constructor');
        this.onResize = this.onResize.bind(this);
    }
    /**
     * @return {?}
     */
    RendererCanvasComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // console.log('RendererComponent.ngAfterViewInit');
        this.rendererService.initialize(this.canvas);
    };
    Object.defineProperty(RendererCanvasComponent.prototype, "renderPane", {
        /**
         * The render pane on which the scene is rendered.
         * Currently, only the WebGL renderer with a canvas is used in this
         * implementation, so this property will always be an ElementRef to the
         * underlying <canvas> element.
         *
         * @example This property can be used to restrict the orbit control (i.e. the
         * area which is listened for mouse move and zoom events) to the rendering pane
         */
        get: /**
         * The render pane on which the scene is rendered.
         * Currently, only the WebGL renderer with a canvas is used in this
         * implementation, so this property will always be an ElementRef to the
         * underlying <canvas> element.
         *
         * \@example This property can be used to restrict the orbit control (i.e. the
         * area which is listened for mouse move and zoom events) to the rendering pane
         * @return {?}
         */
        function () {
            return this.canvasRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RendererCanvasComponent.prototype, "canvas", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.canvasRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    RendererCanvasComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // strange, but single 100% resizing has unexpected behaviour with flex CSS
        // as workaround - resettling to 100 pixels, then to 100%
        this.rendererService.resize(this.canvas, '100px');
        this.rendererService.resize(this.canvas, '100%');
    };
    RendererCanvasComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-renderer-canvas',
                    template: "<canvas #canvas>\r\n  <ng-content></ng-content>\r\n</canvas>\r\n",
                    styles: [":host{display:flex;flex:1}canvas{flex:1}"]
                }] }
    ];
    /** @nocollapse */
    RendererCanvasComponent.ctorParameters = function () { return [
        { type: RendererService }
    ]; };
    RendererCanvasComponent.propDecorators = {
        canvasRef: [{ type: ViewChild, args: ['canvas', { static: true },] }],
        onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
    };
    return RendererCanvasComponent;
}());
export { RendererCanvasComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RendererCanvasComponent.prototype.canvasRef;
    /**
     * @type {?}
     * @private
     */
    RendererCanvasComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXItY2FudmFzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2F0ZnQvIiwic291cmNlcyI6WyJsaWIvcmVuZGVyZXIvcmVuZGVyZXItY2FudmFzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFnQixTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRW5EO0lBVUUsaUNBQ1UsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBRXhDLGdEQUFnRDtRQUNoRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUM7Ozs7SUFFRCxpREFBZTs7O0lBQWY7UUFDRSxvREFBb0Q7UUFDcEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFXRCxzQkFBVywrQ0FBVTtRQVRyQjs7Ozs7Ozs7V0FRRzs7Ozs7Ozs7Ozs7UUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDOzs7T0FBQTtJQUVELHNCQUFZLDJDQUFNOzs7OztRQUFsQjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7UUFDdEMsQ0FBQzs7O09BQUE7Ozs7O0lBR00sMENBQVE7Ozs7SUFEZixVQUNnQixLQUFZO1FBQzFCLDJFQUEyRTtRQUMzRSx5REFBeUQ7UUFDekQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25ELENBQUM7O2dCQTdDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsNEVBQStDOztpQkFFaEQ7Ozs7Z0JBTk8sZUFBZTs7OzRCQVNwQixTQUFTLFNBQUMsUUFBUSxFQUFFLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQzsyQkFnQ2xDLFlBQVksU0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBUTNDLDhCQUFDO0NBQUEsQUEvQ0QsSUErQ0M7U0ExQ1ksdUJBQXVCOzs7Ozs7SUFFbEMsNENBQzhCOzs7OztJQUc1QixrREFBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyLCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1JlbmRlcmVyU2VydmljZX0gZnJvbSAnLi9yZW5kZXJlci5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXRmdC1yZW5kZXJlci1jYW52YXMnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9yZW5kZXJlci1jYW52YXMuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3JlbmRlcmVyLWNhbnZhcy5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSZW5kZXJlckNhbnZhc0NvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xyXG5cclxuICBAVmlld0NoaWxkKCdjYW52YXMnLCB7c3RhdGljOiB0cnVlfSlcclxuICBwcml2YXRlIGNhbnZhc1JlZjogRWxlbWVudFJlZjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHJlbmRlcmVyU2VydmljZTogUmVuZGVyZXJTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnUmVuZGVyZXJDb21wb25lbnQuY29uc3RydWN0b3InKTtcclxuICAgIHRoaXMub25SZXNpemUgPSB0aGlzLm9uUmVzaXplLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnUmVuZGVyZXJDb21wb25lbnQubmdBZnRlclZpZXdJbml0Jyk7XHJcbiAgICB0aGlzLnJlbmRlcmVyU2VydmljZS5pbml0aWFsaXplKHRoaXMuY2FudmFzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSByZW5kZXIgcGFuZSBvbiB3aGljaCB0aGUgc2NlbmUgaXMgcmVuZGVyZWQuXHJcbiAgICogQ3VycmVudGx5LCBvbmx5IHRoZSBXZWJHTCByZW5kZXJlciB3aXRoIGEgY2FudmFzIGlzIHVzZWQgaW4gdGhpc1xyXG4gICAqIGltcGxlbWVudGF0aW9uLCBzbyB0aGlzIHByb3BlcnR5IHdpbGwgYWx3YXlzIGJlIGFuIEVsZW1lbnRSZWYgdG8gdGhlXHJcbiAgICogdW5kZXJseWluZyA8Y2FudmFzPiBlbGVtZW50LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGUgVGhpcyBwcm9wZXJ0eSBjYW4gYmUgdXNlZCB0byByZXN0cmljdCB0aGUgb3JiaXQgY29udHJvbCAoaS5lLiB0aGVcclxuICAgKiBhcmVhIHdoaWNoIGlzIGxpc3RlbmVkIGZvciBtb3VzZSBtb3ZlIGFuZCB6b29tIGV2ZW50cykgdG8gdGhlIHJlbmRlcmluZyBwYW5lXHJcbiAgICovXHJcbiAgcHVibGljIGdldCByZW5kZXJQYW5lKCk6IEVsZW1lbnRSZWYge1xyXG4gICAgcmV0dXJuIHRoaXMuY2FudmFzUmVmO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXQgY2FudmFzKCk6IEhUTUxDYW52YXNFbGVtZW50IHtcclxuICAgIHJldHVybiB0aGlzLmNhbnZhc1JlZi5uYXRpdmVFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OnJlc2l6ZScsIFsnJGV2ZW50J10pXHJcbiAgcHVibGljIG9uUmVzaXplKGV2ZW50OiBFdmVudCkge1xyXG4gICAgLy8gc3RyYW5nZSwgYnV0IHNpbmdsZSAxMDAlIHJlc2l6aW5nIGhhcyB1bmV4cGVjdGVkIGJlaGF2aW91ciB3aXRoIGZsZXggQ1NTXHJcbiAgICAvLyBhcyB3b3JrYXJvdW5kIC0gcmVzZXR0bGluZyB0byAxMDAgcGl4ZWxzLCB0aGVuIHRvIDEwMCVcclxuICAgIHRoaXMucmVuZGVyZXJTZXJ2aWNlLnJlc2l6ZSh0aGlzLmNhbnZhcywgJzEwMHB4Jyk7XHJcbiAgICB0aGlzLnJlbmRlcmVyU2VydmljZS5yZXNpemUodGhpcy5jYW52YXMsICcxMDAlJyk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=