/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import { AbstractCamera } from './abstract-camera';
import * as THREE from 'three';
import { RendererService } from '../renderer/renderer.service';
var PerspectiveCameraComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PerspectiveCameraComponent, _super);
    function PerspectiveCameraComponent(rendererService) {
        var _this = _super.call(this, rendererService) || this;
        _this.rendererService = rendererService;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    PerspectiveCameraComponent.prototype.createCamera = /**
     * @protected
     * @return {?}
     */
    function () {
        // console.log('PerspectiveCameraComponent.createCamera');
        // let aspectRatio = undefined; // Updated later
        this.camera = new THREE.PerspectiveCamera(this.fov, undefined, this.near, this.far);
    };
    /**
     * @param {?} aspect
     * @return {?}
     */
    PerspectiveCameraComponent.prototype.updateAspectRatio = /**
     * @param {?} aspect
     * @return {?}
     */
    function (aspect) {
        // console.log('PerspectiveCameraComponent.updateAspectRatio: ' + aspect);
        this.camera.aspect = aspect;
        this.camera.updateProjectionMatrix();
    };
    PerspectiveCameraComponent.decorators = [
        { type: Component, args: [{
                    selector: 'atft-perspective-camera',
                    providers: [{ provide: AbstractCamera, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PerspectiveCameraComponent; })) }],
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    PerspectiveCameraComponent.ctorParameters = function () { return [
        { type: RendererService }
    ]; };
    PerspectiveCameraComponent.propDecorators = {
        fov: [{ type: Input }],
        near: [{ type: Input }],
        far: [{ type: Input }]
    };
    return PerspectiveCameraComponent;
}(AbstractCamera));
export { PerspectiveCameraComponent };
if (false) {
    /** @type {?} */
    PerspectiveCameraComponent.prototype.fov;
    /** @type {?} */
    PerspectiveCameraComponent.prototype.near;
    /** @type {?} */
    PerspectiveCameraComponent.prototype.far;
    /**
     * @type {?}
     * @protected
     */
    PerspectiveCameraComponent.prototype.rendererService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc3BlY3RpdmUtY2FtZXJhLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2F0ZnQvIiwic291cmNlcyI6WyJsaWIvY2FtZXJhL3BlcnNwZWN0aXZlLWNhbWVyYS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ2pELE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUU3RDtJQUtnRCxzREFBdUM7SUFNckYsb0NBQ1ksZUFBZ0M7UUFENUMsWUFHRSxrQkFBTSxlQUFlLENBQUMsU0FDdkI7UUFIVyxxQkFBZSxHQUFmLGVBQWUsQ0FBaUI7O0lBRzVDLENBQUM7Ozs7O0lBRVMsaURBQVk7Ozs7SUFBdEI7UUFDRSwwREFBMEQ7UUFDMUQsZ0RBQWdEO1FBQ2hELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQ3ZDLElBQUksQ0FBQyxHQUFHLEVBQ1IsU0FBUyxFQUNULElBQUksQ0FBQyxJQUFJLEVBQ1QsSUFBSSxDQUFDLEdBQUcsQ0FDVCxDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFTSxzREFBaUI7Ozs7SUFBeEIsVUFBeUIsTUFBYztRQUNyQywwRUFBMEU7UUFDMUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUN2QyxDQUFDOztnQkFoQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsVUFBVTs7OzRCQUFDLGNBQU0sT0FBQSwwQkFBMEIsRUFBMUIsQ0FBMEIsRUFBQyxFQUFDLENBQUM7b0JBQ2pHLFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3RDOzs7O2dCQU5PLGVBQWU7OztzQkFTcEIsS0FBSzt1QkFDTCxLQUFLO3NCQUNMLEtBQUs7O0lBeUJSLGlDQUFDO0NBQUEsQUFsQ0QsQ0FLZ0QsY0FBYyxHQTZCN0Q7U0E3QlksMEJBQTBCOzs7SUFFckMseUNBQXFCOztJQUNyQiwwQ0FBc0I7O0lBQ3RCLHlDQUFxQjs7Ozs7SUFHbkIscURBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtBYnN0cmFjdENhbWVyYX0gZnJvbSAnLi9hYnN0cmFjdC1jYW1lcmEnO1xyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCB7UmVuZGVyZXJTZXJ2aWNlfSBmcm9tICcuLi9yZW5kZXJlci9yZW5kZXJlci5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXRmdC1wZXJzcGVjdGl2ZS1jYW1lcmEnLFxyXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBBYnN0cmFjdENhbWVyYSwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gUGVyc3BlY3RpdmVDYW1lcmFDb21wb25lbnQpfV0sXHJcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUGVyc3BlY3RpdmVDYW1lcmFDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdENhbWVyYTxUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYT4ge1xyXG5cclxuICBASW5wdXQoKSBmb3Y6IG51bWJlcjtcclxuICBASW5wdXQoKSBuZWFyOiBudW1iZXI7XHJcbiAgQElucHV0KCkgZmFyOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIHJlbmRlcmVyU2VydmljZTogUmVuZGVyZXJTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICBzdXBlcihyZW5kZXJlclNlcnZpY2UpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGNyZWF0ZUNhbWVyYSgpOiB2b2lkIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdQZXJzcGVjdGl2ZUNhbWVyYUNvbXBvbmVudC5jcmVhdGVDYW1lcmEnKTtcclxuICAgIC8vIGxldCBhc3BlY3RSYXRpbyA9IHVuZGVmaW5lZDsgLy8gVXBkYXRlZCBsYXRlclxyXG4gICAgdGhpcy5jYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoXHJcbiAgICAgIHRoaXMuZm92LFxyXG4gICAgICB1bmRlZmluZWQsXHJcbiAgICAgIHRoaXMubmVhcixcclxuICAgICAgdGhpcy5mYXJcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlQXNwZWN0UmF0aW8oYXNwZWN0OiBudW1iZXIpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdQZXJzcGVjdGl2ZUNhbWVyYUNvbXBvbmVudC51cGRhdGVBc3BlY3RSYXRpbzogJyArIGFzcGVjdCk7XHJcbiAgICB0aGlzLmNhbWVyYS5hc3BlY3QgPSBhc3BlY3Q7XHJcbiAgICB0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=